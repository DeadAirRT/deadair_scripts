<?xml version="1.0" encoding="utf-8"?>
<mdscript name="DeadAirDynamicUniverse" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
	<cues>
		<cue name="Init">
			<actions>
				<!-- TODO: Code changes:
					- Rework variable names and potentially put in table to prevent namespace problems  // $CueName.$Variable?
					- Check cues for variables to be cleaned up
					- Clean up cue variables with namespace this. They do not inherit the variables from parent cue and their children will not either
				-->
				<!-- TODO: Features:
					- Dynamic War Flavor Text
					- Jobs Expeditions News
					- JobSST event_sector_changed owner, reevaluate situation for that sector only
					- Gate activate/deactivate highways
					- Look into adding news events from faction logic when it starts new phase
				-->
				<!-- MAYBE: Features:
					- Allow setting AI traders to use DeadTater
					- Integrate expeditions quota into SST
					- Bounty and Favor rewards for police license kills from a faction against enemy
					- Dynamic war alliances
				-->
				<!-- Base table and shortcut for settings/data -->
				<set_value name="md.$DADynamicVarTable" exact="table[]"/>
				<set_value name="global.$DAVarTable" exact="table[]"/>
				<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
				<set_value name="$DAGVT" exact="global.$DAVarTable"/>
				<set_value name="$DADVT.$DADynamicDebug" exact="true"/>
				<!-- Submod enable disable setting -->
				<set_value name="$DADVT.$DADynamicWarEnable" exact="false"/>
				<set_value name="$DADVT.$DADynamicNewsEnable" exact="false"/>
				<set_value name="$DADVT.$DAEvolutionEnable" exact="false"/>
				<set_value name="$DADVT.$DAFillEnable" exact="false"/>
				<set_value name="$DADVT.$DAJobsEXPEnable" exact="false"/>
				<set_value name="$DADVT.$DAJobsSSTEnable" exact="false"/>
				<set_value name="$DADVT.$DAGateEnable" exact="false"/>
				<set_value name="$DADVT.$DAGodEnable" exact="false"/>
				<set_value name="$DADVT.$DABPEnable" exact="false"/>
				<set_value name="$DAGVT.$DATPEnable" exact="true"/>
				<!-- Dynamic War -->
				<set_value name="$DADVT.$DADynamicWarFavorsEnable" exact="false"/>
				<set_value name="$DADVT.$DADynamicWarDisabledFactions" exact="[faction.buccaneers, faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
				<do_if value="faction.boron?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.boron"/>
				</do_if>
				<do_if value="faction.loanshark?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.loanshark"/>
				</do_if>
				<do_if value="faction.scavenger?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.scavenger"/>
				</do_if>
				<set_value name="$DADVT.$DADynamicWarPermaExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
				<set_value name="$DADVT.$DADynamicWarFactionChanceTable" exact="table[]"/>
				<create_list name="$DADynamicWarLockedRelationFactions"/>
				<create_list name="$DADynamicWarInactiveFactions"/>
				<set_value name="$DADVT.$DADynamicWarEventWeights" exact="[1,16,32,32,16,1,0]"/>
				<set_value name="$DADVT.$DADynamicWarInterval" exact="30"/>
				<set_value name="$DADynamicWarLastEventTime" exact="0s"/>
				<set_value name="$DADVT.$DADynamicWarFavors" exact="table[]"/>
				<set_value name="$DADVT.$DADynamicWarDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DADynamicWarPrimaryRaceModifier" exact="0.25"/>
				<set_value name="$DADVT.$DADynamicWarCurrentRelationsModifier" exact="0.25"/>
				<set_value name="$DADVT.$DADynamicWarCollectiveRelationsModifier" exact="0.25"/>
				<set_value name="$DADVT.$DADynamicWarFlavorEnable" exact="false"/>
				<set_value name="$DADVT.$DADynamicWarRelationsFixEnable" exact="false"/>
				<set_value name="$DADVT.$DADynamicWarRelationsAILimit" exact="0.32" comment="this prevents ally status which is ge 0.5"/>
				<set_value name="$DADVT.$DADynamicWarPossibleFactionsPerEvent" exact="4"/>
				<set_value name="$DADVT.$DADynamicWarStatTracking" exact="true"/>
				<set_value name="$DADVT.$DADynamicWarFatigue" exact="true"/>
				<set_value name="md.$DynamicWarTable" exact="table[]"/>
				<set_value name="$DWT" exact="md.$DynamicWarTable"/>
				<set_value name="$DADVT.$DADynamicWarResultsTable" exact="table[]"/>
				<!-- Dynamic News -->
				<set_value name="$DADVT.$DADynamicNewsTable" exact="table[]"/>
				<set_value name="md.$DADNTable" exact="table[]"/>
				<set_value name="$DADNT" exact="md.$DADNTable"/>
				<find_sector groupname="$DADNT.$DADynamicNewsAllSectors" multiple="true"/>
				<find_station groupname="$DADNT.$DADynamicNewsStations" multiple="true">
					<match_any>
						<match shipyard="true"/>
						<match wharf="true"/>
						<match tradestation="true"/>
						<match equipmentdock="true"/>
						<match defencestation="true"/>
						<match factionheadquarters="true"/>
					</match_any>
				</find_station>
				<set_value name="$DADNT.$DADynamicNewsQueuedReports" exact="table[]"/>
				<set_value name="$DADNT.$DADynamicNewsLastReportTime" exact="0s"/>
				<set_value name="$DADVT.$DADynamicNewsInterval" exact="10"/>
				<set_value name="$DADVT.$DADynamicNewsDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DADynamicNewsEnableNotifications" exact="false"/>
				<set_value name="$DADVT.$DADynamicNewsEnableLogbook" exact="false"/>
				<set_value name="$DADVT.$DADynamicNewsEnableNewsStorage" exact="false"/>
				<set_value name="$DADVT.$DADynamicNewsKnownFactionsOnly" exact="false"/>
				<!-- Evolution -->
				<set_value name="$DADVT.$DAEvolutionInterval" exact="240"/>
				<set_value name="$DADVT.$DAEvolutionMaxLevel" exact="10"/>
				<set_value name="$DADVT.$DAEvoltuionPlayerMaxSetting" exact="10"/>
				<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="0"/>
				<create_list name="$DADVT.$DAEvolutionCurrentEQMods"/>
				<set_value name="$DAEvolutionLastUpgradeTime" exact="0s"/>
				<set_value name="$DADVT.$DAEvolutionEnableJobs" exact="false"/>
				<set_value name="$DADVT.$DAEvolutionMaxXenonJobs" exact="10"/>
				<set_value name="$DADVT.$DAEvolutionXenonFleetSize" exact="2"/>
				<set_value name="$DADVT.$DAEvolutionXenonFleetSizeName" exact="'daevoxen_medium'"/>
				<create_group groupname="$DADVT.$DAEvolutionXenonShipGroup"/>
				<create_group groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers"/>
				<create_list name="$DADVT.$DAEvolutionXenonShipTempList"/>
				<set_value name="$DAEvolutionXenonFleetJobs" exact="['xenon_carrier_patrol_daevoxen_small','xenon_destroyer_patrol_daevoxen_small','xenon_carrier_patrol_daevoxen_medium','xenon_destroyer_patrol_daevoxen_medium','xenon_carrier_patrol_daevoxen_large','xenon_destroyer_patrol_daevoxen_large']"/>
				<set_value name="$DADVT.$DAEvolutionDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DAEvolutionTotalShipsBuilt" exact="0"/>
				<set_value name="$DADVT.$DAEvolutionEnableUpgradeStations" exact="false"/>
				<set_value name="$DADVT.$DAEvolutionEnableFastOrder" exact="true"/>
				<create_group groupname="$DADVT.$DAEvolutionStations"/>
				<find_station_by_true_owner groupname="$DADVT.$DAEvolutionStations" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true">
					<match_any>
						<match shipyard="true"/>
						<match wharf="true"/>
					</match_any>
				</find_station_by_true_owner>
				<set_value name="$DADVT.$DAEvolutionStationProgress" exact="table[]"/>
				<!-- Fill -->
				<set_value name="$DADVT.$DAFillShipModsEnable" exact="true"/>
				<set_value name="$DADVT.$DAFillCheckInterval" exact="60"/>
				<set_value name="$DAFillLastCheckTime" exact="0s"/>
				<set_value name="$DADVT.$DAFillMaxTSWarePercent" exact="90.0"/>
				<set_value name="$DADVT.$DAFillMaxTSWarePercentAfter" exact="75.0"/>
				<set_value name="$DADVT.$DAFillMinTSWarePercent" exact="5.0"/>
				<set_value name="$DADVT.$DAFillMinTSWarePercentAfter" exact="10.0"/>
				<set_value name="$DADVT.$DAFillMinSYWarePercent" exact="5.0"/>
				<set_value name="$DADVT.$DAFillMinSYWarePercentAfter" exact="10.0"/>
				<set_value name="$DADVT.$DAFillShipModFleetEnable" exact="true"/>
				<set_value name="$DADVT.$DAFillShipModPaintEnable" exact="true"/>
				<set_value name="$DADVT.$DAFillPaintModTable" exact="table[]"/>
				<set_value name="$DADVT.$DAFillWareStatistics" exact="table[]"/>
				<set_value name="$DADVT.$DAFillShipmodStatistics" exact="table[]"/>
				<set_value name="$DADVT.$DAFillLimitByValue" exact="true"/>
				<set_value name="$DADVT.$DAFillXenonProtection" exact="true"/>
				<set_value name="$DADVT.$DAFillFactionAccounts" exact="table[]"/>
				<set_value name="$DADVT.$DAFillTSExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
				<set_value name="$DADVT.$DAFillSYWExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor]"/>
				<set_value name="$DADVT.$DAFillDetailedDebug" exact="false"/>
				<!-- Jobs - Expeditions -->
				<set_value name="$DADVT.$DAJobsEXPFactions" exact="[faction.argon, faction.antigone, faction.paranid, faction.holyorder, faction.teladi, faction.split, faction.terran, faction.xenon]"/>
				<create_list name="$DAJobsEXPExcludedFactions"/>
				<set_value name="$DAJobsEXPTags" exact="[tag.daexpedition]"/>
				<set_value name="$DAJobsEXPEnemiesTable" exact="table[]"/>
				<set_value name="$DAJobsEXPAlliesTable" exact="table[]"/>
				<create_list name="$DAJobsEXPErrorFactions"/>
				<create_group groupname="$DAJobsEXPActiveExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPReadyExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPPreparingExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol"/>
				<set_value name="$DADVT.$DAJobsEXPDetailedDebug" exact="false"/>
				<set_value name="$DAJobsEXPExpeditionJobs" exact="[]"/>
				<!-- Jobs - SmartSectorTags -->
				<set_value name="md.$DAJSSTTable" exact="table[]"/>
				<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
				<set_value name="$DAJSST.$CriticalSectors" exact="table[]"/>
				<set_value name="$DAJSST.$CoreSectors" exact="table[]"/>
				<set_value name="$DAJSST.$BorderSectors" exact="table[]"/>
				<set_value name="$DAJSST.$ContestedSectors" exact="table[]"/>
				<set_value name="$DAJSST.$TraderSectors" exact="table[]"/>
				<set_value name="$DAJSST.$MinerSectors" exact="table[]"/>
				<set_value name="$DAJSST.$GasMinerSectors" exact="table[]"/>
				<create_list name="$DAJSST.$ClaimspaceFactions"/>
				<create_group groupname="$DAJSST.$AllSectorGroup"/>
				<set_value name="$DAJSST.$JobsActivated" exact="table[]"/>
				<set_value name="$DAJSST.$PrerequisitesComplete" exact="true"/>
				<set_value name="$DAJSST.$ReadyToOrderShips" exact="true"/>
				<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas" exact="table[]"/>
				<create_group groupname="$DADVT.$DAJobsSSTAllShips"/>
				<set_value name="$DADVT.$DAJobsSSTRemoveExclusivity" exact="false"/>
				<set_value name="$DADVT.$DAJobsSSTUnsupportedFactions" exact="[faction.boron,faction.player]"/>
				<set_value name="$DADVT.$DAJobsSSTDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DAJobsSSTXtremelyDetailedDebug" exact="false"/>
				<set_value name="$DAJSST.$OverrideDefaultExecuted" exact="false"/>
				<set_value name="$DAJSST.$CheckForRecycleTable" exact="table[]"/>
				<set_value name="$DAJSST.$DAJobsSSTTimeScriptStarted" exact="0s"/>
				<create_group groupname="$DAJSST.$ShipsToRecycle"/>
				<!-- Gate -->
				<set_value name="$DADVT.$DAGateTrackedGates" exact="[]"/>
				<set_value name="$DADVT.$DAGateZoneMacros" exact="[macro.ZoneDAG3_Cluster_28_Sector001_macro,macro.ZoneDAG6_Cluster_41_Sector001_macro,
					macro.ZoneDAG3_Cluster_46_Sector001_macro,macro.ZoneDAG6_Cluster_08_Sector001_macro,
					macro.ZoneDAG5_Cluster_15_Sector001_macro,macro.ZoneDAG2_Cluster_43_Sector001_macro,
					macro.ZoneDAG6_Cluster_19_Sector001_macro,macro.ZoneDAG3_Cluster_09_Sector001_macro,
					macro.ZoneDAG4_Cluster_18_Sector001_macro,macro.ZoneDAG1_Cluster_23_Sector001_macro,
					macro.ZoneDAG3_Cluster_14_Sector001_macro,macro.ZoneDAG1_Cluster_06_Sector001_macro]"/>
				<do_if value="faction.split?">
					<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG5_Cluster_405_Sector001_macro,macro.ZoneDAG2_Cluster_418_Sector001_macro]"/>
				</do_if>
				<do_if value="faction.terran?">
					<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG1_Cluster_112_Sector001_macro,macro.ZoneDAG1_Cluster_112_Sector002_macro]"/>
				</do_if>
				<set_value name="$DADVT.$DAGateDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DAGateShowAllGates" exact="false"/>
				<!-- God -->
				<set_value name="$DADVT.$DAGodFactionModuleQuotas" exact="table[]"/>
				<set_value name="$DADVT.$DAGodExcludedFactions" exact="[faction.buccaneers,faction.civilian,faction.criminal,faction.hatikvah,faction.khaak,faction.player,faction.smuggler,faction.visitor,faction.xenon]"/>
				<do_if value="faction.loanshark?">
					<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.loanshark"/>
				</do_if>
				<do_if value="faction.scavenger?">
					<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.scavenger"/>
				</do_if>
				<do_if value="faction.court?">
					<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.court"/>
				</do_if>
				<do_if value="faction.fallensplit?">
					<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.fallensplit"/>
				</do_if>
				<do_if value="faction.yaki?">
					<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.yaki"/>
				</do_if>
				<set_value name="$DADVT.$DAGodDefaultModuleQuotas" exact="table[]"/>
				<set_value name="$DADVT.$DAGodFactionsTriggered" exact="[]"/>
				<set_value name="$DADVT.$DAGodStationsStarted" exact="table[]"/>
				<set_value name="$DADVT.$DAGodStationsExpanded" exact="table[]"/>
				<set_value name="$DADVT.$DAGodStationsFinished" exact="table[]"/>
				<set_value name="$DADVT.$DAGodAllowBuildInPlayer" exact="false"/>
				<set_value name="$DADVT.$DAGodAllowBuildInFriendly" exact="false"/>
				<set_value name="$DADVT.$DAGodAttemptRecovery" exact="true"/>
				<set_value name="$DADVT.$DAGodStationUpgradeEnable" exact="true"/>
				<create_group groupname="$DADVT.$DAGodStationsUpgraded"/>
				<set_value name="$DADVT.$DAGodMaxModuleSetting" exact="25"/>
				<set_value name="$DADVT.$DAGodMaxModuleWarning" exact="false"/>
				<create_group groupname="$DADVT.$DAGodTrackedStations"/>
				<set_value name="$DADVT.$DAGodTrackedStationsInfo" exact="table[]"/>
				<set_value name="$DADVT.$DAGodModuleOrderTable" exact="table[]"/>
				<set_value name="$DADVT.$DAGodStationRequestInterval" exact="1"/>
				<set_value name="$DADVT.$DAGodDetailedDebug" exact="false"/>
				<set_value name="$DADVT.$DAGodXtremelyDetailedDebug" exact="false"/>
				<!-- Jobs - Misc -->
				<set_value name="$DADVT.$DAJobsVanillaSpawnedJobIds" exact="['hatikvah_resourcescout_sm_deepspace_single','hatikvah_free_miner_ml_liquid_deepspace_single','hatikvah_free_miner_l_solid_deepspace_largegroup',
					'scaleplate_plunderer_l_cluster','scaleplate_plunderer_l_cluster_reduced','scaleplate_scavenger_m_cluster','scaleplate_plunderer_m_cluster','scaleplate_smuggler_s','scaleplate_scavenger_sm_deepspace',
					'buc_patrol_m_hidden','buc_patrol_s_hidden','buc_patrol_s_hidden_antisat','buc_plunderer_m_hidden_op','buc_plunderer_m_hidden','buc_guerilla_m_cluster','buc_guerilla_infiltrator_s_cluster',
					'scaleplate_scavenger_m_cluster_bor_core','scaleplate_scavenger_s_cluster_bor_core','scaleplate_plunderer_l_cluster_bor_outer','scaleplate_scavenger_m_cluster_bor_outer','khaak_fighter_s_deepspace_single',
					'khaak_fighter_s_deepspace_group']"/>
				<set_value name="$DADVT.$DAJobsDisabledVanillaSpawnedJobIds" exact="[]"/>
				<!-- Blueprints -->
				<!-- This was inspired by Jack the Stripper's mod BlueprintAnalysis and likeness/code was authorized for use -->
				<set_value name="$DADVT.$DABPTracking" exact="table[]"/>
				<set_value name="$DADVT.$DABPClassRequirements" exact="table[{class.pier} = 20, {class.dockarea} = 20,
							{class.production} = 30, {class.storage} = 60, {class.defencemodule} = 40, {class.buildmodule} = 20, {class.connectionmodule} = 20, {class.habitation} = 40, {class.welfaremodule} = 20, {class.processingmodule} = 20,
							{class.ship_xs} = 20, {class.ship_s} = 40, {class.ship_m} = 50, {class.ship_l} = 60, {class.ship_xl} = 60,
							{class.turret} = 100, {class.missileturret} = 100, {class.missilelauncher} = 100, {class.engine} = 100, {class.shieldgenerator} = 100, {class.weapon} = 100,
							{class.satellite} = 20, {class.missile} = 20, {class.countermeasure} = 20]"/>
				<set_value name="$DADVT.$DABPUnkownClassRequirement" exact="20"/>
				<create_group groupname="$DADVT.$DABPAlreadyScanned"/>
				<set_value name="$DADVT.$DABPDebugEnable" exact="false"/>
				<!-- Trader Profit -->
				<set_value name="$DAGVT.$DATPTraderTable" exact="table[]"/>
				<!-- Update on load are running twice in 7.0 for some reason. -->
				<set_value name="$VerifyVariablesExistTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadDynamicNewsRefreshTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadEvolutionTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadJobsEXPTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadJobsSSTFindFactionsTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadGateTimer" exact="-1s"/>
				<set_value name="$UpdateOnLoadBPTimer" exact="-1s"/>
			</actions>
			<cues>
				<!-- New / Load Save Variable Verification -->
				<cue name="VerifyVariablesExist" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
							<event_cue_signalled/>
						</check_any>
					</conditions>
					<actions>
						<do_if value="(event.name == 'event_cue_signalled') or (event.name == 'event_universe_generated') or ((event.name == 'event_game_loaded') and ((not $VerifyVariablesExistTimer?) or (player.age gt $VerifyVariablesExistTimer)))">
							<do_if value="event.name == 'event_game_loaded'">
								<set_value name="$VerifyVariablesExistTimer" exact="player.age + 5s"/>
							</do_if>
							<set_value name="$TotalMissingVar" exact="0"/>
							<do_if value="(not md.$DADynamicVarTable?) or (md.$DADynamicVarTable == null)">
								<set_value name="md.$DADynamicVarTable" exact="table[]"/>
								<debug_text text="'MOD: DADynamicUniverse -- CRITICAL -- md.$DADynamicVarTable was missing. Will result in reset of all settings.'" context="true" filter="error"/>
								<set_value name="$TotalMissingVar" exact="1" operation="add"/>
							</do_if>
							<do_if value="(not $DADVT?) or ($DADVT == null)">
								<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
								<debug_text text="'MOD: DADynamicUniverse -- ERROR -- $DADVT was missing.'" context="true" filter="error"/>
								<set_value name="$TotalMissingVar" exact="1" operation="add"/>
							</do_if>
							<do_if value="(not global.$DAVarTable?) or (global.$DAVarTable == null)">
								<set_value name="global.$DAVarTable" exact="table[]"/>
								<debug_text text="'MOD: DADynamicUniverse -- ERROR -- global.$DAVarTable was missing.'" context="true" filter="error"/>
								<set_value name="$TotalMissingVar" exact="1" operation="add"/>
							</do_if>
							<do_if value="(not $DAGVT?) or ($DAGVT == null)">
								<set_value name="$DAGVT" exact="global.$DAVarTable"/>
								<debug_text text="'MOD: DADynamicUniverse -- ERROR -- $DAGVT was missing.'" context="true" filter="error"/>
								<set_value name="$TotalMissingVar" exact="1" operation="add"/>
							</do_if>
							<include_actions ref="LibraryCheckDynamicWarVariables"/>
							<include_actions ref="LibraryCheckDynamicNewsVariables"/>
							<include_actions ref="LibraryCheckEvolutionVariables"/>
							<include_actions ref="LibraryCheckFillVariables"/>
							<include_actions ref="LibraryCheckJobsEXPVariables"/>
							<include_actions ref="LibraryCheckJobsSSTVariables"/>
							<include_actions ref="LibraryCheckGateVariables"/>
							<include_actions ref="LibraryCheckGodVariables"/>
							<include_actions ref="LibraryCheckBPVariables"/>
							<include_actions ref="LibraryCheckTPVariables"/>
							<include_actions ref="LibraryCheckMiscVariables"/>
							<do_if value="$TotalMissingVar">
								<debug_text text="'MOD: DADynamicUniverse -- Total number of missing variables from submods set: %s.'.[$TotalMissingVar]" context="true" filter="error"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DADynamicUniverse -- No missing variables.'" context="false" filter="scripts"/>
							</do_else>
							<remove_value name="$TotalMissingVar"/>
						</do_if>
						<cancel_cue cue="this"/>
					</actions>
				</cue>
				<!-- UpdateOneTimeRework cues -->
				<cue name="UpdateOneTimeDynamicNewsv111" instantiate="false">
					<actions>
						<do_if value="not $DADNT? or ($DADNT == null)">
							<include_actions ref="LibraryCheckDynamicNewsVariables"/>
						</do_if>
					</actions>
				</cue>
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic War // Timer Cues -->
				<cue name="TimerDynamicWarEvents" instantiate="true" checkinterval="5min" checktime="30min" comment="Timer 00/30 default">
					<conditions>
						<check_value value="player.age ge ($DADynamicWarLastEventTime + ($DADVT.$DADynamicWarInterval)min)"/>
						<check_value value="$DADVT.$DADynamicWarEnable"/>
					</conditions>
					<actions>
						<set_value name="$DADynamicWarLastEventTime" exact="player.age"/>
						<signal_cue_instantly cue="EventDynamicWarEventSelector"/>
					</actions>
				</cue>
				<cue name="TimerDynamicWarFavorsCue" instantiate="true" checkinterval="30min" checktime="30min" comment="Timer 00/30">
					<conditions>
						<check_value value="$DADVT.$DADynamicWarFavorsEnable"/>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventDynamicWarFavors"/>
					</actions>
				</cue>
				<cue name="TimerDynamicWarRelationsFix" instantiate="true" checkinterval="30min" checktime="1min" comment="Timer 01/31">
					<conditions>
						<check_value value="$DADVT.$DADynamicWarRelationsFixEnable"/>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventDynamicWarRelationsFix"/>
					</actions>
				</cue>
				<!-- Dynamic War // Event cues -->
				<cue name="EventDynamicWarEventSelector" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="(not $DWT?) or ($DWT == null)">
							<set_value name="$DWT" exact="md.$DynamicWarTable"/>
						</do_if>
						<do_if value="(not $DADVT?) or ($DADVT == null)">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- We will start by choosing an event -->
						<set_value name="$DADynamicWarLocWarEvent" exact="'Nothing'"/>
						<set_value name="$DADynamicWarLocEventFaction" exact="null"/>
						<set_value name="$DADynamicWarLocEventFactionTwo" exact="null"/>
						<set_value name="$DADynamicWarLocEnoughFactionsFound" exact="null"/>
						<!-- $DADVT.$DADynamicWarEventWeights {1} Bestie {2} BigBoost {3} Small Boost {4} Small Blow {5} Big Blow {6} Nemesis {7} Nothing -->
						<do_any>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Besties'" weight="$DADVT.$DADynamicWarEventWeights.{1}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'BigBoost'" weight="$DADVT.$DADynamicWarEventWeights.{2}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'SmallBoost'" weight="$DADVT.$DADynamicWarEventWeights.{3}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'SmallBlow'" weight="$DADVT.$DADynamicWarEventWeights.{4}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'BigBlow'" weight="$DADVT.$DADynamicWarEventWeights.{5}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Nemesis'" weight="$DADVT.$DADynamicWarEventWeights.{6}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Nothing'" weight="$DADVT.$DADynamicWarEventWeights.{7}"/>
						</do_any>
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<debug_text text="'MOD: DADynamicWar -- Event Chosen: %s'.[$DADynamicWarLocWarEvent]" context="false" filter="scripts"/>
						</do_if>
						<!-- If nothing then we don't need to do any more processing -->
						<do_if value="$DADynamicWarLocWarEvent != 'Nothing'">
							<!-- We will now use the LibraryDynamicWarFindFactions library to get $DADynamicWarClaimspaceList -->
							<include_actions ref="LibraryDynamicWarFindFactions"/>
							<!-- This is to keep ALL the factions whose chance needs to be updated from $DADynamicWarClaimspaceList since it will be trimmed further down -->
							<set_value name="$DADynamicWarClaimspaceListFull" exact="[]"/>
							<append_list_elements name="$DADynamicWarClaimspaceListFull" other="$DADynamicWarClaimspaceList"/>
							<!-- Choose the highest chance faction, we will have plenty of RNG introduced in second faction selection -->
							<shuffle_list list="$DADynamicWarClaimspaceList"/>
							<do_for_each name="$DADynamicWarLocPossibleFactionOne" in="$DADynamicWarClaimspaceList" reverse="true">
								<!-- 20231227 Set initial value if not found in table -->
								<do_if value="not $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne}?">
									<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne}" exact="4"/>
								</do_if>
								<do_if value="$DADynamicWarLocEventFaction">
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne} gt $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}">
										<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne"/>
									</do_if>
									<do_elseif value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne} == $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}">
										<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne" chance="50"/>
									</do_elseif>
									<do_else>
										<!-- Lower chance has to wait until $DADynamicWarLocEventFactionTwo -->
									</do_else>
								</do_if>
								<do_else>
									<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne"/>
								</do_else>
							</do_for_each>
							<remove_value name="$DADynamicWarLocPossibleFactionOne"/>
							<!-- At this point we should have $DADynamicWarLocEventFaction so lets print it out for debug -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'MOD: DADynamicWar -- Faction selected: %s -- Chance: %s'.[$DADynamicWarLocEventFaction,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}]" context="false" filter="scripts"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- Event: %s -- $DADynamicWarLocEventFaction: %s -- Chance: %s'.[player.age,$DADynamicWarLocWarEvent,$DADynamicWarLocEventFaction,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}]" output="false" append="true"/>
							</do_if>
							<!-- Remove the selected faction from $DADynamicWarClaimspaceList -->
							<remove_from_list name="$DADynamicWarClaimspaceList" exact="$DADynamicWarLocEventFaction" multiple="true"/>
							<!-- Shuffle then Sort highest accumulated chance to lowest -->
							<shuffle_list list="$DADynamicWarClaimspaceList"/>
							<sort_list list="$DADynamicWarClaimspaceList" sortbyvalue="$DADVT.$DADynamicWarFactionChanceTable.{loop.element}" sortdescending="true"/>
							<!-- 20231227 Since I allow user to adjust count, adjusting code so it works with as little as two active factions -->
							<!-- Reduce to four highest options and cleanup -->
							<!-- DONE: Allow option to change number of factions selected since it has potential performance impact -->
							<do_if value="($DADynamicWarClaimspaceList.count gt $DADVT.$DADynamicWarPossibleFactionsPerEvent)">
								<resize_list list="$DADynamicWarClaimspaceList" count="$DADVT.$DADynamicWarPossibleFactionsPerEvent"/>
							</do_if>
							<do_if value="$DADynamicWarClaimspaceList.count ge 1">
								<!-- Lets print out the results for debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'Trimmed $DADynamicWarClaimspaceList -- Possible factions: %s'.[$DADynamicWarClaimspaceList.count]"/>
									<do_all exact="$DADynamicWarClaimspaceList.count" counter="$X">
										<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'\n  %s: %s -- Chance: %s'.[$X,$DADynamicWarClaimspaceList.{$X}.knownname,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceList.{$X}}]" operation="add"/>
									</do_all>
									<debug_text text="'MOD: DADynamicWar -- %s'.[$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
									<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
									<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
									<remove_value name="$X"/>
								</do_if>
								<set_value name="$DADynamicWarLocEnoughFactionsFound" exact="true"/>
							</do_if>
							<do_elseif value="$DADVT.$DADynamicWarDetailedDebug">
								<!-- DONE: Code an escape from script -->
								<debug_text text="'MOD: DADynamicWar -- Not enough factions found to perform Dynamic War Script.'" context="true" filter="error"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- ERROR -- Not enough factions found to perform Dynamic War Script.'.[player.age]" output="false" append="true"/>
							</do_elseif>
							<do_if value="$DADynamicWarLocEnoughFactionsFound">
								<!-- Time to calculate all the other factors -->
								<!-- DONE: Change to a table for the values -->
								<set_value name="$DADynamicWarPossibleFactionTable" exact="table[]"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarClaimspaceList">
									<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight, {4} = Weight Start, {5} = Weight End -->
									<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}" exact="[1,1,0,0,0]"/>
								</do_for_each>
								<!-- Start with Mil Strength -->
								<!-- TODO: Adjust the way factors are implemented since it leads to very similar values // MilStrengthFactor is almost always min or max -->
								<!-- MAYBE: Go through each value in $DADynamicWarPossibleFactionTable.{$Faction}.{1} and scale to incremental values? -->
								<include_actions ref="LibraryDynamicWarCalculateMilStrengthFactor"/>
								<!-- We have $DADynamicWarPossibleFactionTable.{$Faction}.{1} values for each $DADynamicWarClaimspaceList -->
								<include_actions ref="LibraryDynamicWarCalculateMisc"/>
								<!-- We have $DADynamicWarPossibleFactionTable.{$Faction}.{2} values for each $DADynamicWarClaimspaceList -->
								<!-- We can use $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceList.{$Counter}} for chance -->
								<!-- Select $DADynamicWarFactionTwo -->
								<!-- Assign by non weighted random just to prevent possible errors if new code fails -->
								<set_value name="$DADynamicWarLocEventFactionTwo" exact="$DADynamicWarClaimspaceList.random"/>
								<!-- Start Debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'MOD: DADynamicWar -- FactionTwo Report'"/>
								</do_if>
								<!-- 20231228 New code portion -->
								<!-- DONE:	Once values are part of a table with faction as key, do_for_each key calculate values and add result to a variable, set value min 1 max total in variable, choose faction based on the randomized number
											Allows unknown number of factions to be processed and avoids the old disgusting code
											Table format: Key = Faction, ValueType = List, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight, {4} = Weight Start, {5} = Weight End
											Test if min float max float will result in a float or not, if not then round the min value and max values to int
								-->
								<!-- MAYBE: Weight each section? Chance * 50 + MilStrengthFactor * 50 + MiscFactor * 25? -->
								<set_value name="$DADynamicWarLocTotalWeight" exact="0.0"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E" comment="Not sure why I like using $E today, must be tired">
									<do_if value="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}?">
										<set_value name="$DADynamicWarLocMilStrengthValue" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{1}"/>
										<set_value name="$DADynamicWarLocMiscValue" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{2}"/>
										<set_value name="$DADynamicWarLocChanceValue" exact="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarPossibleFaction}"/>
										<set_value name="$DADynamicWarLocWeightValue" exact="(($DADynamicWarLocChanceValue)f * ($DADynamicWarLocMilStrengthValue) * ($DADynamicWarLocMiscValue) * 100.0)"/>
										<set_value name="$DADynamicWarLocExperimentalWeightValue" exact="(($DADynamicWarLocChanceValue * 50.0) + ($DADynamicWarLocMilStrengthValue * 50.0) + ($DADynamicWarLocMiscValue * 25.0))"/>
										<do_if value="$DADVT.$DADynamicWarDetailedDebug">
											<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  %s: %s -- Chance: %s -- MilStrength: %s -- MiscFactor: %s -- Weight: %s -- ExperimentalWeight: %s'.[$E,$DADynamicWarPossibleFaction,$DADynamicWarLocChanceValue,$DADynamicWarLocMilStrengthValue,$DADynamicWarLocMiscValue,$DADynamicWarLocWeightValue,$DADynamicWarLocExperimentalWeightValue]" operation="add"/>
										</do_if>
										<do_if value="$DADynamicWarLocWeightValue gt 0">
											<set_value name="$DADynamicWarLocTotalWeight" exact="$DADynamicWarLocWeightValue" operation="add"/>
											<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}" exact="$DADynamicWarLocWeightValue"/>
										</do_if>
										<do_elseif value="($DADynamicWarLocWeightValue == null) or ($DADynamicWarLocWeightValue le 0)">
											<remove_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}"/>
										</do_elseif>
									</do_if>
								</do_for_each>
								<!-- Now to handle setting up the ranges and select faction -->
								<set_value name="$DADynamicWarLocCurrentRange" exact="[0.0,0.0]"/>
								<set_value name="$DADynamicWarLocSelectedWeightValue" min="1.0" max="$DADynamicWarLocTotalWeight" comment="Technically selected faction but have no clue who it is"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarPossibleFactionTable.keys.list" counter="$E">
									<set_value name="$DADynamicWarLocSelectedFaction" exact="false"/>
									<!-- Will give exact value between two ranges to lower for less computation -->
									<do_if value="$E == 1">
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{4}" exact="1.0"/>
										<set_value name="$DADynamicWarLocCurrentRange" exact="[1,$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}]"/>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{5}" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{4}" exact="$DADynamicWarLocCurrentRange.{2}"/>
										<set_value name="$DADynamicWarLocCurrentRange" exact="[$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocCurrentRange.{2} + $DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}]"/>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{5}" exact="$DADynamicWarLocCurrentRange.{2}"/>
									</do_else>
									<!-- Figure out if faction was selected and break out if so -->
									<do_if value="($E == 1) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2})">
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_if>
									<do_elseif value="($E != 1) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2})">
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<do_elseif value="($E == $DADynamicWarPossibleFactionTable.keys.count) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2}) and (not $DADynamicWarLocSelectedFaction)">
										<!-- The most valid calculation required -->
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<do_elseif value="($E == $DADynamicWarPossibleFactionTable.keys.count) and (not $DADynamicWarLocSelectedFaction)">
										<!-- Error // Will set last faction as selected but send error to debug // could escape the script since pity selection isn't ideal, but hopefully this doesn't error instead -->
										<debug_text text="'MOD: DADynamicWar -- ERROR SELECTING FACTIONTWO\n  %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" context="true" filter="error"/>
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<!-- Debug -->
									<do_if value="$DADVT.$DADynamicWarDetailedDebug and (not $DADynamicWarLocSelectedFaction)">
										<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  %s: %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[$E,$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" operation="add"/>
									</do_if>
									<!-- Selected? -->
									<do_if value="$DADynamicWarLocSelectedFaction">
										<do_if value="$DADVT.$DADynamicWarDetailedDebug">
											<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  FACTIONTWO SELECTED: %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" operation="add"/>
										</do_if>
										<set_value name="$DADynamicWarLocEventFactionTwo" exact="$DADynamicWarPossibleFaction"/>
										<break/>
									</do_if>
								</do_for_each>
								<!-- Print out result for debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<debug_text text="'%s'.[$DADynamicWarLocFactionSelectionDebug]" context="false" filter="scripts"/>
									<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s'.[$DADynamicWarLocFactionSelectionDebug]" output="false" append="true"/>
								</do_if>
								<!-- Cleanup -->
								<remove_value name="$DADynamicWarPossibleFactionTable"/>
								<remove_value name="$DADynamicWarLocFactionSelectionDebug"/>
								<remove_value name="$DADynamicWarLocMilStrengthValue"/>
								<remove_value name="$DADynamicWarLocMiscValue"/>
								<remove_value name="$DADynamicWarLocChanceValue"/>
								<remove_value name="$DADynamicWarLocWeightValue"/>
								<remove_value name="$DADynamicWarLocExperimentalWeightValue"/>
								<remove_value name="$DADynamicWarLocTotalWeight"/>
								<remove_value name="$DADynamicWarLocCurrentRange"/>
								<remove_value name="$DADynamicWarLocSelectedWeightValue"/>
								<remove_value name="$DADynamicWarLocSelectedFaction"/>
								<!-- 20231229 Past midnight, This shit isn't ugly anymore at least to my tired ass -->
								<!-- Update chance factor -->
								<!-- We have $DADynamicWarLocEventFaction, $DADynamicWarLocEventFactionTwo, and $DADynamicWarClaimspaceListFull -->
								<include_actions ref="LibraryDynamicWarUpdateChance"/>
								<!-- Remove $DADynamicWarClaimspaceListFull since it's purpose is completed -->
								<remove_value name="$DADynamicWarClaimspaceListFull"/>
								<!-- Execute the relation changes -->
								<!-- We have a selected faction for $DADynamicWarLocEventFaction and $DADynamicWarLocEventFactionTwo -->
								<!-- Wouldn't hurt to add an extra error check here -->
								<do_if value="$DADynamicWarLocEventFaction and $DADynamicWarLocEventFactionTwo">
									<include_actions ref="LibraryDynamicWarEventExecute"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DADynamicWar -- Error Occured ($DADynamicWarLocEventFaction or $DADynamicWarLocEventFactionTwo missing): %s -- %s'.[$DADynamicWarLocEventFaction,$DADynamicWarLocEventFactionTwo]" context="true" filter="error"/>
								</do_else>
							</do_if>
							<do_elseif value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'MOD: DADynamicWar -- Aborted Script. Not enough factions.'" context="true" filter="error"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- ERROR -- Aborted Script. Not enough factions.'.[player.age]" output="false" append="true"/>
							</do_elseif>
							<remove_value name="$DADynamicWarLocEnoughFactionsFound"/>
						</do_if>
						<do_elseif value="($DADynamicWarLocWarEvent == 'Nothing') and $DADVT.$DADynamicWarDetailedDebug">
							<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- Event: %s'.[player.age,$DADynamicWarLocWarEvent]" output="false" append="true"/>
						</do_elseif>
						<!-- Clean up since this round is done -->
						<remove_value name="$DADynamicWarLocWarEvent"/>
						<remove_value name="$DADynamicWarLocEventFaction"/>
						<remove_value name="$DADynamicWarLocEventFactionTwo"/>
						<remove_value name="$DADynamicWarPossibleFactionMilStrengthList"/>
						<remove_value name="$DADynamicWarPossibleFactionMiscModifierList"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarFavors" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- Check player friendly factions -->
						<set_value name="$DADynFavFactionList" exact="[]"/>
						<set_value name="$DADynFavEconomicList" exact="[]"/>
						<set_value name="$DADynFavVisitorList" exact="[]"/>
						<set_value name="$DADynFavExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
						<set_value name="$DADynFavTerranFactions" exact="[faction.terran, faction.pioneers, faction.yaki]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DADynFavFactionList"/>
						<get_factions_by_tag tag="tag.economic" result="$DADynFavEconomicList"/>
						<get_factions_by_tag tag="tag.visitor" result="$DADynFavVisitorList"/>
						<remove_from_list name="$DADynFavEconomicList" list="$DADynFavFactionList" multiple="true"/>
						<remove_from_list name="$DADynFavTerranFactions" list="$DADynFavFactionList" multiple="true"/>
						<append_list_elements name="$DADynFavFactionList" other="$DADynFavEconomicList"/>
						<append_list_elements name="$DADynFavFactionList" other="$DADynFavTerranFactions"/>
						<remove_from_list name="$DADynFavFactionList" list="$DADynFavVisitorList" multiple="true"/>
						<remove_from_list name="$DADynFavFactionList" list="$DADynFavExcludedFactions" multiple="true"/>
						<do_all exact="$DADynFavFactionList.count" counter="$B" reverse="true">
							<do_if value="($DADynFavFactionList.{$B} == null) or ($DADynFavFactionList.{$B}.isactive != true)">
								<remove_value name="$DADynFavFactionList.{$B}"/>
							</do_if>
						</do_all>
						<sort_list list="$DADynFavFactionList" sortbyvalue="loop.element.knownname"/>
						<!-- Add +1 favor if above threshold up to 3 favors per -->
						<do_for_each name="$DADynFavFavorFaction" in="$DADynFavFactionList">
							<do_if value="($DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}?) and ($DADynFavFavorFaction != faction.player)">
								<!-- Update our entry -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<!-- 20240402 Uncapped favors -->
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="1" operation="add"/>
								</do_if>
							</do_if>
							<do_elseif value="($DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}?) and (@$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction} == null) and ($DADynFavFavorFaction != faction.player)">
								<!-- We have the top level table, but not the specific entry -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="0"/>
								</do_else>
							</do_elseif>
							<do_elseif value="($DADynFavFavorFaction != faction.player)">
								<!-- We have nothing sadface -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="0"/>
								</do_else>
							</do_elseif>
						</do_for_each>
						<set_value name="$DADVT.$DADynamicWarFavors.{faction.player}" exact="0"/>
						<remove_value name="$DADynFavFavorFaction"/>
						<remove_value name="$DADynFavFactionList"/>
						<remove_value name="$DADynFavEconomicList"/>
						<remove_value name="$DADynFavVisitorList"/>
						<remove_value name="$DADynFavExcludedFactions"/>
						<remove_value name="$DADynFavTerranFactions"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarRelationsFix" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- 1.0 = 30		0.32 = 25		0.1 = 20		0.032 = 15		0.01 = 10		0.0032 = 5 -->
						<!-- Hard coded excluded factions -->
						<set_value name="$DARelFixLocExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
						<!-- Find claimspace factions -->
						<set_value name="$DARelFixLocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DARelFixLocClaimspaceList"/>
						<!-- Find peaceful factions -->
						<set_value name="$DARelFixLocPeacefulList" exact="[]"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DARelFixLocPeacefulList"/>
						<!-- Find visitor factions -->
						<set_value name="$DARelFixLocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$DARelFixLocVisitorList"/>
						<!-- Remove excluded, peaceful, and visitors from claimspace list -->
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocExcludedFactions" multiple="true"/>
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocPeacefulList" multiple="true"/>
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocVisitorList" multiple="true"/>
						<!-- Maximum AI:AI relations should be $DADVT.$DADynamicWarRelationsAILimit due to jobs -->
						<do_for_each name="$DARelFixLocFactionOne" in="$DARelFixLocClaimspaceList">
							<do_for_each name="$DARelFixLocFactionTwo" in="$DARelFixLocClaimspaceList">
								<!-- 20231227 Ignoring if faction is police faction of the other -->
								<!-- 20240309 Ignoring inactive faction should solve trinity problem -->
								<do_if value="($DARelFixLocFactionOne != $DARelFixLocFactionTwo) and ($DARelFixLocFactionOne.relationto.{$DARelFixLocFactionTwo} gt $DADVT.$DADynamicWarRelationsAILimit) and ($DARelFixLocFactionOne.policefaction != $DARelFixLocFactionTwo) and ($DARelFixLocFactionTwo.policefaction != $DARelFixLocFactionOne) and ($DARelFixLocFactionOne.isactive) and ($DARelFixLocFactionTwo.isactive)">
									<set_faction_relation faction="$DARelFixLocFactionOne" otherfaction="$DARelFixLocFactionTwo" value="$DADVT.$DADynamicWarRelationsAILimit"/>
									<set_faction_relation faction="$DARelFixLocFactionTwo" otherfaction="$DARelFixLocFactionOne" value="$DADVT.$DADynamicWarRelationsAILimit"/>
									<debug_text text="'MOD: DeadAirDynamicWars -- Fixed relations between %s and %s. New relation is %s.'.[$DARelFixLocFactionOne.knownname,$DARelFixLocFactionTwo.knownname,$DARelFixLocFactionOne.relation.{$DARelFixLocFactionOne.relationto.{$DARelFixLocFactionTwo}}.uivalue]" context="false" filter="scripts"/>
								</do_if>
							</do_for_each>
						</do_for_each>
						<!-- Match Ministry Relations to Teladi -->
						<do_for_each name="$DARelFixLocOtherFaction" in="$DARelFixLocClaimspaceList">
							<!-- 20240309 Ignoring inactive faction should solve trinity problem -->
							<do_if value="(faction.teladi.relationto.{$DARelFixLocOtherFaction} != faction.ministry.relationto.{$DARelFixLocOtherFaction}) and ($DARelFixLocOtherFaction != faction.teladi) and ($DARelFixLocOtherFaction != faction.ministry) and (faction.ministry.isactive) and ($DARelFixLocOtherFaction.isactive)">
								<set_faction_relation faction="faction.ministry" otherfaction="$DARelFixLocOtherFaction" value="faction.teladi.relationto.{$DARelFixLocOtherFaction}"/>
								<set_faction_relation faction="$DARelFixLocOtherFaction" otherfaction="faction.ministry" value="faction.teladi.relationto.{$DARelFixLocOtherFaction}"/>
								<debug_text text="'MOD: DeadAirDynamicWars -- Fixed relations between %s and %s. New relation is %s.'.[faction.ministry.knownname,$DARelFixLocOtherFaction.knownname,faction.ministry.relation.{faction.ministry.relationto.{$DARelFixLocOtherFaction}}.uivalue]" context="false" filter="scripts"/>
							</do_if>
						</do_for_each>
						<remove_value name="$DARelFixLocExcludedFactions"/>
						<remove_value name="$DARelFixLocClaimspaceList"/>
						<remove_value name="$DARelFixLocPeacefulList"/>
						<remove_value name="$DARelFixLocVisitorList"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarTrackEvent" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- Set up variables for this cue -->
						<do_if value="(not $DWT?) or ($DWT == null)">
							<set_value name="$DWT" exact="md.$DynamicWarTable"/>
						</do_if>
						<do_if value="(not $DADVT?) or ($DADVT == null)">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- param="[$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]" -->
						<do_if value="@event.param.{1} and (typeof event.param.{1} == datatype.faction) and @event.param.{2} and (typeof event.param.{2} == datatype.faction) and (@event.param.{3} != null) and (@event.param.{4} != null)">
							<set_value name="$LocFacOne" exact="event.param.{1}"/>
							<set_value name="$LocFacTwo" exact="event.param.{2}"/>
							<set_value name="$LocOldRel" exact="event.param.{3}"/>
							<set_value name="$LocNewRel" exact="event.param.{4}"/>
							<set_value name="$LocWarStart" exact="player.age"/>
						</do_if>
						<do_if value="$LocFacOne? and $LocFacTwo? and $LocOldRel? and $LocNewRel?">
							<set_value name="$NewData" exact="false"/>
							<set_value name="$Error" exact="false"/>
							<!-- Track wars started by DW where relation goes from gt -0.1 to le -0.1 -->
							<!-- Check for Faction Table in $DWT -->
							<!-- $DWT.{$LocFacOne}.{$LocFacTwo} == [$Time,$OldRel,$NewRel,$Fatigue,$WarScore,$EndNow(bool),$SilentQuit(bool)] -->
							<do_if value="not $DWT.{$LocFacOne}?">
								<!-- Set up table first -->
								<!-- New War, track data for determining war results and signal tracking cue -->
								<set_value name="$DWT.{$LocFacOne}" exact="table[]"/>
								<set_value name="$DWT.{$LocFacOne}.{$LocFacTwo}" exact="[$LocWarStart,$LocOldRel,$LocNewRel,0,0,false,false]"/>
								<set_value name="$NewData" exact="true"/>
							</do_if>
							<do_elseif value="$DWT.{$LocFacOne}? and (not $DWT.{$LocFacOne}.{$LocFacTwo}?)">
								<!-- New War, track data for determining war results and signal tracking cue -->
								<set_value name="$DWT.{$LocFacOne}.{$LocFacTwo}" exact="[$LocWarStart,$LocOldRel,$LocNewRel,0,0,false,false]"/>
								<set_value name="$NewData" exact="true"/>
							</do_elseif>
							<do_elseif value="$DWT.{$LocFacOne}? and $DWT.{$LocFacOne}.{$LocFacTwo}?">
								<!-- Already tracked -->
							</do_elseif>
							<do_if value="not $DWT.{$LocFacTwo}?">
								<do_if value="not $NewData">
									<set_value name="$Error" exact="true"/>
								</do_if>
								<do_else>
									<!-- Set up table first -->
									<!-- New War, track data for determining war results and signal tracking cue -->
									<set_value name="$DWT.{$LocFacTwo}" exact="table[]"/>
									<set_value name="$DWT.{$LocFacTwo}.{$LocFacOne}" exact="[$LocWarStart,$LocOldRel,$LocNewRel,0,0,false,false]"/>
								</do_else>
							</do_if>
							<do_elseif value="$DWT.{$LocFacTwo}? and (not $DWT.{$LocFacTwo}.{$LocFacOne}?)">
								<do_if value="not $NewData">
									<set_value name="$Error" exact="true"/>
								</do_if>
								<do_else>
									<!-- New War, track data for determining war results and signal tracking cue -->
									<set_value name="$DWT.{$LocFacTwo}.{$LocFacOne}" exact="[$LocWarStart,$LocOldRel,$LocNewRel,0,0,false,false]"/>
								</do_else>
							</do_elseif>
							<do_elseif value="$DWT.{$LocFacTwo}? and $DWT.{$LocFacTwo}.{$LocFacOne}?">
								<!-- Already tracked -->
								<do_if value="$NewData">
									<set_value name="$Error" exact="true"/>
								</do_if>
							</do_elseif>
							<debug_text text="'MOD: DW -- EventDynamicWarTrackEvent -- Event Tracking Check -- $LocFacOne: %s -- $LocFacTwo: %s -- $NewData: %s -- $Error: %s'.[@$LocFacOne,@$LocFacTwo,$NewData,$Error]" context="true" filter="scripts"/>
						</do_if>
						<do_if value="@$Error">
							<!-- Set $SilentQuit -->
							<do_if value="$DWT.{$LocFacOne}.{$LocFacTwo}?">
								<set_value name="$DWT.{$LocFacOne}.{$LocFacTwo}.{7}" exact="true"/>
								<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}?">
									<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}"/>
								</do_if>
							</do_if>
							<do_if value="$DWT.{$LocFacTwo}.{$LocFacOne}?">
								<set_value name="$DWT.{$LocFacTwo}.{$LocFacOne}.{7}" exact="true"/>
								<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}?">
									<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}"/>
								</do_if>
							</do_if>
							<debug_text text="'MOD: DW -- EventDynamicWarTrackEvent -- ERROR:HANDLED -- Mismatched data tracking for war. Cleaning up previous tracking silently -- $LocFacOne: %s -- $LocFacTwo: %s -- $DWT.{$LocFacOne}.{$LocFacTwo}?: %s -- $DWT.{$LocFacTwo}.{$LocFacOne}?: %s'.[@$LocFacOne,@$LocFacTwo,$DWT.{$LocFacOne}.{$LocFacTwo}?,$DWT.{$LocFacTwo}.{$LocFacOne}?]" context="false" filter="scripts"/>
						</do_if>
						<do_elseif value="@$NewData">
							<!-- Signal war tracking cue -->
							<signal_cue_instantly cue="EventDynamicWarTrackWar" param="[$LocFacOne,$LocFacTwo]"/>
						</do_elseif>
						<remove_value name="$LocFacOne"/>
						<remove_value name="$LocFacTwo"/>
						<remove_value name="$LocOldRel"/>
						<remove_value name="$LocNewRel"/>
						<remove_value name="$NewData"/>
						<remove_value name="$Error"/>
						<cancel_cue cue="EventDynamicWarTrackEvent"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarTrackWar" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- param="[$LocFacOne,$LocFacTwo]" -->
						<!-- $DWT.{$LocFacOne}.{$LocFacTwo} == [$Time,$OldRel,$NewRel,$Fatigue,$WarScore,$EndNow(bool),$SilentQuit(bool)] -->
						<do_if value="@event.param.{1} and (typeof event.param.{1} == datatype.faction) and @event.param.{2} and (typeof event.param.{2} == datatype.faction)">
							<set_value name="$LocFacOne" exact="event.param.{1}"/>
							<set_value name="$LocFacTwo" exact="event.param.{2}"/>
						</do_if>
						<do_else>
							<cancel_cue cue="EventDynamicWarTrackWar"/>
						</do_else>
						<do_if value="$LocFacOne? and $LocFacTwo? and $LocFacOne.isactive and $LocFacTwo.isactive">
							<create_group groupname="$LocFacOneMilShips"/>
							<create_group groupname="$LocFacOneCivShips"/>
							<create_group groupname="$LocFacOneStations"/>
							<create_group groupname="$LocFacTwoMilShips"/>
							<create_group groupname="$LocFacTwoCivShips"/>
							<create_group groupname="$LocFacTwoStations"/>
							<find_ship_by_true_owner groupname="$LocFacOneMilShips" faction="$LocFacOne" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="false" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.fight"/>
									<match primarypurpose="purpose.auxiliary"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacOneMilShips" faction="$LocFacOne" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="true" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.fight"/>
									<match primarypurpose="purpose.auxiliary"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacTwoMilShips" faction="$LocFacTwo" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="false" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.fight"/>
									<match primarypurpose="purpose.auxiliary"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacTwoMilShips" faction="$LocFacTwo" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="true" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.fight"/>
									<match primarypurpose="purpose.auxiliary"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacOneCivShips" faction="$LocFacOne" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="false" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.trade"/>
									<match primarypurpose="purpose.build"/>
									<match primarypurpose="purpose.mine"/>
									<match primarypurpose="purpose.salvage"/>
									<match primarypurpose="purpose.dismantling"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacOneCivShips" faction="$LocFacOne" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="true" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.trade"/>
									<match primarypurpose="purpose.build"/>
									<match primarypurpose="purpose.mine"/>
									<match primarypurpose="purpose.salvage"/>
									<match primarypurpose="purpose.dismantling"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacTwoCivShips" faction="$LocFacTwo" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="false" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.trade"/>
									<match primarypurpose="purpose.build"/>
									<match primarypurpose="purpose.mine"/>
									<match primarypurpose="purpose.salvage"/>
									<match primarypurpose="purpose.dismantling"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_ship_by_true_owner groupname="$LocFacTwoCivShips" faction="$LocFacTwo" space="player.galaxy" checkoperational="true" masstraffic="false" unit="false" docked="true" multiple="true" recursive="true">
								<match shiptype="shiptype.lasertower" negate="true"/>
								<match_any>
									<match primarypurpose="purpose.trade"/>
									<match primarypurpose="purpose.build"/>
									<match primarypurpose="purpose.mine"/>
									<match primarypurpose="purpose.salvage"/>
									<match primarypurpose="purpose.dismantling"/>
								</match_any>
							</find_ship_by_true_owner>
							<find_station_by_true_owner groupname="$LocFacOneStations" faction="$LocFacOne" space="player.galaxy" checkoperational="true" multiple="true"/>
							<find_station_by_true_owner groupname="$LocFacTwoStations" faction="$LocFacTwo" space="player.galaxy" checkoperational="true" multiple="true"/>
							<!-- $DWT.{$LocFacOne}.{$LocFacTwo} == [$Time,$OldRel,$NewRel,$Fatigue,$WarScore,$EndNow(bool),$SilentQuit(bool)] -->
							<!-- $LocFacData == [$LocFatigue,$LocWarScore,$MilKills,$CivKills,$StationKills,$MilXLKill,$MilLKill,$MilMKill,$MilSKill,$CivXLKill,$CivLKill,$CivMKill,$CivSKill,$TimeEnded] -->
							<set_value name="$LocFacOneData" exact="[0,0,0,0,0,0,0,0,0,0,0,0,0,null]"/>
							<set_value name="$LocFacTwoData" exact="[0,0,0,0,0,0,0,0,0,0,0,0,0,null]"/>
							<set_value name="$StopDataGather" exact="false"/>
							<do_if value="(not $DADVT?) or ($DADVT == null)">
								<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
							</do_if>
							<do_if value="(not $DWT?) or ($DWT == null)">
								<set_value name="$DWT" exact="md.$DynamicWarTable"/>
							</do_if>
							<set_value name="$OutputDebug" exact="$DADVT.$DADynamicWarDetailedDebug"/>
						</do_if>
						<do_else>
							<cancel_cue cue="EventDynamicWarTrackWar"/>
						</do_else>
					</actions>
					<cues>
						<cue name="DynamicWarTrackFacOneNewShips" instantiate="true">
							<conditions>
								<event_job_ship_activated/>
								<check_value value="event.param.trueowner == $LocFacOne"/>
								<check_value value="event.param.primarypurpose"/>
								<check_value value="event.param.isclass.[class.ship_xl,class.ship_l,class.ship_m,class.ship_s]"/>
								<check_value value="not $StopDataGather"/>
							</conditions>
							<actions>
								<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.param.primarypurpose}">
									<add_to_group groupname="$LocFacOneMilShips" object="event.param"/>
								</do_if>
								<do_else>
									<add_to_group groupname="$LocFacOneCivShips" object="event.param"/>
								</do_else>
							</actions>
						</cue>
						<cue name="DynamicWarTrackFacTwoNewShips" instantiate="true">
							<conditions>
								<event_job_ship_activated/>
								<check_value value="event.param.trueowner == $LocFacTwo"/>
								<check_value value="event.param.primarypurpose"/>
								<check_value value="event.param.isclass.[class.ship_xl,class.ship_l,class.ship_m,class.ship_s]"/>
								<check_value value="not @$StopDataGather"/>
							</conditions>
							<actions>
								<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.param.primarypurpose}">
									<add_to_group groupname="$LocFacTwoMilShips" object="event.param"/>
								</do_if>
								<do_else>
									<add_to_group groupname="$LocFacTwoCivShips" object="event.param"/>
								</do_else>
							</actions>
						</cue>
						<cue name="DynamicWarTrackFacOneLosses" instantiate="true">
							<conditions>
								<check_any>
									<event_object_destroyed group="$LocFacOneMilShips"/>
									<event_object_destroyed group="$LocFacOneCivShips"/>
									<event_object_destroyed group="$LocFacOneStations"/>
								</check_any>
								<check_value value="event.object.trueowner? and (event.object.trueowner == $LocFacOne)"/>
								<check_value value="event.param.trueowner? and (event.param.trueowner == $LocFacTwo)"/>
								<check_value value="event.object.isclass.[class.ship_xl,class.ship_l,class.ship_m,class.ship_s,class.station]"/>
								<check_value value="not @$StopDataGather"/>
							</conditions>
							<actions>
								<!-- event.object = killed, event.param = killer -->
								<!-- $LocFacData == [$LocFatigue,$LocWarScore,$MilKills,$CivKills,$StationKills,$MilXLKill,$MilLKill,$MilMKill,$MilSKill,$CivXLKill,$CivLKill,$CivMKill,$CivSKill,$TimeEnded] -->
								<do_if value="event.object.isclass.ship_xl">
									<!-- $LocFatigue -->
									<set_value name="$LocFacOneData.{1}" exact="4" operation="add"/>
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacOneData.{2}" exact="4" operation="subtract"/>
									<set_value name="$LocFacTwoData.{2}" exact="4" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacTwoData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{6}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacTwoData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{10}" exact="1" operation="add"/>
									</do_else>
								</do_if>
								<do_elseif value="event.object.isclass.ship_l">
									<!-- $LocFatigue -->
									<set_value name="$LocFacOneData.{1}" exact="3" operation="add"/>
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacOneData.{2}" exact="3" operation="subtract"/>
									<set_value name="$LocFacTwoData.{2}" exact="3" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacTwoData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{7}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacTwoData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{11}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.ship_m">
									<!-- $LocFatigue -->
									<set_value name="$LocFacOneData.{1}" exact="2" operation="add"/>
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacOneData.{2}" exact="2" operation="subtract"/>
									<set_value name="$LocFacTwoData.{2}" exact="2" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacTwoData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{8}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacTwoData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{12}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.ship_s">
									<!-- $LocFatigue -->
									<set_value name="$LocFacOneData.{1}" exact="1" operation="add"/>
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacOneData.{2}" exact="1" operation="subtract"/>
									<set_value name="$LocFacTwoData.{2}" exact="1" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacTwoData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{9}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacTwoData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacTwoData.{13}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.station">
									<!-- $LocFatigue -->
									<set_value name="$LocFacOneData.{1}" exact="5" operation="add"/>
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacOneData.{2}" exact="5" operation="subtract"/>
									<set_value name="$LocFacTwoData.{2}" exact="5" operation="add"/>
								</do_elseif>
								<do_if value="$OutputDebug">
									<debug_text text="'MOD: DW -- DynamicWarTrackFacOneLosses -- Update -- $LocFacOne: %s -- $LocFacTwo: %s -- $LocFatigue: %s/%s -- $LocWarScore: %s/%s'.[@$LocFacOne,@$LocFacTwo,$LocFacOneData.{1},$LocFacTwoData.{1},$LocFacOneData.{2},$LocFacTwoData.{2}]" context="true" filter="scripts"/>
								</do_if>
							</actions>
						</cue>
						<cue name="DynamicWarTrackFacTwoLosses" instantiate="true">
							<conditions>
								<check_any>
									<event_object_destroyed group="$LocFacTwoMilShips"/>
									<event_object_destroyed group="$LocFacTwoCivShips"/>
									<event_object_destroyed group="$LocFacTwoStations"/>
								</check_any>
								<check_value value="event.object.trueowner? and (event.object.trueowner == $LocFacTwo)"/>
								<check_value value="event.param.trueowner? and (event.param.trueowner == $LocFacOne)"/>
								<check_value value="event.object.isclass.[class.ship_xl,class.ship_l,class.ship_m,class.ship_s,class.station]"/>
								<check_value value="not @$StopDataGather"/>
							</conditions>
							<actions>
								<!-- event.object = killed, event.param = killer -->
								<!-- $LocFacData == [$LocFatigue,$LocWarScore,$MilKills,$CivKills,$StationKills,$MilXLKill,$MilLKill,$MilMKill,$MilSKill,$CivXLKill,$CivLKill,$CivMKill,$CivSKill,$TimeEnded] -->
								<do_if value="event.object.isclass.ship_xl">
									<!-- $LocFatigue -->
									<set_value name="$LocFacTwoData.{1}" exact="4" operation="add"/>
									<set_value name="$LocFacOneData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacTwoData.{2}" exact="4" operation="subtract"/>
									<set_value name="$LocFacOneData.{2}" exact="4" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacOneData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{6}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacOneData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{10}" exact="1" operation="add"/>
									</do_else>
								</do_if>
								<do_elseif value="event.object.isclass.ship_l">
									<!-- $LocFatigue -->
									<set_value name="$LocFacTwoData.{1}" exact="3" operation="add"/>
									<set_value name="$LocFacOneData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacTwoData.{2}" exact="3" operation="subtract"/>
									<set_value name="$LocFacOneData.{2}" exact="3" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacOneData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{7}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacOneData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{11}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.ship_m">
									<!-- $LocFatigue -->
									<set_value name="$LocFacTwoData.{1}" exact="2" operation="add"/>
									<set_value name="$LocFacOneData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacTwoData.{2}" exact="2" operation="subtract"/>
									<set_value name="$LocFacOneData.{2}" exact="2" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacOneData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{8}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacOneData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{12}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.ship_s">
									<!-- $LocFatigue -->
									<set_value name="$LocFacTwoData.{1}" exact="1" operation="add"/>
									<set_value name="$LocFacOneData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacTwoData.{2}" exact="1" operation="subtract"/>
									<set_value name="$LocFacOneData.{2}" exact="1" operation="add"/>
									<do_if value="[purpose.fight,purpose.auxiliary].indexof.{event.object.primarypurpose}">
										<set_value name="$LocFacOneData.{3}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{9}" exact="1" operation="add"/>
									</do_if>
									<do_else>
										<set_value name="$LocFacOneData.{4}" exact="1" operation="add"/>
										<set_value name="$LocFacOneData.{13}" exact="1" operation="add"/>
									</do_else>
								</do_elseif>
								<do_elseif value="event.object.isclass.station">
									<!-- $LocFatigue -->
									<set_value name="$LocFacTwoData.{1}" exact="5" operation="add"/>
									<set_value name="$LocFacOneData.{1}" exact="1" operation="subtract"/>
									<!-- $LocWarScore -->
									<set_value name="$LocFacTwoData.{2}" exact="5" operation="subtract"/>
									<set_value name="$LocFacOneData.{2}" exact="5" operation="add"/>
								</do_elseif>
								<do_if value="$OutputDebug">
									<debug_text text="'MOD: DW -- DynamicWarTrackFacTwoLosses -- Update -- $LocFacOne: %s -- $LocFacTwo: %s -- $LocFatigue: %s/%s -- $LocWarScore: %s/%s'.[@$LocFacOne,@$LocFacTwo,$LocFacOneData.{1},$LocFacTwoData.{1},$LocFacOneData.{2},$LocFacTwoData.{2}]" context="true" filter="scripts"/>
								</do_if>
							</actions>
						</cue>
						<cue name="DynamicWarTrackingUpdate" instantiate="false">
							<delay exact="300s"/>
							<actions>
								<set_value name="$OutputData" exact="false"/>
								<set_value name="$EndTheWar" exact="false"/>
								<set_value name="$CleanupData" exact="false"/>
								<set_value name="$SyncTime" exact="player.age"/>
								<!-- $DWT.{$LocFacOne}.{$LocFacTwo} == [$Time,$OldRel,$NewRel,$Fatigue,$WarScore,$EndNow(bool),$SilentQuit(bool)] -->
								<!-- $LocFacData == [$LocFatigue,$LocWarScore,$MilKills,$CivKills,$StationKills,$MilXLKill,$MilLKill,$MilMKill,$MilSKill,$CivXLKill,$CivLKill,$CivMKill,$CivSKill,$TimeEnded] -->
								<do_if value="(not $DWT.{$LocFacOne}.{$LocFacTwo}?) or (not $DWT.{$LocFacTwo}.{$LocFacOne}?)">
									<!-- Missing table -->
									<set_value name="$StopDataGather" exact="true"/>
									<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- ERROR:HANDLED -- Tracking cleaned up -- $LocFacOne: %s -- $LocFacTwo: %s -- $DWT.{$LocFacOne}.{$LocFacTwo}?: %s -- $DWT.{$LocFacTwo}.{$LocFacOne}?: %s'.[@$LocFacOne,@$LocFacTwo,$DWT.{$LocFacOne}.{$LocFacTwo}?,$DWT.{$LocFacTwo}.{$LocFacOne}?]" context="true" filter="error"/>
									<set_value name="$CleanupData" exact="true"/>
									<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}?">
										<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}?">
										<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}"/>
									</do_if>
								</do_if>
								<do_if value="$DWT.{$LocFacOne}.{$LocFacTwo}.{7} or $DWT.{$LocFacTwo}.{$LocFacOne}.{7}">
									<!-- $SilentQuit = clean up data and cancel -->
									<set_value name="$StopDataGather" exact="true"/>
									<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- ERROR:HANDLED -- Tracking cleaned up -- $LocFacOne: %s -- $LocFacTwo: %s -- $DWT.{$LocFacOne}.{$LocFacTwo}?: %s -- $DWT.{$LocFacTwo}.{$LocFacOne}?: %s'.[@$LocFacOne,@$LocFacTwo,$DWT.{$LocFacOne}.{$LocFacTwo}?,$DWT.{$LocFacTwo}.{$LocFacOne}?]" context="true" filter="error"/>
									<set_value name="$CleanupData" exact="true"/>
									<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}?">
										<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}?">
										<remove_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacTwo}.{$LocFacOne}.{$DWT.{$LocFacTwo}.{$LocFacOne}.{1}}"/>
									</do_if>
								</do_if>
								<do_elseif value="$DWT.{$LocFacOne}.{$LocFacTwo}.{6} or $DWT.{$LocFacTwo}.{$LocFacOne}.{6}">
									<!-- $EndNow = send data to tracking table for output and cancel -->
									<!-- War was ended by a different script -->
									<set_value name="$StopDataGather" exact="true"/>
									<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- War Ended Outputting Data -- $LocFacOne: %s -- $LocFacTwo: %s'.[@$LocFacOne,@$LocFacTwo]" context="true" filter="scripts"/>
									<set_value name="$OutputData" exact="true"/>
									<set_value name="$CleanupData" exact="true"/>
									<set_value name="$LocFacOneData.{13}" exact="$SyncTime"/>
									<set_value name="$LocFacTwoData.{13}" exact="$SyncTime"/>
								</do_elseif>
								<do_elseif value="(((player.age - $DWT.{$LocFacOne}.{$LocFacTwo}.{1}) gt 7200s) or ((player.age - $DWT.{$LocFacTwo}.{$LocFacOne}.{1}) gt 7200s)) and (($DWT.{$LocFacOne}.{$LocFacTwo}.{4} ge 100) or ($DWT.{$LocFacTwo}.{$LocFacOne}.{4} ge 100))">
									<!-- $Fatigue has reached 100+, end the war -->
									<set_value name="$StopDataGather" exact="true"/>
									<set_value name="$OutputData" exact="true"/>
									<set_value name="$EndTheWar" exact="true"/>
									<set_value name="$CleanupData" exact="true"/>
									<set_value name="$LocFacOneData.{13}" exact="$SyncTime"/>
									<set_value name="$LocFacTwoData.{13}" exact="$SyncTime"/>
								</do_elseif>
								<do_else>
									<set_value name="$OutputData" exact="true"/>
								</do_else>
								<do_if value="$OutputData">
									<!-- $DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$WarStart} == [$LocFacOneData.clone,$LocFacTwoData.clone] -->
									<!-- $DWT.{$LocFacOne}.{$LocFacTwo} == [$Time,$OldRel,$NewRel,$Fatigue,$WarScore,$EndNow(bool),$SilentQuit(bool)] -->
									<!-- $LocFacData == [$LocFatigue,$LocWarScore,$MilKills,$CivKills,$StationKills,$MilXLKill,$MilLKill,$MilMKill,$MilSKill,$CivXLKill,$CivLKill,$CivMKill,$CivSKill,$TimeEnded] -->
									<do_if value="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}?">
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}" exact="[$LocFacOneData.clone,$LocFacTwoData.clone]"/>
									</do_if>
									<do_elseif value="not $DADVT.$DADynamicWarResultsTable.{$LocFacOne}?">
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}" exact="table[]"/>
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}" exact="table[]"/>
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}" exact="[$LocFacOneData.clone,$LocFacTwoData.clone]"/>
									</do_elseif>
									<do_elseif value="not $DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}?">
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}" exact="table[]"/>
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}" exact="[$LocFacOneData.clone,$LocFacTwoData.clone]"/>
									</do_elseif>
									<do_elseif value="not $DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}?">
										<set_value name="$DADVT.$DADynamicWarResultsTable.{$LocFacOne}.{$LocFacTwo}.{$DWT.{$LocFacOne}.{$LocFacTwo}.{1}}" exact="[$LocFacOneData.clone,$LocFacTwoData.clone]"/>
									</do_elseif>
									<do_else>
										<!-- SHOULD NOT REACH HERE!!! -->
									</do_else>
									<do_if value="$OutputDebug">
										<set_value name="$LocString" exact="''"/>
										<do_all exact="$LocFacOneData.count" counter="$A">
											<set_value name="$LocString" exact="'%s,'.[$LocFacOneData.{$A}]" operation="add"/>
										</do_all>
										<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- Outputting Data -- $DADVT.$DADynamicWarResultsTable.{%s}.{%s}.{%s}: %s'.[@$LocFacOne,@$LocFacTwo,@$DWT.{$LocFacOne}.{$LocFacTwo}.{1},$LocString]" context="false" filter="scripts"/>
										<set_value name="$LocString" exact="''"/>
										<do_all exact="$LocFacTwoData.count" counter="$A">
											<set_value name="$LocString" exact="'%s,'.[$LocFacTwoData.{$A}]" operation="add"/>
										</do_all>
										<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- Outputting Data -- $DADVT.$DADynamicWarResultsTable.{%s}.{%s}.{%s}: %s'.[@$LocFacTwo,@$LocFacOne,@$DWT.{$LocFacTwo}.{$LocFacOne}.{1},$LocString]" context="false" filter="scripts"/>
										<remove_value name="$LocString"/>
									</do_if>
								</do_if>
								<do_if value="$EndTheWar">
									<set_value name="$LocTempRel" exact="$LocFacOne.relationto.{$LocFacTwo}"/>
									<do_if value="(not ($LocFacOne.relationto.{$LocFacTwo} lt $DWT.{$LocFacOne}.{$LocFacTwo}.{2})) or (not ($LocFacTwo.relationto.{$LocFacOne} lt $DWT.{$LocFacTwo}.{$LocFacOne}.{2})) or ($DWT.{$LocFacOne}.{$LocFacTwo}.{2} != $DWT.{$LocFacTwo}.{$LocFacOne}.{2})">
										<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- ERROR:HANDLED -- Mismatching relations -- $LocFacOne: %s -- $LocFacTwo: %s -- $LocFacOne.relationto.{$LocFacTwo}: %s -- $DWT.{$LocFacOne}.{$LocFacTwo}.{2}: %s'.[@$LocFacOne,@$LocFacTwo,$DWT.{$LocFacOne}.{$LocFacTwo}?,$DWT.{$LocFacTwo}.{$LocFacOne}?]" context="true" filter="error"/>
										<set_value name="$LocHighestRel" exact="[$DWT.{$LocFacOne}.{$LocFacTwo}.{2},$DWT.{$LocFacTwo}.{$LocFacOne}.{2},-0.032].max"/>
										<set_value name="$DWT.{$LocFacOne}.{$LocFacTwo}.{2}" exact="$LocHighestRel"/>
										<set_value name="$DWT.{$LocFacTwo}.{$LocFacOne}.{2}" exact="$LocHighestRel"/>
										<remove_value name="$LocHighestRel"/>
									</do_if>
									<do_if value="$LocFacOne.relationto.{$LocFacTwo} lt $DWT.{$LocFacOne}.{$LocFacTwo}.{2}">
										<set_faction_relation faction="$LocFacOne" otherfaction="$LocFacTwo" value="$DWT.{$LocFacOne}.{$LocFacTwo}.{2}"/>
									</do_if>
									<do_if value="$LocFacTwo.relationto.{$LocFacOne} lt $DWT.{$LocFacTwo}.{$LocFacOne}.{2}">
										<set_faction_relation faction="$LocFacTwo" otherfaction="$LocFacOne" value="$DWT.{$LocFacTwo}.{$LocFacOne}.{2}"/>
									</do_if>
									<do_if value="$OutputDebug">
										<debug_text text="'MOD: DW -- DynamicWarTrackingUpdate -- Ending War -- $LocFacOne: %s -- $LocFacTwo: %s -- OldRel: %s -- NewRel: %s'.[@$LocFacOne,@$LocFacTwo,@$LocTempRel,@$LocFacOne.relationto.{$LocFacTwo}]" context="false" filter="scripts"/>
									</do_if>
									<signal_cue_instantly cue="EventDynamicWarEventNotification" param="['Fatigue',$LocFacOne,$LocFacTwo,$LocTempRel,$LocFacOne.relationto.{$LocFacTwo}]"/>
									<remove_value name="$LocTempRel"/>
								</do_if>
								<do_if value="$CleanupData">
									<remove_value name="$DWT.{$LocFacOne}.{$LocFacTwo}"/>
									<remove_value name="$DWT.{$LocFacTwo}.{$LocFacOne}"/>
									<remove_value name="$LocFacOneData"/>
									<remove_value name="$LocFacTwoData"/>
									<remove_value name="$LocFacOneMilShips"/>
									<remove_value name="$LocFacOneCivShips"/>
									<remove_value name="$LocFacOneStations"/>
									<remove_value name="$LocFacTwoMilShips"/>
									<remove_value name="$LocFacTwoCivShips"/>
									<remove_value name="$LocFacTwoStations"/>
									<cancel_cue cue="EventDynamicWarTrackWar"/>
								</do_if>
								<do_if value="(not $StopDataGather) and (not $CleanupData)">
									<reset_cue cue="this"/>
								</do_if>
								<remove_value name="$OutputData"/>
								<remove_value name="$EndTheWar"/>
								<remove_value name="$CleanupData"/>
								<remove_value name="$SyncTime"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventDynamicWarEventNotification" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="(not $DADVT?) or ($DADVT == null)">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- param="[$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]" -->
						<set_value name="$LocEvent" exact="event.param.{1}"/>
						<set_value name="$LocFacOne" exact="event.param.{2}"/>
						<set_value name="$LocFacTwo" exact="event.param.{3}"/>
						<set_value name="$LocOldRel" exact="event.param.{4}"/>
						<set_value name="$LocNewRel" exact="event.param.{5}"/>
						<set_value name="$LocOldRelUI" exact="$LocFacOne.relation.{$LocOldRel}.uivalue"/>
						<set_value name="$LocNewRelUI" exact="$LocFacOne.relation.{$LocNewRel}.uivalue"/>
						<set_value name="$LocRelUIChange" exact="$LocNewRelUI - $LocOldRelUI"/>
						<set_value name="$LocLogReason" exact="null"/>
						<set_value name="$LocLogReport" exact="['','','']"/>
						<set_value name="$LocNotification" exact="['','','','']"/>
						<!-- 
							LOGBOOK
								Title = $LocLogReport.{1} // Faction = $LocLogReport.{2} // Text = $LocLogReport.{3}
								$LocLogReport.{1}	=	{DA Dynamic War} // DONE: Add t-file entry for dynamic war
								$LocLogReport.{2}	=	$LocFacOne.knownname + $LocFacTwo.knownname
								$LocLogReport.{3}	=	Reputation Gain/Loss: $LocRelUIChange \n
																Current Reputation: $LocNewRelUI \n
																Reason: $LocLogReason
							END LOGBOOK
						-->
						<!-- 
							NOTIFICATION // Max 4 Rows
								$LocNotification.{1}	=	{DA Dynamic War}
								$LocNotification.{2}	=	$LocFacOne.knownname + $LocFacTwo.knownname
								$LocNotification.{3}	=	Reputation Gain/Loss: $LocRelUIChange
								$LocNotification.{4}	=	Current Reputation: $LocNewRelUI
							END NOTIFICATION
						-->
						<!-- {1001,120}(:) // {1015,14}(Reputation gained) // {1015,15}(Reputation lost) // {1015,250}(Current reputation) // {1015,251}(Reason) -->
						<!-- {1} and {2} -->
						<set_value name="$LocLogReport.{1}" exact="{33232474,101}"/>
						<set_value name="$LocLogReport.{2}" exact="'%s &amp; %s'.[$LocFacOne.knownname,$LocFacTwo.knownname]"/>
						<set_value name="$LocNotification.{1}" exact="{33232474,101}"/>
						<set_value name="$LocNotification.{2}" exact="'%s &amp; %s'.[$LocFacOne.knownname,$LocFacTwo.knownname]"/>
						<!-- {3} -->
						<do_if value="$LocRelUIChange ge 0">
							<set_value name="$LocLogReport.{3}" exact="'%s: '.[{1015,14}]"/>
							<set_value name="$LocNotification.{3}" exact="'%s: '.[{1015,14}]"/>
						</do_if>
						<do_else>
							<set_value name="$LocLogReport.{3}" exact="'%s: '.[{1015,15}]"/>
							<set_value name="$LocNotification.{3}" exact="'%s: '.[{1015,15}]"/>
						</do_else>
						<set_value name="$LocLogReport.{3}" exact="$LocRelUIChange" operation="add"/>
						<set_value name="$LocNotification.{3}" exact="$LocRelUIChange" operation="add"/>
						<set_value name="$LocLogReport.{3}" exact="'\n%s: %s'.[{1015,250},$LocNewRelUI]" operation="add"/>
						<set_value name="$LocLogReport.{3}" exact="'\n%s: '.[{1015,251}]" operation="add"/>
						<!-- Log Reason Start -->
						<do_if value="$LocEvent != 'Fatigue'">
							<do_if value="not $DADVT.$DADynamicWarFlavorEnable">
								<set_value name="$LocLogReason" exact="$LocEvent"/>
							</do_if>
							<do_elseif value="$DADVT.$DADynamicWarFlavorEnable">
								<set_value name="$RepName" exact="'%s(%s)'.[$LocFacOne.knownname,{20208,10601}]" comment="FACTIONNAME Faction Representative"/>
								<do_if value="@$LocFacOne.representative">
									<set_value name="$RepName" exact="'%s(%s %s)'.[$LocFacOne.representative.knownname,$LocFacOne.shortname,{20208,10601}]"/>
								</do_if>
								<do_if value="$LocNewRel ge 0.1">
									<!-- Ally 20+ -->
									<do_any>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3110}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3111}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3112}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3113}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3114}]"/>
									</do_any>
								</do_if>
								<do_elseif value="$LocNewRel ge 0.01">
									<!-- Friendly 10 - 20 -->
									<do_any>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3120}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3121}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3122}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3123}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3124}]"/>
									</do_any>
								</do_elseif>
								<do_elseif value="$LocNewRel ge -0.01">
									<!-- Neutral -10 - 10 -->
									<do_if value="($LocEvent == 'SmallBoost') or ($LocEvent == 'BigBoost') or ($LocEvent == 'Besties')">
										<do_any>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3140}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3141}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3142}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3143}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3144}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3145}]"/>
										</do_any>
									</do_if>
									<do_elseif value="($LocEvent == 'SmallBlow') or ($LocEvent == 'BigBlow') or ($LocEvent == 'Nemesis')">
										<do_any>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3130}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3131}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3132}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3133}]"/>
											<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3134}]"/>
										</do_any>
									</do_elseif>
								</do_elseif>
								<do_elseif value="$LocNewRel gt -0.032">
									<!-- Negative -15 - -10 -->
									<do_any>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3150}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3151}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3152}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3153}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3154}]"/>
									</do_any>
								</do_elseif>
								<do_elseif value="$LocNewRel gt -0.1">
									<!-- Negative -20 - -15 -->
									<do_any>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3160}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3161}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3162}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3163}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3164}]"/>
									</do_any>
								</do_elseif>
								<do_else>
									<!-- Negative -30 - -20 -->
									<do_any>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3170}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3171}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3172}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3173}]"/>
										<set_value name="$LocLogReason" exact="'%s: %s'.[$RepName,{33232474,3174}]"/>
									</do_any>
								</do_else>
							</do_elseif>
							<remove_value name="$RepName"/>
						</do_if>
						<do_elseif value="$LocEvent == 'Fatigue'">
							<set_value name="$LocLogReason" exact="'%s'.[{33232474,2118}]" comment="War Fatigue"/>
						</do_elseif>
						<!-- Log Reason End -->
						<set_value name="$LocLogReport.{3}" exact="$LocLogReason" operation="add"/>
						<!-- {4} -->
						<set_value name="$LocNotification.{4}" exact="'%s: %s'.[{1015,250},$LocNewRelUI]"/>
						<!-- Output Notification -->
						<show_notification text="'%s: %s\n%s\n%s'.[$LocNotification.{1},$LocNotification.{2},$LocNotification.{3},$LocNotification.{4}]"/>
						<!-- Output Logbook Entry -->
						<write_to_logbook category="news" title="$LocLogReport.{1}" faction="$LocLogReport.{2}" text="$LocLogReport.{3}" highlighted="true"/>
						<do_if value="$DADVT.$DADynamicNewsEnable and $DADVT.$DADynamicNewsEnableNewsStorage">
							<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$LocNotification.{2},'%s ; %s'.[$LocNotification.{3},$LocNotification.{4}]]"/>
						</do_if>
						<remove_value name="$LocEvent"/>
						<remove_value name="$LocFacOne"/>
						<remove_value name="$LocFacTwo"/>
						<remove_value name="$LocOldRel"/>
						<remove_value name="$LocNewRel"/>
						<remove_value name="$LocOldRelUI"/>
						<remove_value name="$LocNewRelUI"/>
						<remove_value name="$LocRelUIChange"/>
						<remove_value name="$LocLogReason"/>
						<remove_value name="$LocLogReport"/>
						<remove_value name="$LocNotification"/>
					</actions>
				</cue>
				<!-- Dynamic War // Functional Libraries -->
				<library name="LibraryDynamicWarFindFactions">
					<actions>
						<!-- 20231215 Reworking this whole shit show -->
						<!-- 20231215 Set Variables // Gather lists // Update shared // Remove unwanted // Cleanup // End Result: $DADynamicWarClaimspaceList, $DADynamicWarExcludedList, updated $DADynamicWarLockedRelationFactions -->
						<!-- $DADVT.$DADynamicWarDisabledFactions is adjustable // $DADVT.$DADynamicWarPermaExcludedFactions is hard coded override // $DADynamicWarClaimspaceList and $DADynamicWarExcludedList are used in calculations -->
						<!-- Set Variables -->
						<set_value name="$DADynamicWarClaimspaceList" exact="[]"/>
						<set_value name="$DADynamicWarExcludedList" exact="[]"/>
						<set_value name="$DADynamicWarLocPeacefulList" exact="[]"/>
						<set_value name="$DADynamicWarLocVisitorList" exact="[]"/>
						<set_value name="$DADynamicWarLocUnprocessedList" exact="[]"/>
						<!-- Use: $DADVT.$DADynamicWarDisabledFactions -->
						<!-- Use: $DADVT.$DADynamicWarPermaExcludedFactions -->
						<get_factions_by_tag tag="tag.claimspace" result="$DADynamicWarClaimspaceList"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DADynamicWarLocPeacefulList"/>
						<get_factions_by_tag tag="tag.visitor" result="$DADynamicWarLocVisitorList"/>
						<!-- Print out an unprocessed list for debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'$DADynamicWarClaimspaceList Unprocessed:'"/>
							<do_all exact="$DADynamicWarClaimspaceList.count" counter="$Z">
								<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="$DADynamicWarLocClaimspaceListDebug + ' ' + $Z + ' ' + $DADynamicWarClaimspaceList.{$Z}.knownname + '--'"/>
							</do_all>
							<debug_text text="'MOD: DADynamicWar -- %s '.[$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="' '" output="false" append="true"/>
							<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
							<remove_value name="$Z"/>
						</do_if>
						<!-- Update locked relations or inactive factions // will not catch factions that do not claimspace -->
						<do_for_each name="$DADynamicWarLocFaction" in="$DADynamicWarClaimspaceList" reverse="true">
							<do_if value="$DADynamicWarLocFaction == null">
								<remove_from_list name="$DADynamicWarClaimspaceList" exact="$DADynamicWarLocFaction" multiple="true"/>
							</do_if>
							<do_else>
								<do_if value="($DADynamicWarLocFaction.isrelationlocked) and (not $DADynamicWarLockedRelationFactions.indexof.{$DADynamicWarLocFaction})">
									<append_to_list name="$DADynamicWarLockedRelationFactions" exact="$DADynamicWarLocFaction"/>
								</do_if>
								<do_elseif value="(not $DADynamicWarLocFaction.isrelationlocked) and ($DADynamicWarLockedRelationFactions.indexof.{$DADynamicWarLocFaction})">
									<remove_from_list name="$DADynamicWarLockedRelationFactions" exact="$DADynamicWarLocFaction" multiple="true"/>
								</do_elseif>
								<do_if value="(not $DADynamicWarLocFaction.isactive) and (not $DADynamicWarInactiveFactions.indexof.{$DADynamicWarLocFaction})">
									<append_to_list name="$DADynamicWarInactiveFactions" exact="$DADynamicWarLocFaction"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocFaction.isactive) and ($DADynamicWarInactiveFactions.indexof.{$DADynamicWarLocFaction})">
									<remove_from_list name="$DADynamicWarInactiveFactions" exact="$DADynamicWarLocFaction" multiple="true"/>
								</do_elseif>
							</do_else>
						</do_for_each>
						<!-- Remove excluded/locked/peaceful/visitor lists then check isactive // This does not affect menu options -->
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADVT.$DADynamicWarDisabledFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADVT.$DADynamicWarPermaExcludedFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLockedRelationFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarInactiveFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLocPeacefulList" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLocVisitorList" multiple="true"/>
						<!-- Removed disabled/permaexcluded/locked relations/inactive factions/peaceful/visitors -->
						<!-- If player decides to remove buccaneers from disabled list that is on them -->
						<!-- $DADynamicWarClaimspaceList should only contain valid factions -->
						<!-- Combine lists of unwanted for $DADynamicWarExcludedList -->
						<!-- Add into a temp, do_for_each on temp, add to $DADynamicWarExcludedList -->
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADVT.$DADynamicWarDisabledFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADVT.$DADynamicWarPermaExcludedFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLockedRelationFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarInactiveFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLocPeacefulList"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLocVisitorList"/>
						<do_for_each name="$DADynamicWarLocFaction" in="$DADynamicWarLocUnprocessedList">
							<do_if value="not $DADynamicWarExcludedList.indexof.{$DADynamicWarLocFaction}">
								<append_to_list name="$DADynamicWarExcludedList" exact="$DADynamicWarLocFaction"/>
							</do_if>
						</do_for_each>
						<!-- Remove unneeded lists -->
						<remove_value name="$DADynamicWarLocPeacefulList"/>
						<remove_value name="$DADynamicWarLocVisitorList"/>
						<remove_value name="$DADynamicWarLocUnprocessedList"/>
						<!-- $DADynamicWarClaimspaceList // $DADynamicWarExcludedList are usable in later portion of dynamic wars -->
						<!-- Print out a processed list for debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'$DADynamicWarClaimspaceList Processed:'"/>
							<do_all exact="$DADynamicWarClaimspaceList.count" counter="$Z">
								<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="$DADynamicWarLocClaimspaceListDebug + ' ' + $Z + ' ' + $DADynamicWarClaimspaceList.{$Z}.knownname + '--'"/>
							</do_all>
							<debug_text text="'MOD: DADynamicWar -- %s '.[$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="' '" output="false" append="true"/>
							<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
							<remove_value name="$Z"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateMilStrengthFactor">
					<actions>
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocWarEvent?">
							<!-- We need to calculate the first factions strength -->
							<!-- 20231215 Improving calulation to consider ship sizes -->
							<set_value name="$DADynamicWarLocEventFactionMilStrength" exact="0"/>
							<find_ship_by_true_owner name="$DADynamicWarLocEventFactionMilShips" space="player.galaxy" multiple="true" faction="$DADynamicWarLocEventFaction" masstraffic="false" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight"/>
							<do_for_each name="$DADynamicWarLocShip" in="$DADynamicWarLocEventFactionMilShips">
								<set_value name="$DADynamicWarLocEventFactionMilStrength" exact="$DADynamicWarLocShip.threatscore" operation="add"/>
							</do_for_each>
							<find_sector name="$DADynamicWarLocEventFactionSectors" space="player.galaxy" multiple="true" owner="$DADynamicWarLocEventFaction"/>
							<!-- begin forming debug message -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'MOD: DADynamicWar -- MilStrengthFactor Report'"/>
								<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'\n  Event Faction: %s -- ShipCount: %s -- MilStrength: %s -- SectorCount: %s'.[$DADynamicWarLocEventFaction,$DADynamicWarLocEventFactionMilShips.count,$DADynamicWarLocEventFactionMilStrength,$DADynamicWarLocEventFactionSectors.count]" operation="add"/>
							</do_if>
							<!-- 20231228 Reducing repeated code like a madman -->
							<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight Start, {4} = Weight End -->
							<do_for_each name="$DADynamicWarLocPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E">
								<set_value name="$DADynamicWarLocPossibleFactionMilStrength" exact="0"/>
								<find_ship_by_true_owner name="$DADynamicWarLocPossibleFactionMilShips" space="player.galaxy" multiple="true" faction="$DADynamicWarLocPossibleFaction" masstraffic="false" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight"/>
								<do_for_each name="$DADynamicWarLocShip" in="$DADynamicWarLocPossibleFactionMilShips">
									<set_value name="$DADynamicWarLocPossibleFactionMilStrength" exact="$DADynamicWarLocShip.threatscore" operation="add"/>
								</do_for_each>
								<find_sector name="$DADynamicWarLocPossibleFactionSectors" space="player.galaxy" multiple="true" owner="$DADynamicWarLocPossibleFaction"/>
								<do_if value="($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost')">
									<!-- If possible faction is weaker, they will have a higher chance -->
									<!-- Factions want to be friends with weaker -->
									<set_value name="$DADynamicWarLocMilComparisonValue" exact="($DADynamicWarLocEventFactionMilStrength)f / [($DADynamicWarLocPossibleFactionMilStrength)f,1.0].max"/>
									<set_value name="$DADynamicWarLocSectorComparisonValue" exact="($DADynamicWarLocEventFactionSectors.count)f / [($DADynamicWarLocPossibleFactionSectors.count)f,1.0].max"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis')">
									<!-- If possible faction is stronger, they will have a higher chance -->
									<!-- Factions want to be enemies with stronger -->
									<set_value name="$DADynamicWarLocMilComparisonValue" exact="($DADynamicWarLocPossibleFactionMilStrength)f / [($DADynamicWarLocEventFactionMilStrength)f,1.0].max"/>
									<set_value name="$DADynamicWarLocSectorComparisonValue" exact="($DADynamicWarLocPossibleFactionSectors.count)f / [($DADynamicWarLocEventFactionSectors.count)f,1.0].max"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocMilStrengthFinal" exact="[[($DADynamicWarLocMilComparisonValue * $DADynamicWarLocSectorComparisonValue)f,0.25].max,1.75].min"/>
								<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarLocPossibleFaction}.{1}" exact="$DADynamicWarLocMilStrengthFinal"/>
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'\n  %s: %s -- ShipCount: %s -- MilStrength: %s -- SectorCount: %s -- MilComparisonValue: %s -- SectorComparisonValue: %s -- MilStrengthFactor: %s'.[$E,$DADynamicWarLocPossibleFaction,$DADynamicWarLocPossibleFactionMilShips.count,$DADynamicWarLocPossibleFactionMilStrength,$DADynamicWarLocPossibleFactionSectors.count,$DADynamicWarLocMilComparisonValue,$DADynamicWarLocSectorComparisonValue,$DADynamicWarLocMilStrengthFinal]" operation="add"/>
								</do_if>
								<remove_value name="$DADynamicWarLocPossibleFactionMilShips"/>
								<remove_value name="$DADynamicWarLocPossibleFactionSectors"/>
								<remove_value name="$DADynamicWarLocPossibleFactionMilStrength"/>
								<remove_value name="$DADynamicWarLocMilComparisonValue"/>
								<remove_value name="$DADynamicWarLocSectorComparisonValue"/>
								<remove_value name="$DADynamicWarLocMilStrengthFinal"/>
							</do_for_each>
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'%s'.[$DADynamicWarLocMilStrengthDebug]" context="false" filter="scripts"/>
								<debug_to_file name="'LibraryDynamicWarCalculateMilStrengthFactor'" directory="'DynamicWar'" text="$DADynamicWarLocMilStrengthDebug" output="false" append="true"/>
							</do_if>
							<!-- Clean up -->
							<remove_value name="$DADynamicWarLocEventFactionMilShips"/>
							<remove_value name="$DADynamicWarLocEventFactionSectors"/>
							<remove_value name="$DADynamicWarLocEventFactionMilStrength"/>
							<remove_value name="$DADynamicWarLocMilStrengthDebug"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateMisc">
					<actions>
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocWarEvent?">
							<!-- 20231215 Reduced repeated code // added factor to shared table for options menu -->
							<!-- The following are min: 1.0 - $Factor // max: 1.0 + $Factor -->
							<set_value name="$DADynamicWarLocPrimaryRaceMinModifier" exact="1.0 - $DADVT.$DADynamicWarPrimaryRaceModifier"/>
							<set_value name="$DADynamicWarLocPrimaryRaceMaxModifier" exact="1.0 + $DADVT.$DADynamicWarPrimaryRaceModifier"/>
							<set_value name="$DADynamicWarLocCurrentRelationsMinFactor" exact="1.0 - $DADVT.$DADynamicWarCurrentRelationsModifier"/>
							<set_value name="$DADynamicWarLocCurrentRelationsMaxFactor" exact="1.0 + $DADVT.$DADynamicWarCurrentRelationsModifier"/>
							<set_value name="$DADynamicWarLocCollectiveRelationsMinModifier" exact="1.0 - $DADVT.$DADynamicWarCollectiveRelationsModifier"/>
							<set_value name="$DADynamicWarLocCollectiveRelationsMaxModifier" exact="1.0 + $DADVT.$DADynamicWarCollectiveRelationsModifier"/>
							<!-- begin forming debug message -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<set_value name="$DADynamicWarLocMiscDebug" exact="'MOD: DADynamicWar -- MiscFactor Report'"/>
							</do_if>
							<!-- 20231215 Enough cleanup for now -->
							<!-- 20231228 Reducing repeated code like a madman // not as pretty as MilStrengthFactor -->
							<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight Start, {4} = Weight End -->
							<do_for_each name="$DADynamicWarLocPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E">
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="1.0"/>
								<!-- Compare .primaryrace -->
								<set_value name="$DADynamicWarLocRaceValue" exact="1.0" comment="1 means no change"/>
								<do_if value="($DADynamicWarLocEventFaction.primaryrace == $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMaxModifier"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace != $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMinModifier"/>
								</do_elseif>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace != $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMaxModifier"/>
								</do_elseif>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace == $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMinModifier"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocRaceValue"/>
								<!-- Compare current relations -->
								<set_value name="$DADynamicWarLocRelationValue" exact="1.0" comment="1 means no change"/>
								<do_if value="($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost')">
									<set_value name="$DADynamicWarLocRelationValue" exact="[[($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} + 1.0), $DADynamicWarLocCurrentRelationsMinFactor].max,$DADynamicWarLocCurrentRelationsMaxFactor].min"/>
									<!-- Reduce chance of selecting faction when no change actually occurs -->
									<do_if value="($DADVT.$DADynamicWarRelationsFixEnable) and ($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} ge $DADVT.$DADynamicWarRelationsAILimit)">
										<set_value name="$DADynamicWarLocRelationValue" exact="0.05"/>
									</do_if>
								</do_if>
								<do_elseif value="($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis')">
									<set_value name="$DADynamicWarLocRelationValue" exact="[[(-1.0 * $DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} + 1.0), $DADynamicWarLocCurrentRelationsMinFactor].max,$DADynamicWarLocCurrentRelationsMaxFactor].min"/>
									<!-- Reduce chance of selecting faction when no change actually occurs -->
									<do_if value="($DADVT.$DADynamicWarRelationsFixEnable) and ($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} le -1.0)">
										<set_value name="$DADynamicWarLocRelationValue" exact="0.05"/>
									</do_if>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocRelationValue"/>
								<!-- Compare friends and enemies -->
								<!-- Ints are fine for common friends enemies -->
								<set_value name="$DADynamicWarLocCommonEnemies" exact="0"/>
								<set_value name="$DADynamicWarLocCommonFriends" exact="0"/>
								<!-- Only count close friends and actual enemies -->
								<get_factions_by_relation relation="killmilitary" faction="$DADynamicWarLocEventFaction" result="$DADynamicWarLocEventFactionEnemiesList"/>
								<get_factions_by_relation relation="killmilitary" faction="$DADynamicWarLocPossibleFaction" result="$DADynamicWarLocPossibleFactionEnemiesList"/>
								<get_factions_by_relation relation="member" faction="$DADynamicWarLocEventFaction" result="$DADynamicWarLocEventFactionFriendsList"/>
								<get_factions_by_relation relation="member" faction="$DADynamicWarLocPossibleFaction" result="$DADynamicWarLocPossibleFactionFriendsList"/>
								<!-- Remove $DADynamicWarExcludedList because if they aren't subject to this mod, they don't matter -->
								<!-- $DADynamicWarExcludedList includes perma excluded, user selected excluded, visitor, non claimspace, inactive factions, and locked relation factions -->
								<remove_from_list name="$DADynamicWarLocEventFactionEnemiesList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocPossibleFactionEnemiesList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocEventFactionFriendsList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocPossibleFactionFriendsList" list="$DADynamicWarExcludedList" multiple="true"/>
								<!-- count common enemies factor-->
								<do_for_each name="$DADynamicWarLocEnemyFaction" in="$DADynamicWarLocEventFactionEnemiesList">
									<do_if value="$DADynamicWarLocPossibleFactionEnemiesList.indexof.{$DADynamicWarLocEnemyFaction}">
										<set_value name="$DADynamicWarLocCommonEnemies" exact="1" operation="add"/>
									</do_if>
									<do_if value="$DADynamicWarLocPossibleFactionFriendsList.indexof.{$DADynamicWarLocEnemyFaction}">
										<set_value name="$DADynamicWarLocCommonEnemies" exact="1" operation="subtract"/>
									</do_if>
								</do_for_each>
								<!-- count common friends factor-->
								<do_for_each name="$DADynamicWarLocFriendFaction" in="$DADynamicWarLocEventFactionFriendsList">
									<do_if value="$DADynamicWarLocPossibleFactionFriendsList.indexof.{$DADynamicWarLocFriendFaction}">
										<set_value name="$DADynamicWarLocCommonFriends" exact="1" operation="add"/>
									</do_if>
									<do_if value="$DADynamicWarLocPossibleFactionEnemiesList.indexof.{$DADynamicWarLocFriendFaction}">
										<set_value name="$DADynamicWarLocCommonFriends" exact="1" operation="subtract"/>
									</do_if>
								</do_for_each>
								<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								<do_if value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) gt 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
								</do_if>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) == 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) lt 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMinModifier"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) gt 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMinModifier"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) == 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) lt 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocCollectiveRelationValue"/>
								<!-- Final value section -->
								<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarLocPossibleFaction}.{2}" exact="$DADynamicWarLocPossibleFactionMiscModifier"/>
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocMiscDebug" exact="'\n  %s: %s -- RaceValue: %s -- RelationValue: %s -- CommonEnemies: %s -- CommonFriends: %s -- CollectiveRelationValue: %s -- MiscModifier: %s'.[$E,$DADynamicWarLocPossibleFaction,$DADynamicWarLocRaceValue,$DADynamicWarLocRelationValue,$DADynamicWarLocCommonEnemies,$DADynamicWarLocCommonFriends,$DADynamicWarLocCollectiveRelationValue,$DADynamicWarLocPossibleFactionMiscModifier]" operation="add"/>
								</do_if>
								<remove_value name="$DADynamicWarLocPossibleFactionMiscModifier"/>
								<remove_value name="$DADynamicWarLocRaceValue"/>
								<remove_value name="$DADynamicWarLocRelationValue"/>
								<remove_value name="$DADynamicWarLocCommonEnemies"/>
								<remove_value name="$DADynamicWarLocCommonFriends"/>
								<remove_value name="$DADynamicWarLocCollectiveRelationValue"/>
							</do_for_each>
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'%s'.[$DADynamicWarLocMiscDebug]" context="false" filter="scripts"/>
								<debug_to_file name="'LibraryDynamicWarCalculateMisc'" directory="'DynamicWar'" text="$DADynamicWarLocMiscDebug" output="false" append="true"/>
							</do_if>
							<!-- Cleanup -->
							<remove_value name="$DADynamicWarLocPrimaryRaceMinModifier"/>
							<remove_value name="$DADynamicWarLocPrimaryRaceMaxModifier"/>
							<remove_value name="$DADynamicWarLocCurrentRelationsMinFactor"/>
							<remove_value name="$DADynamicWarLocCurrentRelationsMaxFactor"/>
							<remove_value name="$DADynamicWarLocCollectiveRelationsMinModifier"/>
							<remove_value name="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
							<remove_value name="$DADynamicWarLocMiscDebug"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarUpdateChance">
					<actions>
						<!-- use $DADynamicWarClaimspaceListFull from above -->
						<!-- update chance only after factions have been selected -->
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocEventFactionTwo?">
							<do_all exact="$DADynamicWarClaimspaceListFull.count" counter="$M">
								<!-- If faction was selected, they will have their chance lowered by 9 with a minimum of 1 -->
								<!-- 20231227 Reducing impact of accumulated chance value to 1-10 // Start value is 4 -->
								<do_if value="($DADynamicWarClaimspaceListFull.{$M} == $DADynamicWarLocEventFaction) or ($DADynamicWarClaimspaceListFull.{$M} == $DADynamicWarLocEventFactionTwo)">
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}?">
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="[$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}} - 9, 1].max"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="1"/>
									</do_else>
								</do_if>
								<!-- If faction wasn't selected, they will have their chance increased by 1 up to a max of 10 -->
								<do_else>
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}?">
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="[$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}} + 1, 10].min"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="5"/>
									</do_else>
								</do_else>
							</do_all>
						</do_if>
						<!-- Nothing is expected back, this is only for updating the accumlating chance -->
					</actions>
				</library>
				<library name="LibraryDynamicWarEventExecute">
					<actions>
						<set_value name="$DADynamicWarFactionOne" exact="$DADynamicWarLocEventFaction"/>
						<set_value name="$DADynamicWarFactionTwo" exact="$DADynamicWarLocEventFactionTwo"/>
						<set_value name="$DADynamicWarOldRelation" exact="$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}"/>
						<do_if value="$DADynamicWarLocWarEvent == 'BigBoost' or $DADynamicWarLocWarEvent == 'SmallBoost' or $DADynamicWarLocWarEvent == 'SmallBlow' or $DADynamicWarLocWarEvent == 'BigBlow'">
							<do_if value="$DADynamicWarLocWarEvent == 'BigBoost'">
								<set_value name="$DADynamicWarUIRelationChange" exact="15"/>
							</do_if>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBoost'">
								<set_value name="$DADynamicWarUIRelationChange" exact="5"/>
							</do_elseif>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBlow'">
								<set_value name="$DADynamicWarUIRelationChange" exact="-5"/>
							</do_elseif>
							<do_elseif value="$DADynamicWarLocWarEvent == 'BigBlow'">
								<set_value name="$DADynamicWarUIRelationChange" exact="-15"/>
							</do_elseif>
							<!-- Requires $DADynamicWarFactionOne, $DADynamicWarFactionTwo, and $DADynamicWarUIRelationChange -->
							<!-- Returns [$DADynamicWarNewAbsoluteRepValue,$DADynamicWarAbsoluteRepValueChange] -->
							<run_actions ref="LibraryDynamicWarCalculateUiValueRepChange" result="$LocUpdatedValues">
								<param name="LocFacOne" value="$DADynamicWarFactionOne"/>
								<param name="LocFacTwo" value="$DADynamicWarFactionTwo"/>
								<param name="LocRelUIChange" value="$DADynamicWarUIRelationChange"/>
							</run_actions>
							<set_value name="$DADynamicWarNewAbsoluteRepValue" exact="$LocUpdatedValues.{1}"/>
							<set_value name="$DADynamicWarAbsoluteRepValueChange" exact="$LocUpdatedValues.{2}"/>
							<remove_value name="$LocUpdatedValues"/>
							<!-- 20231227 Changing to use $DADynamicWarNewAbsoluteRepValue -->
							<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="$DADynamicWarNewAbsoluteRepValue"/>
						</do_if>
						<do_elseif value="$DADynamicWarLocWarEvent == 'Nemesis'">
							<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="-1.0"/>
						</do_elseif>
						<do_elseif value="$DADynamicWarLocWarEvent == 'Besties'">
							<!-- 20240309 Check if relation fix is enabled -->
							<do_if value="$DADVT.$DADynamicWarRelationsFixEnable">
								<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="$DADVT.$DADynamicWarRelationsAILimit"/>
							</do_if>
							<do_else>
								<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="1.0"/>
							</do_else>
						</do_elseif>
						<do_else>
							<!-- This should never be reached -->
							<debug_text text="'MOD: DADynamicWar -- Unhandled error in LibraryDynamicWarEventExecute.'" context="true" filter="error"/>
						</do_else>
						<!-- 20231227 Ensure factions have the same relation -->
						<set_value name="$DADynamicWarNewRelation" exact="$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}"/>
						<set_faction_relation faction="$DADynamicWarFactionTwo" otherfaction="$DADynamicWarFactionOne" value="$DADynamicWarNewRelation"/>
						<!-- Debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<do_if value="$DADynamicWarNewAbsoluteRepValue?">
								<debug_text text="'MOD: DADynamicWar -- Executed Relation Change -- $DADynamicWarLocWarEvent: %s -- $DADynamicWarFactionOne: %s -- $DADynamicWarFactionTwo: %s \n  Old Relation: %s -- $DADynamicWarNewRelation: %s -- $DADynamicWarNewAbsoluteRepValue: %s -- Old + $DADynamicWarAbsoluteRepValueChange: %s'.[$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation,$DADynamicWarNewAbsoluteRepValue,$DADynamicWarOldRelation + $DADynamicWarAbsoluteRepValueChange]" context="false" filter="scripts"/>
							</do_if>
							<debug_to_file name="'LibraryDynamicWarEventExecute'" directory="'DynamicWar'" text="'%s -- Event: %s -- %s and %s -- Relation Before: %s -- Relation After: %s'.[player.age,$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]" output="false" append="true"/>
						</do_if>
						<do_if value="(@$DADynamicWarOldRelation gt -0.1) and (@$DADynamicWarNewRelation le -0.1)">
							<!-- 20241019 Event Tracking -->
							<!-- $DADynamicWarFactionOne, $DADynamicWarFactionTwo, $DADynamicWarOldRelation, and $DADynamicWarNewRelation -->
							<signal_cue_instantly cue="EventDynamicWarTrackEvent" param="[$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]"/>
						</do_if>
						<do_elseif value="(@$DADynamicWarOldRelation le -0.1) and (@$DADynamicWarNewRelation gt -0.1)">
							<do_if value="$DWT.{$DADynamicWarFactionOne}.{$DADynamicWarFactionTwo}?">
								<set_value name="$DWT.{$DADynamicWarFactionOne}.{$DADynamicWarFactionTwo}.{6}" exact="true"/>
							</do_if>
							<do_if value="$DWT.{$DADynamicWarFactionTwo}.{$DADynamicWarFactionOne}?">
								<set_value name="$DWT.{$DADynamicWarFactionOne}.{$DADynamicWarFactionTwo}.{6}" exact="true"/>
							</do_if>
						</do_elseif>
						<!-- Relation is set, now for notification -->
						<!-- 20241021 Changing Event Notification to a cue -->
						<!-- We use $DADynamicWarLocWarEvent, $DADynamicWarFactionOne, $DADynamicWarFactionTwo, $DADynamicWarOldRelation, and $DADynamicWarNewRelation -->
						<signal_cue_instantly cue="EventDynamicWarEventNotification" param="[$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]"/>
						<!-- 20231219 Cleanup moved into cue where var is set -->
						<remove_value name="$DADynamicWarFactionOne"/>
						<remove_value name="$DADynamicWarFactionTwo"/>
						<remove_value name="$DADynamicWarOldRelation"/>
						<remove_value name="$DADynamicWarNewRelation"/>
						<remove_value name="$DADynamicWarUIRelationChange"/>
						<remove_value name="$DADynamicWarNewAbsoluteRepValue"/>
						<remove_value name="$DADynamicWarAbsoluteRepValueChange"/>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateUiValueRepChange" purpose="run_actions">
					<params>
						<param name="LocFacOne" value="$DADynamicWarFactionOne"/>
						<param name="LocFacTwo" value="$DADynamicWarFactionTwo"/>
						<param name="LocRelUIChange" value="$DADynamicWarUIRelationChange"/>
					</params>
					<actions>
						<do_if value="(not $DADVT?) or ($DADVT == null)">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Vanilla	1.0 = 30		0.32 = 25		0.1 = 20		0.032 = 15		0.01 = 10		0.0032 = 5 -->
						<!-- Calculated	1.0 = 30		0.316 = 25		0.1 = 20		0.0316 = 15		0.01 = 10		0.00316 = 5 -->
						<!-- Requires $DADynamicWarFactionOne, $DADynamicWarFactionTwo, and $DADynamicWarUIRelationChange -->
						<!-- Returns $LocNewRelAbs and $LocRelAbsChange -->
						<!-- 20231215 Added in shortcut if new ui value is a declared number in the charts and removed rounding -->
						<!-- DONE: I never accounted for relations ranges making it here that are outside of the range allowed in game -->
						<do_if value="$LocRelUIChange != 0">
							<set_value name="$LocOldRelUI" exact="$LocFacOne.relation.{$LocFacOne.relationto.{$LocFacTwo}}.uivalue"/>
							<set_value name="$LocOldRelAbs" exact="$LocFacOne.relationto.{$LocFacTwo}"/>
							<set_value name="$LocNewRelUI" exact="[[$LocOldRelUI + $LocRelUIChange,-30].max,30].min"/>
							<set_value name="$LocDefinedRelUIList" exact="[30,25,20,15,10,5,0,-5,-10,-15,-20,-25,-30]"/>
							<set_value name="$LocDefinedRelAbsList" exact="[1.0,0.32,0.1,0.032,0.01,0.0032,0,-0.0032,-0.01,-0.032,-0.1,-0.32,-1.0]"/>
							<do_if value="$LocDefinedRelUIList.indexof.{$LocNewRelUI}">
								<set_value name="$LocIndex" exact="$LocDefinedRelUIList.indexof.{$LocNewRelUI}"/>
								<set_value name="$LocNewRelAbs" exact="$LocDefinedRelAbsList.{$LocIndex}"/>
								<set_value name="$LocRelAbsChange" exact="$LocNewRelAbs - $LocOldRelAbs"/>
								<remove_value name="$LocIndex"/>
							</do_if>
							<do_else>
								<do_if value="($LocNewRelUI le 5) and ($LocNewRelUI ge -5)">
									<set_value name="$LocNewRelAbs" exact="$LocNewRelUI * 0.00064"/>
								</do_if>
								<do_else>
									<!-- =(10^(SQRT((S2+T2)^2)/10)/1000)*IF(S2+T2<0,-1,1) -->
									<set_value name="$LocNewRelAbs" exact="[[(10.0^(sqrt(($LocNewRelUI)LF ^ 2.0)/10.0) / 1000.0) * (if ($LocNewRelUI lt 0.0) then -1.0 else 1.0),-1.0].max,1.0].min"/>
								</do_else>
								<!-- 20231227 Added a check to prevent faction relation from raising above AI:AI limit // changing hard coded limit to a variable in case I decide to make it an option -->
								<!-- 20240309 Check if relation fix option enabled -->
								<do_if value="$DADVT.$DADynamicWarRelationsFixEnable and ($LocNewRelAbs gt $DADVT.$DADynamicWarRelationsAILimit) and ($LocFacOne != faction.player) and ($LocFacTwo != faction.player)">
									<set_value name="$LocNewRelAbs" exact="$DADVT.$DADynamicWarRelationsAILimit"/>
								</do_if>
								<set_value name="$LocRelAbsChange" exact="$LocNewRelAbs - $LocOldRelAbs"/>
							</do_else>
							<remove_value name="$LocOldRelUI"/>
							<remove_value name="$LocOldRelAbs"/>
							<remove_value name="$LocNewRelUI"/>
							<remove_value name="$LocDefinedRelUIList"/>
							<remove_value name="$LocDefinedRelAbsList"/>
						</do_if>
						<return value="[$LocNewRelAbs,$LocRelAbsChange]"/>
					</actions>
				</library>
				<!-- Dynamic War // Variable Check Libraries -->
				<library name="LibraryCheckDynamicWarVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="(not $DADVT.$DADynamicWarEnable?) or (not ((typeof $DADVT.$DADynamicWarEnable == datatype.integer) and (($DADVT.$DADynamicWarEnable == 1) or ($DADVT.$DADynamicWarEnable == 0))))">
							<set_value name="$DADVT.$DADynamicWarEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarFavorsEnable?) or (not ((typeof $DADVT.$DADynamicWarFavorsEnable == datatype.integer) and (($DADVT.$DADynamicWarFavorsEnable == 1) or ($DADVT.$DADynamicWarFavorsEnable == 0))))">
							<set_value name="$DADVT.$DADynamicWarFavorsEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarDisabledFactions?) or ($DADVT.$DADynamicWarDisabledFactions == null)">
							<set_value name="$DADVT.$DADynamicWarDisabledFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
							<do_if value="faction.boron?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.boron"/>
							</do_if>
							<do_if value="faction.loanshark?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.loanshark"/>
							</do_if>
							<do_if value="faction.scavenger?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.scavenger"/>
							</do_if>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarPermaExcludedFactions?) or ($DADVT.$DADynamicWarPermaExcludedFactions == null)">
							<set_value name="$DADVT.$DADynamicWarPermaExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarFactionChanceTable?) or ($DADVT.$DADynamicWarFactionChanceTable == null)">
							<set_value name="$DADVT.$DADynamicWarFactionChanceTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADynamicWarLockedRelationFactions?) or ($DADynamicWarLockedRelationFactions == null)">
							<create_list name="$DADynamicWarLockedRelationFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADynamicWarInactiveFactions?) or ($DADynamicWarInactiveFactions == null)">
							<create_list name="$DADynamicWarInactiveFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarEventWeights?) or ($DADVT.$DADynamicWarEventWeights == null)">
							<set_value name="$DADVT.$DADynamicWarEventWeights" exact="[1,16,32,32,16,1,0]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarInterval?) or (not ($DADVT.$DADynamicWarInterval gt 0))">
							<set_value name="$DADVT.$DADynamicWarInterval" exact="30"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADynamicWarLastEventTime?) or (not (typeof $DADynamicWarLastEventTime == datatype.time))">
							<set_value name="$DADynamicWarLastEventTime" exact="0s"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarFavors?) or ($DADVT.$DADynamicWarFavors == null)">
							<set_value name="$DADVT.$DADynamicWarFavors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarDetailedDebug?) or (not ((typeof $DADVT.$DADynamicWarDetailedDebug == datatype.integer) and (($DADVT.$DADynamicWarDetailedDebug == 1) or ($DADVT.$DADynamicWarDetailedDebug == 0))))">
							<set_value name="$DADVT.$DADynamicWarDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarPrimaryRaceModifier?) or (not ($DADVT.$DADynamicWarPrimaryRaceModifier gt 0.0))">
							<set_value name="$DADVT.$DADynamicWarPrimaryRaceModifier" exact="0.25"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarCurrentRelationsModifier?) or (not ($DADVT.$DADynamicWarCurrentRelationsModifier gt 0.0))">
							<set_value name="$DADVT.$DADynamicWarCurrentRelationsModifier" exact="0.5"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarCollectiveRelationsModifier?) or (not ($DADVT.$DADynamicWarCollectiveRelationsModifier gt 0.0))">
							<set_value name="$DADVT.$DADynamicWarCollectiveRelationsModifier" exact="0.25"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarFlavorEnable?) or (not ((typeof $DADVT.$DADynamicWarFlavorEnable == datatype.integer) and (($DADVT.$DADynamicWarFlavorEnable == 1) or ($DADVT.$DADynamicWarFlavorEnable == 0))))">
							<set_value name="$DADVT.$DADynamicWarFlavorEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarRelationsFixEnable?) or (not ((typeof $DADVT.$DADynamicWarRelationsFixEnable == datatype.integer) and (($DADVT.$DADynamicWarRelationsFixEnable == 1) or ($DADVT.$DADynamicWarRelationsFixEnable == 0))))">
							<set_value name="$DADVT.$DADynamicWarRelationsFixEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarRelationsAILimit?) or (not ($DADVT.$DADynamicWarRelationsAILimit gt 0.0))">
							<set_value name="$DADVT.$DADynamicWarRelationsAILimit" exact="0.32"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarPossibleFactionsPerEvent?) or (not ($DADVT.$DADynamicWarPossibleFactionsPerEvent gt 0))">
							<set_value name="$DADVT.$DADynamicWarPossibleFactionsPerEvent" exact="4"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarStatTracking?) or (not ((typeof $DADVT.$DADynamicWarStatTracking == datatype.integer) and (($DADVT.$DADynamicWarStatTracking == 1) or ($DADVT.$DADynamicWarStatTracking == 0))))">
							<set_value name="$DADVT.$DADynamicWarStatTracking" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarFatigue?) or (not ((typeof $DADVT.$DADynamicWarFatigue == datatype.integer) and (($DADVT.$DADynamicWarFatigue == 1) or ($DADVT.$DADynamicWarFatigue == 0))))">
							<set_value name="$DADVT.$DADynamicWarFatigue" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not md.$DynamicWarTable?) or (md.$DynamicWarTable == null)">
							<set_value name="md.$DynamicWarTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DWT?) or ($DWT == null)">
							<set_value name="$DWT" exact="md.$DynamicWarTable"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DADVT.$DADynamicWarResultsTable?) or ($DADVT.$DADynamicWarResultsTable == null)">
							<set_value name="$DADVT.$DADynamicWarResultsTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DADynamicWar -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Dynamic News // Timer Cues -->
				<cue name="TimerDynamicNewsOutput" instantiate="true" checkinterval="5min" checktime="5min">
					<conditions>
						<check_value value="$DADNT.$DADynamicNewsQueuedReports.keys.count" min="1"/>
						<check_value value="player.age ge ($DADNT.$DADynamicNewsLastReportTime + ($DADVT.$DADynamicNewsInterval)min)"/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
					</conditions>
					<actions>
						<set_value name="$DADNT.$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
						<do_if value="$DADVT.$DADynamicNewsDetailedDebug">
							<debug_text text="'MOD: DADynamicNews -- Starting news processing for %s factions'.[$DADNT.$DADynamicNewsQueuedReports.keys.count]" context="false" filter="scripts"/>
						</do_if>
						<set_value name="$DANewsLocDelay" min="10s" max="20s"/>
						<!-- 20241007 Rework -->
						<set_value name="$DANewsLocFactions" exact="$DADNT.$DADynamicNewsQueuedReports.keys.list"/>
						<do_for_each name="$DANewsLocFaction" in="$DANewsLocFactions">
							<set_value name="$DANewsLocQueuedNews" exact="[]"/>
							<append_list_elements name="$DANewsLocQueuedNews" other="$DADNT.$DADynamicNewsQueuedReports.{$DANewsLocFaction}"/>
							<do_if value="($DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage) and $DANewsLocQueuedNews.count">
								<!-- 20241007 Send the current news data to cue -->
								<set_value name="$DANewsLocDelay" min="10s" max="20s" operation="add"/>
								<signal_cue_instantly cue="EventDynamicNewsOutput" param="[$DANewsLocFaction,$DANewsLocDelay,$DANewsLocQueuedNews]"/>
								<remove_value name="$DADNT.$DADynamicNewsQueuedReports.{$DANewsLocFaction}"/>
							</do_if>
							<do_else>
								<remove_value name="$DADNT.$DADynamicNewsQueuedReports.{$DANewsLocFaction}"/>
							</do_else>
							<remove_value name="$DANewsLocQueuedNews"/>
						</do_for_each>
						<set_value name="$DADNT.$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
						<remove_value name="$DANewsLocDelay"/>
						<remove_value name="$DANewsLocFactions"/>
					</actions>
				</cue>
				<!-- Dynamic News // Update on load cues -->
				<cue name="UpdateOnLoadDynamicNewsRefresh" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_any>
							<check_value value="not $UpdateOnLoadDynamicNewsRefreshTimer?"/>
							<check_value value="$UpdateOnLoadDynamicNewsRefreshTimer? and (player.age gt $UpdateOnLoadDynamicNewsRefreshTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadDynamicNewsRefreshTimer" exact="player.age + 5s"/>
						<signal_cue_instantly cue="EventDynamicNewsFindSectorsandStations"/>
					</actions>
				</cue>
				<!-- Dynamic News // Event cues -->
				<cue name="EventDynamicNewsFindSectorsandStations" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<find_sector groupname="$DADNT.$DADynamicNewsAllSectors" multiple="true"/>
						<find_station groupname="$DADNT.$DADynamicNewsStations" multiple="true">
							<match_any>
								<match shipyard="true"/>
								<match wharf="true"/>
								<match tradestation="true"/>
								<match equipmentdock="true"/>
								<match defencestation="true"/>
								<match factionheadquarters="true"/>
							</match_any>
						</find_station>
					</actions>
				</cue>
				<cue name="EventDynamicNewsGroupEvents">
					<actions>
						<do_if value="not $DADNT? or ($DADNT == null)">
							<include_actions ref="LibraryCheckDynamicNewsVariables"/>
						</do_if>
					</actions>
					<cues>
						<cue name="EventDynamicNewsSectorChangedOwnerV2" instantiate="true" namespace="this">
							<conditions>
								<event_object_changed_owner group="md.$DADNTable.$DADynamicNewsAllSectors"/>
								<check_value value="player.age gt 5min"/>
								<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnable"/>
								<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnableLogbook or md.$DADynamicVarTable.$DADynamicNewsEnableNotifications or md.$DADynamicVarTable.$DADynamicNewsEnableNewsStorage"/>
							</conditions>
							<actions>
								<do_if value="not $DADVT?">
									<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
								</do_if>
								<set_value name="$LocSector" exact="event.object"/>
								<set_value name="$LocOldOwner" exact="event.param2"/>
								<set_value name="$LocNewOwner" exact="event.param"/>
								<do_if value="$LocSector?">
									<do_if value="$LocOldOwner">
										<do_if value="$LocNewOwner">
											<set_value name="$LocMessage" exact="'%s %s %s %s. %s %s: %s'.[$LocSector.knownname,{1020,2000},{1001,7745},if $LocOldOwner.knownname != '' then $LocOldOwner.knownname else {1001,9002},{1001,9001},{1001,9040},$LocNewOwner.knownname]"/>
											<!-- $LocSector changed owner from $LocOldOwner. New Owner:$LocNewOwner-->
										</do_if>
										<do_else>
											<set_value name="$LocMessage" exact="'%s %s %s %s. %s %s: %s'.[$LocSector.knownname,{1020,2000},{1001,7745},if $LocOldOwner.knownname != '' then $LocOldOwner.knownname else {1001,9002},{1001,9001},{1001,9040},{1001,9002}]"/>
											<!-- $LocSector changed owner from $LocOldOwner. New Owner: Unknown-->
										</do_else>
									</do_if>
									<do_else>
										<set_value name="$LocMessage" exact="'%s %s.'.[$LocSector.knownname,{1020,2000}]"/>
										<!-- $LocSector changed owner.-->
									</do_else>
								</do_if>
								<do_if value="$LocMessage?">
									<!-- 
								LOGBOOK
									Title = {33232474,102} // Faction = $LocSector.knownname // Text = $LocMessage
								END LOGBOOK
							-->
									<!-- 
								NOTIFICATION // Max 4 Rows
									{DA Dynamic News}: $LocSector.knownname
									$LocMessage
								END NOTIFICATION
							-->
									<do_if value="$DADVT.$DADynamicNewsEnableNewsStorage">
										<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$LocSector.knownname,$LocMessage]"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
										<show_notification priority="1" text="'%s: %s\n%s'.[{33232474,102},$LocSector.knownname,$LocMessage]"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicNewsEnableLogbook">
										<write_to_logbook category="news" title="{33232474,102}" faction="$LocSector.knownname" text="$LocMessage"/>
									</do_if>
								</do_if>
								<remove_value name="$LocSector"/>
								<remove_value name="$LocOldOwner"/>
								<remove_value name="$LocNewOwner"/>
								<remove_value name="$LocMessage"/>
							</actions>
						</cue>
						<cue name="EventDynamicNewsMajorStationDestroyedV2" instantiate="true" namespace="this">
							<conditions>
								<event_object_destroyed group="md.$DADNTable.$DADynamicNewsStations"/>
								<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnable"/>
								<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnableLogbook or md.$DADynamicVarTable.$DADynamicNewsEnableNotifications or md.$DADynamicVarTable.$DADynamicNewsEnableNewsStorage"/>
							</conditions>
							<actions>
								<do_if value="not $DADNT?">
									<set_value name="$DADNT" exact="md.$DADNTable"/>
								</do_if>
								<!-- ['EventDynamicNewsMajorStationDestroyed',$Station,$Killer] -->
								<set_value name="$LocStation" exact="event.object"/>
								<set_value name="$LocFaction" exact="event.object.trueowner"/>
								<set_value name="$LocKiller" exact="event.param"/>
								<do_if value="($LocStation?) and ($LocStation != null)">
									<do_if value="($LocFaction?) and ($LocFaction != null)">
										<do_if value="($LocKiller?) and ($LocKiller != null)">
											<do_if value="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}?">
												<append_to_list name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="['EventDynamicNewsMajorStationDestroyed',$LocStation,$LocKiller.trueowner]"/>
											</do_if>
											<do_else>
												<set_value name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="[['EventDynamicNewsMajorStationDestroyed',$LocStation,$LocKiller.trueowner]]"/>
											</do_else>
										</do_if>
										<do_else>
											<do_if value="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}?">
												<append_to_list name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="['EventDynamicNewsMajorStationDestroyed',$LocStation,null]"/>
											</do_if>
											<do_else>
												<set_value name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="[['EventDynamicNewsMajorStationDestroyed',$LocStation,null]]"/>
											</do_else>
										</do_else>
									</do_if>
								</do_if>
								<remove_value name="$LocStation"/>
								<remove_value name="$LocFaction"/>
								<remove_value name="$LocKiller"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventDynamicNewsStationExpanded" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnable"/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnableLogbook or md.$DADynamicVarTable.$DADynamicNewsEnableNotifications or md.$DADynamicVarTable.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<do_if value="not $DADNT?">
							<set_value name="$DADNT" exact="md.$DADNTable"/>
						</do_if>
						<!-- Param.{1} == $Station // Param.{2} == @$NewModules // Param.{3} == @$WantedProductions] -->
						<!-- ['EventDynamicNewsStationExpanded',$Station,[$NewModules],[$WantedProductions]] -->
						<set_value name="$LocStation" exact="event.param.{1}"/>
						<set_value name="$LocFaction" exact="event.param.{1}.trueowner"/>
						<set_value name="$LocModules" exact="[]"/>
						<set_value name="$LocWantedProductions" exact="[]"/>
						<do_if value="typeof event.param.{2} == datatype.list">
							<append_list_elements name="$LocModules" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="$LocModules" exact="event.param.{2}"/>
						</do_else>
						<do_if value="typeof event.param.{3} == datatype.list">
							<append_list_elements name="$LocWantedProductions" other="event.param.{3}"/>
						</do_if>
						<do_else>
							<append_to_list name="$LocWantedProductions" exact="event.param.{3}"/>
						</do_else>
						<do_if value="$LocStation? and ($LocStation != null)">
							<do_if value="$LocFaction? and ($LocFaction != null)">
								<set_value name="$LocEntry" exact="['EventDynamicNewsStationExpanded',$LocStation,null,null]"/>
								<do_if value="$LocModules? and $LocModules.count">
									<set_value name="$LocList" exact="[]"/>
									<do_for_each name="$LocModule" in="$LocModules">
										<do_if value="$LocModule.isclass.module">
											<append_to_list name="$LocList" exact="$LocModule"/>
										</do_if>
									</do_for_each>
									<do_if value="$LocList.count" min="1">
										<set_value name="$LocEntry.{3}" exact="[]"/>
										<append_list_elements name="$LocEntry.{3}" other="$LocList"/>
									</do_if>
									<remove_value name="$LocList"/>
								</do_if>
								<do_if value="$LocWantedProductions? and $LocWantedProductions.count">
									<set_value name="$LocList" exact="[]"/>
									<set_value name="$LocSkip" exact="[]"/>
									<do_for_each name="$Wanted" in="$LocWantedProductions">
										<do_if value="not $LocSkip.indexof.{$Wanted}">
											<do_if value="typeof $Wanted == datatype.macro">
												<do_if value="$Wanted.isclass.module">
													<do_if value="$Wanted.products.list? and @$Wanted.products.list.count">
														<do_for_each name="$LocProduct" in="$Wanted.products.list">
															<do_if value="(not $LocList.indexof.{$LocProduct}) and $LocProduct.hastag.{tag.economy}">
																<append_to_list name="$LocList" exact="$LocProduct"/>
															</do_if>
														</do_for_each>
													</do_if>
												</do_if>
												<do_elseif value="$Wanted.ware? and $Wanted.ware.hastag.{tag.economy}">
													<do_if value="not $LocList.indexof.{$Wanted.ware}">
														<append_to_list name="$LocList" exact="$Wanted.ware"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_elseif value="typeof $Wanted == datatype.ware">
												<do_if value="(not $LocList.indexof.{$Wanted}) and $Wanted.hastag.{tag.economy}">
													<append_to_list name="$LocList" exact="$Wanted"/>
												</do_if>
											</do_elseif>
											<append_to_list name="$LocSkip" exact="$Wanted"/>
										</do_if>
									</do_for_each>
									<do_if value="$LocList.count" min="1">
										<set_value name="$LocEntry.{4}" exact="[]"/>
										<append_list_elements name="$LocEntry.{4}" other="$LocList"/>
									</do_if>
									<remove_value name="$LocList"/>
									<remove_value name="$LocSkip"/>
								</do_if>
								<do_if value="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}?">
									<append_to_list name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="$LocEntry"/>
								</do_if>
								<do_else>
									<set_value name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="[$LocEntry]"/>
								</do_else>
								<remove_value name="$LocEntry"/>
							</do_if>
						</do_if>
						<remove_value name="$LocStation"/>
						<remove_value name="$LocFaction"/>
						<remove_value name="$LocModules"/>
						<remove_value name="$LocWantedProductions"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsNewStationStarted" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnable"/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnableLogbook or md.$DADynamicVarTable.$DADynamicNewsEnableNotifications or md.$DADynamicVarTable.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<do_if value="not $DADNT?">
							<set_value name="$DADNT" exact="md.$DADNTable"/>
						</do_if>
						<!-- Param.{1} == $Station // Param.{2} == $Wares -->
						<!-- ['EventDynamicNewsNewStationStarted',$Station,$Wares] -->
						<set_value name="$LocStation" exact="event.param.{1}"/>
						<set_value name="$LocFaction" exact="event.param.{1}.trueowner"/>
						<set_value name="$LocWare" exact="[]"/>
						<do_if value="typeof  event.param.{2} == datatype.list">
							<append_list_elements name="$LocWare" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="$LocWare" exact="event.param.{2}"/>
						</do_else>
						<do_if value="($LocStation?) and ($LocStation != null)">
							<do_if value="($LocFaction?) and ($LocFaction != null)">
								<do_if value="($LocWare?) and ($LocWare.count)">
									<do_if value="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}?">
										<append_to_list name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="['EventDynamicNewsNewStationStarted',$LocStation,$LocWare]"/>
									</do_if>
									<do_else>
										<set_value name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="[['EventDynamicNewsNewStationStarted',$LocStation,$LocWare]]"/>
									</do_else>
								</do_if>
								<do_else>
									<do_if value="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}?">
										<append_to_list name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="['EventDynamicNewsNewStationStarted',$LocStation,null]"/>
									</do_if>
									<do_else>
										<set_value name="$DADNT.$DADynamicNewsQueuedReports.{$LocFaction}" exact="[['EventDynamicNewsNewStationStarted',$LocStation,null]]"/>
									</do_else>
								</do_else>
							</do_if>
						</do_if>
						<remove_value name="$LocStation"/>
						<remove_value name="$LocFaction"/>
						<remove_value name="$LocWare"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsTracking" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnable"/>
						<check_value value="md.$DADynamicVarTable.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Param.{1} == $FACTION$ or $SECTOR$ // Param.{2} == $NEWS$ -->
						<set_value name="$LocSubject" exact="event.param.{1}"/>
						<set_value name="$LocMessage" exact="event.param.{2}"/>
						<do_if value="($LocSubject?) and ($LocSubject != null) and ($LocMessage?) and ($LocMessage != null)">
							<do_if value="(not $DADVT.$DADynamicNewsTable.{1}?)">
								<set_value name="$DADVT.$DADynamicNewsTable.{1}" exact="[player.age,$LocSubject,$LocMessage]"/>
							</do_if>
							<do_else>
								<!-- $DADVT.$DADynamicNewsTable.{Index} == [Player.age,$LocSubject,$LocMessage] -->
								<do_all exact="$DADVT.$DADynamicNewsTable.keys.count" counter="$indexcounter" reverse="true">
									<!-- Move all entries to index+1 so newest is first -->
									<do_if value="($indexcounter + 1) gt 20">
										<!-- If index + 1 gt 20 then drop -->
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicNewsTable.{$indexcounter + 1}" exact="$DADVT.$DADynamicNewsTable.{$indexcounter}"/>
									</do_else>
								</do_all>
								<!-- Put the new entry as index 1 -->
								<set_value name="$DADVT.$DADynamicNewsTable.{1}" exact="[player.age,$LocSubject,$LocMessage]"/>
							</do_else>
							<do_if value="$DADVT.$DADynamicNewsDetailedDebug">
								<debug_text text="'MOD: DADynamicNews -- News added for: %s -- LocMessage: %s'.[$LocSubject,$LocMessage]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<!-- This will be displayed in DADynamicNews -->
						<remove_value name="$LocSubject"/>
						<remove_value name="$LocMessage"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsOutput" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<delay exact="event.param.{2}"/>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="not $DADNT?">
							<set_value name="$DADNT" exact="md.$DADNTable"/>
						</do_if>
						<!-- 20241007 Rework, namespace changed, variables simplified, data to process is passed to this cue -->
						<!-- event.param = [$DANewsLocFaction,$DANewsLocDelay,$DANewsLocQueuedNews] -->
						<set_value name="$LocFaction" exact="event.param.{1}"/>
						<set_value name="$LocQueuedNews" exact="[]"/>
						<do_if value="event.param.{3}? and event.param.{3}.count">
							<append_list_elements name="$LocQueuedNews" other="event.param.{3}"/>
						</do_if>
						<set_value name="$LocStationsDestroyed" exact="table[]"/>
						<set_value name="$LocStationExpanded" exact="table[]"/>
						<set_value name="$LocStationStarted" exact="table[]"/>
						<do_if value="$DADVT.$DADynamicNewsDetailedDebug">
							<debug_text text="'MOD: DADynamicNews -- Processing news for %s'.[$LocFaction]" context="false" filter="scripts"/>
						</do_if>
						<do_if value="$LocQueuedNews.count" min="1">
							<!-- DONE: Test why I had reverse previously. Without reverse it should be oldest to newest. Tested and noticed no negative effects. Probably was removing entry initially before rewrite -->
							<do_all exact="$LocQueuedNews.count" counter="$ReportCounter">
								<!-- Make sure the data is a list -->
								<do_if value="$LocQueuedNews.{$ReportCounter}? and (typeof $LocQueuedNews.{$ReportCounter} == datatype.list)">
									<do_if value="$LocQueuedNews.{$ReportCounter}.{1} == 'EventDynamicNewsMajorStationDestroyed'">
										<!-- ['EventDynamicNewsMajorStationDestroyed',$Station,$Killer] -->
										<do_if value="$LocQueuedNews.{$ReportCounter}.{2}? and ($LocQueuedNews.{$ReportCounter}.{2} != null)">
											<!-- $LocStationsDestroyed.{$Station} == killer/null -->
											<set_value name="$LocStation" exact="$LocQueuedNews.{$ReportCounter}.{2}"/>
											<do_if value="not $LocStationsDestroyed.{$LocStation}?">
												<do_if value="$LocQueuedNews.{$ReportCounter}.{3}? and ($LocQueuedNews.{$ReportCounter}.{3} != null)">
													<set_value name="$LocStationsDestroyed.{$LocStation}" exact="$LocQueuedNews.{$ReportCounter}.{3}"/>
												</do_if>
												<do_else>
													<set_value name="$LocStationsDestroyed.{$LocStation}" exact="null"/>
												</do_else>
											</do_if>
											<remove_value name="$LocStation"/>
										</do_if>
									</do_if>
									<do_elseif value="$LocQueuedNews.{$ReportCounter}.{1} == 'EventDynamicNewsStationExpanded'">
										<!-- ['EventDynamicNewsStationExpanded',$Station,[$NewModules],[$WantedProductions]] -->
										<do_if value="$LocQueuedNews.{$ReportCounter}.{2}? and ($LocQueuedNews.{$ReportCounter}.{2} != null)">
											<!-- $LocStationsExpanded.{$Station} == [[newmodules]/null, [wantedproductions]/null] -->
											<set_value name="$LocStation" exact="$LocQueuedNews.{$ReportCounter}.{2}"/>
											<do_if value="not $LocStationExpanded.{$LocStation}?">
												<set_value name="$LocStationExpanded.{$LocStation}" exact="[null,null]"/>
												<do_if value="($LocQueuedNews.{$ReportCounter}.{3}?) and ($LocQueuedNews.{$ReportCounter}.{3} != null)">
													<set_value name="$LocStationExpanded.{$LocStation}.{1}" exact="[]"/>
													<!-- New modules is always a list or null -->
													<do_for_each name="$LocNewModule" in="$LocQueuedNews.{$ReportCounter}.{3}">
														<do_if value="not $LocStationExpanded.{$LocStation}.{1}.indexof.{$LocNewModule}">
															<append_to_list name="$LocStationExpanded.{$LocStation}.{1}" exact="$LocNewModule"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_if value="($LocQueuedNews.{$ReportCounter}.{4}?) and ($LocQueuedNews.{$ReportCounter}.{4} != null)">
													<set_value name="$LocStationExpanded.{$LocStation}.{2}" exact="[]"/>
													<!-- Wanted Productions is always a list of wares or null -->
													<do_for_each name="$LocNewWare" in="$LocQueuedNews.{$ReportCounter}.{4}">
														<do_if value="(not $LocStationExpanded.{$LocStation}.{2}.indexof.{$LocNewWare}) and $LocNewWare.hastag.{tag.economy}">
															<append_to_list name="$LocStationExpanded.{$LocStation}.{2}" exact="$LocNewWare"/>
														</do_if>
													</do_for_each>
												</do_if>
											</do_if>
											<remove_value name="$LocStation"/>
										</do_if>
									</do_elseif>
									<do_elseif value="$LocQueuedNews.{$ReportCounter}.{1} == 'EventDynamicNewsNewStationStarted'">
										<!-- ['EventDynamicNewsNewStationStarted',$Station,$Wares] -->
										<do_if value="($LocQueuedNews.{$ReportCounter}.{2}?) and ($LocQueuedNews.{$ReportCounter}.{2} != null)">
											<!-- $LocStationStarted.{$Station} == [[wares]/null] -->
											<set_value name="$LocStation" exact="$LocQueuedNews.{$ReportCounter}.{2}"/>
											<do_if value="not $LocStationStarted.{$LocStation}?">
												<set_value name="$LocStationStarted.{$LocStation}" exact="null"/>
												<do_if value="($LocQueuedNews.{$ReportCounter}.{3}?) and ($LocQueuedNews.{$ReportCounter}.{3} != null)">
													<set_value name="$LocStationStarted.{$LocStation}" exact="[]"/>
													<!-- Wares is always a list or null -->
													<do_for_each name="$LocWare" in="$LocQueuedNews.{$ReportCounter}.{3}">
														<do_if value="(not $LocStationStarted.{$LocStation}.indexof.{$LocWare}) and $LocWare.hastag.{tag.economy}">
															<append_to_list name="$LocStationStarted.{$LocStation}" exact="$LocWare"/>
														</do_if>
													</do_for_each>
												</do_if>
											</do_if>
											<remove_value name="$LocStation"/>
										</do_if>
									</do_elseif>
								</do_if>
							</do_all>
							<remove_value name="$LocQueuedNews"/>
							<do_if value="$LocStationsDestroyed.keys.count or $LocStationExpanded.keys.count or $LocStationStarted.keys.count">
								<!-- 
									LOGBOOK
										Title = $LocLogbookReport.{1} // Faction = $LocLogbookReport.{2} // Text = $LocLogbookReport.{3}
										$LocLogbookReport.{1}	=	{DA Dynamic News} // DONE: Add t-file entry for Dynamic News
										$LocLogbookReport.{2}	=	$LocFaction
										$LocLogbookReport.{3}	=	Message Structure
									END LOGBOOK
								-->
								<!-- 
									NOTIFICATION // Max 4 Rows
										$LocNotificationReport.{1}	=	{DA Dynamic News}
										$LocNotificationReport.{2}	=	$LocFaction
										$LocNotificationReport.{3}	=	Message Structure
									END NOTIFICATION
								-->
								<set_value name="$LocLogbookReport" exact="['','','']"/>
								<set_value name="$LocNotificationReport" exact="['','','']"/>
								<!-- {1} and {2} -->
								<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
									<set_value name="$LocLogbookReport.{1}" exact="'%s'.[{33232474,102}]"/>
									<set_value name="$LocLogbookReport.{2}" exact="'%s'.[$LocFaction.knownname]"/>
								</do_if>
								<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
									<set_value name="$LocNotificationReport.{1}" exact="'%s'.[{33232474,102}]"/>
									<set_value name="$LocNotificationReport.{2}" exact="'%s'.[$LocFaction.knownname]"/>
								</do_if>
								<!-- {3} -->
								<!-- 
								Logbook Structure:	SINGLE: $STATION$ in $SECTOR$ destroyed (if $LocKillerFaction then) by $FACTION$.
													MULTIPLE: Stations lost: $STATION$ in $SECTOR$...
													SINGLE: $STATION in $SECTOR expanded with $MODULES... $WANTEDPRODUCTIONS...
													MULTIPLE: Stations expanded: $STATION$ in $SECTOR$...
													SINGLE: $STATION started in $SECTOR for $WARES...
													MULTIPLE: New stations started: $STATION$ in $SECTOR$...
								Notification Structure:		SINGLE: $STATION$ in $SECTOR$ destroyed
															MULTIPLE: $NUMBER$ stations lost
															SINGLE: $STATION in $SECTOR expanded
															MULTIPLE: $NUMBER$ stations expanded
															SINGLE: $STATION started in $SECTOR
															MULTIPLE: $NUMBER$ stations started
								-->
								<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
								<do_if value="$LocStationsDestroyed.keys.count" min="1">
									<do_if value="$LocStationsDestroyed.keys.count == 1">
										<!-- $LocStationsDestroyed.{$Station} == killer/null -->
										<set_value name="$LocStation" exact="$LocStationsDestroyed.keys.list.{1}"/>
										<do_if value="$LocStation != null">
											<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2284}.[$LocStation.knownname,$LocStation.sector.knownname]" operation="add" comment="$STATION$ in $SECTOR$ destroyed"/>
												<do_if value="$LocStationsDestroyed.{$LocStation}? and ($LocStationsDestroyed.{$LocStation} != null)">
													<set_value name="$LocLogbookReport.{3}" exact="' %s.'.[{33232474,2285}.[$LocStationsDestroyed.{$LocStation}.name]]" operation="add" comment=" by $KILLER$."/>
												</do_if>
												<do_else>
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_else>
											</do_if>
											<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
												<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2284}.[$LocStation.knownname,$LocStation.sector.knownname]]" operation="add" comment="$STATION$ in $SECTOR$ destroyed."/>
											</do_if>
											<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
										</do_if>
										<remove_value name="$LocStation"/>
									</do_if>
									<do_else>
										<set_value name="$MaxCount" exact="$LocStationsDestroyed.keys.count"/>
										<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
											<set_value name="$LocLogbookReport.{3}" exact="'%s '.[{33232474,2286}]" operation="add" comment="Stations lost: "/>
											<do_for_each name="$LocStation" in="$LocStationsDestroyed.keys.list" counter="$A">
												<do_if value="($A gt 1) and ($A lt $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
												</do_if>
												<do_elseif value="($A == 2) and ($A == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp; space"/>
												</do_elseif>
												<do_elseif value="($A gt 1) and ($A == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp; space"/>
												</do_elseif>
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2287}.[$LocStation.knownname,$LocStation.sector.knownname]" operation="add"/>
												<do_if value="$A == $MaxCount">
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
											<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2294}.[$MaxCount]]" operation="add" comment="$NUMBER$ stations lost."/>
										</do_if>
										<remove_value name="$MaxCount"/>
										<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
									</do_else>
								</do_if>
								<do_if value="$DADynamicNewsNeedASpace">
									<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
										<set_value name="$LocLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
										<set_value name="$LocNotificationReport.{3}" exact="' '" operation="add" comment="space"/>
									</do_if>
									<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
								</do_if>
								<do_if value="$LocStationExpanded.keys.count" min="1">
									<do_if value="$LocStationExpanded.keys.count == 1">
										<!-- $LocStationsExpanded.{$Station} == [[newmodules]/null, [wantedproductions]/null] -->
										<set_value name="$LocStation" exact="$LocStationExpanded.keys.list.{1}"/>
										<do_if value="$LocStation != null">
											<set_value name="$LocNewModules" exact="$LocStationExpanded.{$LocStation}.{1}"/>
											<set_value name="$LocWantedProductions" exact="$LocStationExpanded.{$LocStation}.{2}"/>
											<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2288}.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" operation="add" comment="Expanded $STATION$($IDCODE$) in $SECTOR$"/>
												<do_if value="$LocNewModules.count" min="1">
													<set_value name="$LocLogbookReport.{3}" exact="' %s'.[{33232474,2289}.[$LocNewModules.count]]" operation="add" comment=" with $NUMBER$ modules"/>
												</do_if>
												<do_if value="$LocWantedProductions.count" min="1">
													<set_value name="$LocText" exact="''"/>
													<set_value name="$MaxCount" exact="$LocWantedProductions.count"/>
													<do_for_each name="$LocWare" in="$LocWantedProductions" counter="$A">
														<do_if value="($A gt 1) and ($A lt $MaxCount)">
															<set_value name="$LocText" exact="', '" operation="add" comment="comma space"/>
														</do_if>
														<do_elseif value="($A == 2) and ($A == $MaxCount)">
															<set_value name="$LocText" exact="' &amp; '" operation="add" comment="space &amp; space"/>
														</do_elseif>
														<do_elseif value="($A gt 1) and ($A == $MaxCount)">
															<set_value name="$LocText" exact="', &amp; '" operation="add" comment="comma space &amp; space"/>
														</do_elseif>
														<set_value name="$LocText" exact="$LocWare.name" operation="add"/>
														<do_if value="$A == $MaxCount">
															<set_value name="$LocText" exact="'.'" operation="add" comment="period."/>
														</do_if>
													</do_for_each>
													<set_value name="$LocLogbookReport.{3}" exact="' %s'.[{33232474,2292}.[$LocText]]" operation="add" comment=" to produce $WARE$"/>
													<remove_value name="$LocText"/>
													<remove_value name="$MaxCount"/>
												</do_if>
												<do_else>
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_else>
											</do_if>
											<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
												<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2288}.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]]" operation="add" comment="Expanded $STATION$($IDCODE$) in $SECTOR$."/>
											</do_if>
											<remove_value name="$LocNewModules"/>
											<remove_value name="$LocWantedProductions"/>
											<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
										</do_if>
										<remove_value name="$LocStation"/>
									</do_if>
									<do_else>
										<set_value name="$MaxCount" exact="$LocStationExpanded.keys.count"/>
										<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
											<set_value name="$LocLogbookReport.{3}" exact="'%s '.[{33232474,2290}]" operation="add" comment="Stations expanded: "/>
											<do_for_each name="$LocStation" in="$LocStationExpanded.keys.list" counter="$B">
												<do_if value="($B gt 1) and ($B lt $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
												</do_if>
												<do_elseif value="($B == 2) and ($B == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp; space"/>
												</do_elseif>
												<do_elseif value="($B gt 1) and ($B == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp; space"/>
												</do_elseif>
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2287}.[$LocStation.knownname,$LocStation.sector.knownname]" operation="add"/>
												<do_if value="$B == $MaxCount">
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
											<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2295}.[$MaxCount]]" operation="add" comment="$NUMBER$ stations expanded."/>
										</do_if>
										<remove_value name="$MaxCount"/>
										<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
									</do_else>
								</do_if>
								<do_if value="$DADynamicNewsNeedASpace">
									<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
										<set_value name="$LocLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
									</do_if>
									<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
										<set_value name="$LocNotificationReport.{3}" exact="' '" operation="add" comment="space"/>
									</do_if>
									<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
								</do_if>
								<do_if value="$LocStationStarted.keys.count" min="1">
									<do_if value="$LocStationStarted.keys.count == 1">
										<!-- $LocStationStarted.{$Station} == [[wares]/null] -->
										<set_value name="$LocStation" exact="$LocStationStarted.keys.list.{1}"/>
										<do_if value="$LocStation != null">
											<set_value name="$LocWares" exact="$LocStationStarted.{$LocStation}"/>
											<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2291}.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" operation="add" comment="Started $STATION$($IDCODE$) in $SECTOR$"/>
												<do_if value="$LocWares.count" min="1">
													<set_value name="$LocText" exact="''"/>
													<set_value name="$MaxCount" exact="$LocWares.count"/>
													<do_for_each name="$LocWare" in="$LocWares" counter="$C">
														<do_if value="($C gt 1) and ($C lt $MaxCount)">
															<set_value name="$LocText" exact="', '" operation="add" comment="comma space"/>
														</do_if>
														<do_elseif value="($C == 2) and ($C == $MaxCount)">
															<set_value name="$LocText" exact="' &amp; '" operation="add" comment="space &amp; space"/>
														</do_elseif>
														<do_elseif value="($C gt 1) and ($C == $MaxCount)">
															<set_value name="$LocText" exact="', &amp; '" operation="add" comment="comma space &amp; space"/>
														</do_elseif>
														<set_value name="$LocText" exact="'%s'.[$LocWare.name]" operation="add"/>
													</do_for_each>
													<set_value name="$LocLogbookReport.{3}" exact="' %s.'.[{33232474,2292}.[$LocText]]" operation="add" comment=" to produce $WARE$."/>
													<remove_value name="$LocText"/>
													<remove_value name="$MaxCount"/>
												</do_if>
												<do_else>
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_else>
											</do_if>
											<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
												<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2291}.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]]" operation="add" comment="Started $STATION$($IDCODE$) in $SECTOR$."/>
											</do_if>
											<remove_value name="$LocWares"/>
										</do_if>
										<remove_value name="$LocStation"/>
									</do_if>
									<do_else>
										<set_value name="$MaxCount" exact="$LocStationStarted.keys.count"/>
										<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
											<set_value name="$LocLogbookReport.{3}" exact="'%s '.[{33232474,2293}]" operation="add" comment="New stations started: "/>
											<do_for_each name="$LocStation" in="$LocStationStarted.keys.list" counter="$D">
												<do_if value="($D gt 1) and ($D lt $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
												</do_if>
												<do_elseif value="($D == 2) and ($D == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp; space"/>
												</do_elseif>
												<do_elseif value="($D gt 1) and ($D == $MaxCount)">
													<set_value name="$LocLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp; space"/>
												</do_elseif>
												<set_value name="$LocLogbookReport.{3}" exact="{33232474,2287}.[$LocStation.knownname,$LocStation.sector.knownname]" operation="add"/>
												<do_if value="$D == $MaxCount">
													<set_value name="$LocLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
											<set_value name="$LocNotificationReport.{3}" exact="'%s.'.[{33232474,2296}.[$MaxCount]]" operation="add" comment="$NUMBER$ stations started."/>
										</do_if>
										<remove_value name="$MaxCount"/>
									</do_else>
								</do_if>
							</do_if>
							<set_value name="$DADNT.$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
							<do_if value="($DADVT.$DADynamicNewsEnableNotifications) and ($LocNotificationReport.{1}?) and ($LocNotificationReport.{2}?) and ($LocNotificationReport.{3}?)">
								<show_notification priority="1" text="'%s: %s\n%s'.[$LocNotificationReport.{1},$LocNotificationReport.{2},$LocNotificationReport.{3}]"/>
							</do_if>
							<do_if value="($DADVT.$DADynamicNewsEnableLogbook) and ($LocLogbookReport.{1}?) and ($LocLogbookReport.{2}?) and ($LocLogbookReport.{3}?)">
								<write_to_logbook category="news" title="$LocLogbookReport.{1}" faction="$LocLogbookReport.{2}" text="$LocLogbookReport.{3}"/>
							</do_if>
							<do_if value="($DADVT.$DADynamicNewsEnableNewsStorage) and ($LocNotificationReport.{1}?) and ($LocNotificationReport.{2}?) and ($LocNotificationReport.{3}?)">
								<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$LocLogbookReport.{2},$LocLogbookReport.{3}]"/>
							</do_if>
						</do_if>
						<!-- Cleanup -->
						<remove_value name="$LocStationsDestroyed"/>
						<remove_value name="$LocStationExpanded"/>
						<remove_value name="$LocStationStarted"/>
						<remove_value name="$LocWares"/>
						<remove_value name="$LocNewModules"/>
						<remove_value name="$LocWantedProductions"/>
						<remove_value name="$LocKillerFaction"/>
						<remove_value name="$LocLogbookReport"/>
						<remove_value name="$LocNotificationReport"/>
						<remove_value name="$LocFaction"/>
					</actions>
				</cue>
				<!-- Dynamic News // Variable Check Libraries -->
				<library name="LibraryCheckDynamicNewsVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DADynamicNewsEnable? or (not ((typeof $DADVT.$DADynamicNewsEnable == datatype.integer) and (($DADVT.$DADynamicNewsEnable == 1) or ($DADVT.$DADynamicNewsEnable == 0))))">
							<set_value name="$DADVT.$DADynamicNewsEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsTable? or ($DADVT.$DADynamicNewsTable == null)">
							<set_value name="$DADVT.$DADynamicNewsTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not md.$DADNTable? or (md.$DADNTable == null)">
							<set_value name="md.$DADNTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADNT? or ($DADNT == null)">
							<set_value name="$DADNT" exact="md.$DADNTable"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADNT.$DADynamicNewsAllSectors? or ($DADNT.$DADynamicNewsAllSectors == null)">
							<find_sector groupname="$DADNT.$DADynamicNewsAllSectors" multiple="true"/>
							<remove_value name="$DADynamicNewsAllSectors"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADNT.$DADynamicNewsStations? or ($DADNT.$DADynamicNewsStations == null)">
							<find_station groupname="$DADNT.$DADynamicNewsStations" multiple="true">
								<match_any>
									<match shipyard="true"/>
									<match wharf="true"/>
									<match tradestation="true"/>
									<match equipmentdock="true"/>
									<match defencestation="true"/>
									<match factionheadquarters="true"/>
								</match_any>
							</find_station>
							<remove_value name="$DADynamicNewsStations"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADNT.$DADynamicNewsQueuedReports? or ($DADNT.$DADynamicNewsQueuedReports == null)">
							<set_value name="$DADNT.$DADynamicNewsQueuedReports" exact="table[]"/>
							<remove_value name="$DADynamicNewsQueuedReports"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADNT.$DADynamicNewsLastReportTime? or (not (typeof $DADNT.$DADynamicNewsLastReportTime == datatype.time))">
							<set_value name="$DADNT.$DADynamicNewsLastReportTime" exact="0s"/>
							<remove_value name="$DADynamicNewsLastReportTime"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsInterval? or (not ($DADVT.$DADynamicNewsInterval gt 0))">
							<set_value name="$DADVT.$DADynamicNewsInterval" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsDetailedDebug? or (not ((typeof $DADVT.$DADynamicNewsDetailedDebug == datatype.integer) and (($DADVT.$DADynamicNewsDetailedDebug == 1) or ($DADVT.$DADynamicNewsDetailedDebug == 0))))">
							<set_value name="$DADVT.$DADynamicNewsDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableNotifications? or (not ((typeof $DADVT.$DADynamicNewsEnableNotifications == datatype.integer) and (($DADVT.$DADynamicNewsEnableNotifications == 1) or ($DADVT.$DADynamicNewsEnableNotifications == 0))))">
							<set_value name="$DADVT.$DADynamicNewsEnableNotifications" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableLogbook? or (not ((typeof $DADVT.$DADynamicNewsEnableLogbook == datatype.integer) and (($DADVT.$DADynamicNewsEnableLogbook == 1) or ($DADVT.$DADynamicNewsEnableLogbook == 0))))">
							<set_value name="$DADVT.$DADynamicNewsEnableLogbook" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableNewsStorage? or (not ((typeof $DADVT.$DADynamicNewsEnableNewsStorage == datatype.integer) and (($DADVT.$DADynamicNewsEnableNewsStorage == 1) or ($DADVT.$DADynamicNewsEnableNewsStorage == 0))))">
							<set_value name="$DADVT.$DADynamicNewsEnableNewsStorage" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsKnownFactionsOnly? or (not ((typeof $DADVT.$DADynamicNewsKnownFactionsOnly == datatype.integer) and (($DADVT.$DADynamicNewsKnownFactionsOnly == 1) or ($DADVT.$DADynamicNewsKnownFactionsOnly == 0))))">
							<set_value name="$DADVT.$DADynamicNewsKnownFactionsOnly" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DADynamicNews -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Evolution // Timer Cues -->
				<cue name="TimerEvolutionUpgrades" instantiate="true" checkinterval="15min" checktime="35min" comment="Timer 05 default">
					<conditions>
						<check_all>
							<check_value value="faction.xenon.isactive"/>
							<check_value value="$DADVT.$DAEvolutionEnable"/>
						</check_all>
					</conditions>
					<actions>
						<do_if value="$DADVT.$DAEvoltuionPlayerMaxSetting lt $DADVT.$DAEvolutionCurrentLevel">
							<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="$DADVT.$DAEvoltuionPlayerMaxSetting"/>
							<include_actions ref="LibraryEvolutionSetEQMods"/>
						</do_if>
						<do_if value="(player.age ge ($DAEvolutionLastUpgradeTime + ($DADVT.$DAEvolutionInterval)min)) and $DADVT.$DAEvolutionCurrentLevel lt [$DADVT.$DAEvolutionMaxLevel,$DADVT.$DAEvoltuionPlayerMaxSetting].min">
							<include_actions ref="LibraryEvolutionCheckLevels"/>
						</do_if>
						<do_if value="($DADVT.$DAEvolutionCurrentLevel gt 0) and $DADVT.$DAEvolutionEnableUpgradeStations">
							<signal_cue_instantly cue="EventEvolutionCheckShipyards"/>
							<signal_cue_instantly cue="EventEvolutionCheckWharves"/>
						</do_if>
					</actions>
				</cue>
				<cue name="TimerEvolutionXenonJobs" instantiate="true" checkinterval="30min" checktime="40min" comment="Timer 10/40">
					<conditions>
						<check_all>
							<check_value value="faction.xenon.isactive"/>
							<check_value value="$DADVT.$DAEvolutionEnableJobs"/>
						</check_all>
					</conditions>
					<actions>
						<include_actions ref="LibraryEvolutionOrderXenonShips"/>
					</actions>
				</cue>
				<!-- Evolution // Update on load cues -->
				<cue name="UpdateOnLoadEvolution" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAEvolutionEnable"/>
						<check_value value="$DADVT.$DAEvolutionCurrentLevel gt 0"/>
						<check_value value="faction.xenon.isactive"/>
						<check_any>
							<check_value value="not $UpdateOnLoadEvolutionTimer?"/>
							<check_value value="$UpdateOnLoadEvolutionTimer? and (player.age gt $UpdateOnLoadEvolutionTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadEvolutionTimer" exact="player.age + 5s"/>
						<include_actions ref="LibraryEvolutionSetEQMods"/>
					</actions>
				</cue>
				<!-- Evolution // Event cues -->
				<cue name="EventEvolutionUpgradeShip" instantiate="true" namespace="this">
					<conditions>
						<event_job_ship_activated/>
						<check_value value="event.param.trueowner == faction.xenon"/>
						<check_value value="faction.xenon.isactive"/>
						<check_value value="md.$DADynamicVarTable.$DAEvolutionEnable"/>
						<check_value value="md.$DADynamicVarTable.$DAEvolutionCurrentLevel gt 0"/>
						<check_value value="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.count" min="1"/>
					</conditions>
					<actions>
						<!-- $DADVT.$DAEvolutionCurrentEQMods {1}Engine {2}Ship {3}Shield {4}Weapon {5}Missile {6}Eco -->
						<set_value name="$LocEngineMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{1}"/>
						<set_value name="$LocShipMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{2}"/>
						<set_value name="$LocShieldMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{3}"/>
						<set_value name="$LocWeaponMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{4}"/>
						<set_value name="$LocMissileMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{5}"/>
						<set_value name="$LocEcoMod" exact="md.$DADynamicVarTable.$DAEvolutionCurrentEQMods.{6}"/>
						<set_value name="$LocShieldGroupTags" exact="[]"/>
						<set_value name="$LocWeaponGroupTags" exact="[]"/>
						<set_value name="$LocWeaponMacros" exact="[]"/>
						<!-- Apply EQ mods -->
						<do_if value="@$LocEngineMod">
							<!-- Engine mods work with simple method -->
							<add_equipment_mods object="event.param">
								<engine ware="$LocEngineMod"/>
							</add_equipment_mods>
						</do_if>
						<do_if value="@$LocEcoMod and @$LocShipMod">
							<!-- Ship mods work with simple method -->
							<do_if value="[purpose.trade,purpose.mine].indexof.{event.param.primarypurpose}">
								<add_equipment_mods object="event.param">
									<ship ware="$LocEcoMod"/>
								</add_equipment_mods>
							</do_if>
							<do_else>
								<add_equipment_mods object="event.param">
									<ship ware="$LocShipMod"/>
								</add_equipment_mods>
							</do_else>
						</do_if>
						<do_if value="@$LocShieldMod">
							<!-- 20241015 Improved shield handling -->
							<do_for_each name="$LocShield" in="event.param.shields.all.list">
								<do_if value="$LocShield.grouptag and (not $LocShieldGroupTags.indexof.{$LocShield.grouptag})">
									<add_equipment_mods object="event.param">
										<shield ware="$LocShieldMod" context="'..'" group="$LocShield.grouptag"/>
									</add_equipment_mods>
									<append_to_list name="$LocShieldGroupTags" exact="$LocShield.grouptag"/>
								</do_if>
							</do_for_each>
							<do_if value="not event.param.hasshieldmod">
								<add_equipment_mods object="event.param">
									<shield ware="$LocShieldMod"/>
								</add_equipment_mods>
							</do_if>
						</do_if>
						<do_if value="@$LocWeaponMod and @$LocMissileMod">
							<!-- Have to use complicated method for weapons/turrets on L/XL-->
							<do_for_each name="$LocWeapon" in="event.param.weapons.all.list">
								<do_if value="@$LocWeapon.grouptag != null">
									<do_if value="not $LocWeaponGroupTags.indexof.{$LocWeapon.grouptag}">
										<do_if value="$LocWeapon.isclass.[class.missileturret,class.missilelauncher]">
											<add_equipment_mods object="event.param">
												<weapon ware="$LocMissileMod" context="'..'" group="$LocWeapon.grouptag"/>
											</add_equipment_mods>
										</do_if>
										<do_else>
											<add_equipment_mods object="event.param">
												<weapon ware="$LocWeaponMod" context="'..'" group="$LocWeapon.grouptag"/>
											</add_equipment_mods>
										</do_else>
										<append_to_list name="$LocWeaponGroupTags" exact="$LocWeapon.grouptag"/>
									</do_if>
								</do_if>
								<do_elseif value="(@$LocWeapon.grouptag == null) and $LocWeapon.macro and (not $LocWeaponMacros.indexof.{$LocWeapon.macro})">
									<do_if value="not @event.param.hasweaponmod.{$LocWeapon.macro}">
										<do_if value="$LocWeapon.isclass.[class.missileturret,class.missilelauncher]">
											<add_equipment_mods object="event.param">
												<weapon ware="$LocMissileMod" macro="$LocWeapon.macro"/>
											</add_equipment_mods>
										</do_if>
										<do_else>
											<add_equipment_mods object="event.param">
												<weapon ware="$LocWeaponMod" macro="$LocWeapon.macro"/>
											</add_equipment_mods>
										</do_else>
										<append_to_list name="$LocWeaponMacros" exact="$LocWeapon.macro"/>
									</do_if>
									<do_elseif value="not $LocWeaponMacros.indexof.{$LocWeapon.macro}">
										<append_to_list name="$LocWeaponMacros" exact="$LocWeapon.macro"/>
									</do_elseif>
								</do_elseif>
							</do_for_each>
						</do_if>
						<remove_value name="$LocShieldGroupTags"/>
						<remove_value name="$LocWeaponGroupTags"/>
						<remove_value name="$LocWeaponMacros"/>
						<remove_value name="$LocEngineMod"/>
						<remove_value name="$LocShipMod"/>
						<remove_value name="$LocShieldMod"/>
						<remove_value name="$LocWeaponMod"/>
						<remove_value name="$LocMissileMod"/>
						<remove_value name="$LocEcoMod"/>
					</actions>
				</cue>
				<cue name="EventEvolutionRequestJobShip" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$JobID,$Sector,$JobMainZone] -->
						<request_job_ship name="this.$LocRequestedShip" job="event.param.{1}" requester="event.param.{2}" zone="event.param.{3}"/>
						<do_if value="this.$LocRequestedShip">
							<set_value name="this.$LocJobID" exact="event.param.{1}"/>
							<set_value name="this.$LocSector" exact="event.param.{2}"/>
							<set_value name="this.$LocJobMainZone" exact="event.param.{3}"/>
							<append_to_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="this.$LocRequestedShip"/>
							<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- Placed %s Request -- ShipyardSector: %s -- JobMainSector: %s -- LocRequestedShip: %s -- $DAEvolutionXenonShipTempList.count: %s'.[this.$LocJobID,this.$LocSector.knownname,this.$LocJobMainZone.sector.knownname,this.$LocRequestedShip,@md.$DADynamicVarTable.$DAEvolutionXenonShipTempList.count]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_else>
							<cancel_cue cue="EventEvolutionRequestJobShip"/>
						</do_else>
					</actions>
					<cues>
						<!-- Called when a requested jobship finished construction -->
						<cue name="EventEvolutionShipBuilt">
							<conditions>
								<event_object_signalled object="parent.$LocRequestedShip" param="'build.shiptrader'" param2="'requested_ship_built'"/>
							</conditions>
							<actions>
								<set_requested_job_ship_timeout ship="parent.$LocRequestedShip" timeout="player.age + 4h"/>
								<create_order object="parent.$LocRequestedShip" id="'RestockSubordinates'">
									<param name="init" value="true"/>
								</create_order>
								<do_if value="parent.$LocRequestedShip">
									<add_to_group groupname="md.$DADynamicVarTable.$DAEvolutionXenonShipGroup" object="parent.$LocRequestedShip"/>
									<!-- Remove the ship from $DAEvolutionXenonShipTempList -->
									<do_if value="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList.indexof.{parent.$LocRequestedShip}">
										<remove_from_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="parent.$LocRequestedShip" multiple="false"/>
									</do_if>
									<set_value name="md.$DADynamicVarTable.$DAEvolutionTotalShipsBuilt" exact="1" operation="add"/>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
									<debug_text text="'MOD: DAEvolution -- Xenon ship activated. Ship: %s(%s) -- Job: %s -- JobMainSector: %s -- Location: %s -- Total Ships Alive: %s -- Total Ships Built: %s'.[parent.$LocRequestedShip.knownname,parent.$LocRequestedShip.idcode,parent.$LocRequestedShip.job,parent.$LocRequestedShip.jobmainsector.knownname,parent.$LocRequestedShip.sector.knownname,md.$DADynamicVarTable.$DAEvolutionXenonShipGroup.count,@md.$DADynamicVarTable.$DAEvolutionTotalShipsBuilt]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventEvolutionRequestJobShip"/>
							</actions>
						</cue>
						<!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
						<cue name="EventEvolutionShipDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$LocRequestedShip"/>
							</conditions>
							<actions>
								<remove_from_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="parent.$LocRequestedShip" multiple="false"/>
								<cancel_cue cue="EventEvolutionRequestJobShip"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventEvolutionCheckShipyards" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="$DADVT.$DAEvolutionCurrentLevel and $DADVT.$DAEvolutionEnableUpgradeStations and $DADVT.$DAEvolutionStations? and $DADVT.$DAEvolutionStationProgress?">
							<find_station_by_true_owner name="$LocShipyards" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true" shipyard="true"/>
							<set_value name="$LocDesiredStorageModules" exact="[4,5,5,5,6,6,6,7,7,8]"/>
							<set_value name="$LocDesiredBuildModules" exact="[2,2,3,3,3,4,4,4,5,5]"/>
							<set_value name="$LocDesiredDefModules" exact="[9,10,10,10,11,11,11,12,12,13]"/>
							<do_for_each name="$LocShipyard" in="$LocShipyards">
								<do_if value="not $DADVT.$DAEvolutionStations.indexof.{$LocShipyard}">
									<add_to_group groupname="$DADVT.$DAEvolutionStations" object="$LocShipyard"/>
								</do_if>
								<do_if value="(not $DADVT.$DAEvolutionStationProgress.{$LocShipyard}?) or ($DADVT.$DAEvolutionStationProgress.{$LocShipyard}? and ($DADVT.$DAEvolutionStationProgress.{$LocShipyard} lt $DADVT.$DAEvolutionCurrentLevel))">
									<do_if value="not $DADVT.$DAEvolutionStationProgress.{$LocShipyard}?">
										<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocShipyard}" exact="0"/>
									</do_if>
									<do_if value="$DADVT.$DAEvolutionStationProgress.{$LocShipyard} lt $DADVT.$DAEvolutionCurrentLevel">
										<!-- $LocModulesToAdd = [$StorageMacro, $BuildModuleMacro, $DefenceModuleMacro] -->
										<set_value name="$LocModulesToAdd" exact="[null,null,null]"/>
										<set_value name="$LocStorageModuleCount" exact="0"/>
										<set_value name="$LocBuildModuleCount" exact="0"/>
										<set_value name="$LocDefModuleCount" exact="0"/>
										<set_value name="$LocEvoStationSequence" exact="$LocShipyard.plannedconstruction.sequence"/>
										<do_if value="$LocEvoStationSequence.count" min="1">
											<!-- Can only use a do_all with .plannedconstruction.sequence apparently -->
											<do_all exact="$LocEvoStationSequence.count" counter="$Module">
												<do_if value="not $LocEvoStationSequence.{$Module}.macro.isclass.[class.storage,class.buildmodule,class.defencemodule]">
													<!-- Nothing -->
												</do_if>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.storage">
													<set_value name="$LocStorageModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{1} == null">
														<set_value name="$LocModulesToAdd.{1}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.buildmodule">
													<set_value name="$LocBuildModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{2} == null">
														<set_value name="$LocModulesToAdd.{2}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.defencemodule and ($LocEvoStationSequence.{$Module}.macro != macro.xenon_small_station_01_base_macro)">
													<set_value name="$LocDefModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{3} == null">
														<set_value name="$LocModulesToAdd.{3}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
											</do_all>
										</do_if>
										<set_value name="$NewModules" exact="[]"/>
										<do_if value="($LocStorageModuleCount lt $LocDesiredStorageModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{1}">
											<set_value name="$LocNumber" exact="$LocDesiredStorageModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocStorageModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{1}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="($LocBuildModuleCount lt $LocDesiredBuildModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{2}">
											<set_value name="$LocNumber" exact="$LocDesiredBuildModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocBuildModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{2}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="($LocDefModuleCount lt $LocDesiredDefModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{3}">
											<set_value name="$LocNumber" exact="$LocDesiredDefModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocDefModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{3}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="$NewModules.count" min="1">
											<signal_cue_instantly cue="EventEvolutionUpgradeShipyard" param="[$LocShipyard,$NewModules]"/>
											<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocShipyard}" exact="$DADVT.$DAEvolutionCurrentLevel"/>
										</do_if>
										<do_else>
											<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocShipyard}" exact="$DADVT.$DAEvolutionCurrentLevel"/>
										</do_else>
										<remove_value name="$NewModules"/>
										<remove_value name="$LocModulesToAdd"/>
										<remove_value name="$LocStorageModuleCount"/>
										<remove_value name="$LocBuildModuleCount"/>
										<remove_value name="$LocDefModuleCount"/>
										<remove_value name="$LocEvoStationSequence"/>
									</do_if>
								</do_if>
							</do_for_each>
							<remove_value name="$LocShipyards"/>
							<remove_value name="$LocDesiredStorageModules"/>
							<remove_value name="$LocDesiredBuildModules"/>
							<remove_value name="$LocDesiredDefModules"/>
						</do_if>
					</actions>
				</cue>
				<cue name="EventEvolutionCheckWharves" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="$DADVT.$DAEvolutionCurrentLevel and $DADVT.$DAEvolutionEnableUpgradeStations and $DADVT.$DAEvolutionStations? and $DADVT.$DAEvolutionStationProgress?">
							<find_station_by_true_owner name="$LocWharves" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true" wharf="true"/>
							<set_value name="$LocDesiredStorageModules" exact="[4,5,5,5,6,6,6,7,7,8]"/>
							<set_value name="$LocDesiredEnergyModules" exact="[1,2,2,2,3,3,3,4,4,6]"/>
							<set_value name="$LocDesiredDefModules" exact="[7,8,8,8,9,9,9,10,10,11]"/>
							<do_for_each name="$LocWharf" in="$LocWharves">
								<do_if value="not $DADVT.$DAEvolutionStations.indexof.{$LocWharf}">
									<add_to_group groupname="$DADVT.$DAEvolutionStations" object="$LocWharf"/>
								</do_if>
								<do_if value="(not $DADVT.$DAEvolutionStationProgress.{$LocWharf}?) or ($DADVT.$DAEvolutionStationProgress.{$LocWharf}? and ($DADVT.$DAEvolutionStationProgress.{$LocWharf} lt $DADVT.$DAEvolutionCurrentLevel))">
									<do_if value="not $DADVT.$DAEvolutionStationProgress.{$LocWharf}?">
										<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocWharf}" exact="0"/>
									</do_if>
									<do_if value="$DADVT.$DAEvolutionStationProgress.{$LocWharf} lt $DADVT.$DAEvolutionCurrentLevel">
										<!-- $LocModulesToAdd = [$StorageMacro, $EnergyCellMacro, $DefenceModuleMacro] -->
										<set_value name="$LocModulesToAdd" exact="[null,null,null]"/>
										<set_value name="$LocStorageModuleCount" exact="0"/>
										<set_value name="$LocEnergyModuleCount" exact="0"/>
										<set_value name="$LocDefModuleCount" exact="0"/>
										<set_value name="$LocEvoStationSequence" exact="$LocWharf.plannedconstruction.sequence"/>
										<get_module_definition macro="$LocEnergyModuleMacro" tags="[tag.production, tag.module]" faction="faction.xenon" race="faction.xenon.primaryrace" ware="ware.energycells"/>
										<do_if value="$LocEvoStationSequence.count and @$LocEnergyModuleMacro">
											<!-- Can only use a do_all with .plannedconstruction.sequence apparently -->
											<do_all exact="$LocEvoStationSequence.count" counter="$Module">
												<do_if value="not $LocEvoStationSequence.{$Module}.macro.isclass.[class.storage,class.production,class.defencemodule]">
													<!-- Nothing -->
												</do_if>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.storage">
													<set_value name="$LocStorageModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{1} == null">
														<set_value name="$LocModulesToAdd.{1}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.production and $LocEvoStationSequence.{$Module}.macro.ismacro.{$LocEnergyModuleMacro}">
													<set_value name="$LocEnergyModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{2} == null">
														<set_value name="$LocModulesToAdd.{2}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
												<do_elseif value="$LocEvoStationSequence.{$Module}.macro.isclass.defencemodule and ($LocEvoStationSequence.{$Module}.macro != macro.xenon_small_station_01_base_macro)">
													<set_value name="$LocDefModuleCount" exact="1" operation="add"/>
													<do_if value="$LocModulesToAdd.{3} == null">
														<set_value name="$LocModulesToAdd.{3}" exact="$LocEvoStationSequence.{$Module}.macro"/>
													</do_if>
												</do_elseif>
												<do_if value="($Module == $LocEvoStationSequence.count) and ($LocModulesToAdd.{2} == null)">
													<set_value name="$LocModulesToAdd.{2}" exact="$LocEnergyModuleMacro"/>
												</do_if>
											</do_all>
										</do_if>
										<set_value name="$NewModules" exact="[]"/>
										<do_if value="($LocStorageModuleCount lt $LocDesiredStorageModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{1}">
											<set_value name="$LocNumber" exact="$LocDesiredStorageModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocStorageModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{1}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="($LocEnergyModuleCount lt $LocDesiredEnergyModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{2}">
											<set_value name="$LocNumber" exact="$LocDesiredEnergyModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocEnergyModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{2}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="($LocDefModuleCount lt $LocDesiredDefModules.{$DADVT.$DAEvolutionCurrentLevel}) and @$LocModulesToAdd.{3}">
											<set_value name="$LocNumber" exact="$LocDesiredDefModules.{$DADVT.$DAEvolutionCurrentLevel} - $LocDefModuleCount"/>
											<do_all exact="$LocNumber">
												<append_to_list name="$NewModules" exact="$LocModulesToAdd.{3}"/>
											</do_all>
											<remove_value name="$LocNumber"/>
										</do_if>
										<do_if value="$NewModules.count" min="1">
											<signal_cue_instantly cue="EventEvolutionUpgradeShipyard" param="[$LocWharf,$NewModules]"/>
											<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocWharf}" exact="$DADVT.$DAEvolutionCurrentLevel"/>
										</do_if>
										<do_else>
											<set_value name="$DADVT.$DAEvolutionStationProgress.{$LocWharf}" exact="$DADVT.$DAEvolutionCurrentLevel"/>
										</do_else>
										<remove_value name="$NewModules"/>
										<remove_value name="$LocModulesToAdd"/>
										<remove_value name="$LocStorageModuleCount"/>
										<remove_value name="$LocBuildModuleCount"/>
										<remove_value name="$LocDefModuleCount"/>
										<remove_value name="$LocEvoStationSequence"/>
										<remove_value name="$LocEnergyModuleMacro"/>
									</do_if>
								</do_if>
							</do_for_each>
							<remove_value name="$LocWharves"/>
							<remove_value name="$LocDesiredStorageModules"/>
							<remove_value name="$LocDesiredEnergyModules"/>
							<remove_value name="$LocDesiredDefModules"/>
						</do_if>
					</actions>
				</cue>
				<cue name="EventEvolutionUpgradeShipyard" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- event.param = [$LocEvolutionStation,$NewModules] -->
						<set_value name="$EvolutionUpgradeStation" exact="event.param.{1}"/>
						<set_value name="$NewModules" exact="[]"/>
						<do_if value="typeof event.param.{2} == datatype.list">
							<append_list_elements name="$NewModules" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="$NewModules" exact="event.param.{2}"/>
						</do_else>
						<do_if value="@$EvolutionUpgradeStation">
							<do_if value="$NewModules? and ($NewModules.count or ($NewModules != null))">
								<create_construction_sequence station="$EvolutionUpgradeStation" base="$EvolutionUpgradeStation.plannedconstruction.sequence" macros="$NewModules"/>
							</do_if>
							<do_else>
								<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
							</do_else>
						</do_if>
						<do_else>
							<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
						</do_else>
					</actions>
					<cues>
						<cue name="XenonStationWatcher">
							<conditions>
								<event_object_construction_sequence_created object="$EvolutionUpgradeStation"/>
							</conditions>
							<actions>
								<add_build_to_expand_station result="$BuildTask" buildobject="$EvolutionUpgradeStation" object="$EvolutionUpgradeStation.buildstorage" constructionplan="event.param"/>
								<debug_text text="'MOD: DAEvolution -- XenonStation upgrade planned -- %s(%s)(%s) -- modules: %s'.[$EvolutionUpgradeStation.knownname,$EvolutionUpgradeStation.idcode,$EvolutionUpgradeStation.sector.knownname,@$NewModules.count]" context="false" filter="scripts"/>
							</actions>
						</cue>
						<cue name="XenonStationDestroyed">
							<conditions>
								<event_object_destroyed object="$EvolutionUpgradeStation"/>
							</conditions>
							<actions>
								<remove_value name="$DADVT.$DAEvolutionStationProgress.{$EvolutionUpgradeStation}"/>
								<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
							</actions>
						</cue>
						<cue name="XenonStationFinished">
							<conditions>
								<event_build_finished object="$EvolutionUpgradeStation.buildstorage"/>
							</conditions>
							<actions>
								<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
									<debug_text text="'MOD: DAEvolution -- XenonStation upgrade finished -- %s(%s)(%s)'.[$EvolutionUpgradeStation.knownname,$EvolutionUpgradeStation.idcode,$EvolutionUpgradeStation.sector.knownname]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventEvolutionEventsv2">
					<actions>
						<do_if value="not md.$DADynamicVarTable.$DAEvolutionStations? or (md.$DADynamicVarTable.$DAEvolutionStations == null)">
							<include_actions ref="LibraryCheckEvolutionVariables"/>
						</do_if>
					</actions>
					<cues>
						<cue name="EventEvolutionStationDestroyed" instantiate="true" namespace="this">
							<conditions>
								<event_object_destroyed group="md.$DADynamicVarTable.$DAEvolutionStations"/>
							</conditions>
							<actions>
								<set_value name="$LocStation" exact="event.object"/>
								<do_if value="md.$DADynamicVarTable.$DAEvolutionStationProgress.{$LocStation}?">
									<remove_value name="md.$DADynamicVarTable.$DAEvolutionStationProgress.{$LocStation}"/>
								</do_if>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Evolution // Functional Libraries -->
				<library name="LibraryEvolutionCheckLevels">
					<actions>
						<set_value name="$EvolutionXenonStations" exact="[]"/>
						<find_station_by_true_owner name="$EvolutionXenonStations" faction="faction.xenon" space="player.galaxy" canbuildships="true" checkoperational="true" multiple="true"/>
						<do_if value="$EvolutionXenonStations.count" min="1">
							<do_if value="$DADVT.$DAEvolutionCurrentLevel lt $DADVT.$DAEvolutionMaxLevel">
								<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="1" operation="add"/>
								<set_value name="$DAEvolutionLastUpgradeTime" exact="player.age"/>
								<do_if value="$DADVT.$DAEvolutionCurrentLevel gt 0">
									<include_actions ref="LibraryEvolutionSetEQMods"/>
								</do_if>
							</do_if>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAEvolution -- Xenon have no stations.'" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryEvolutionSetEQMods">
					<actions>
						<do_if value="$DADVT.$DAEvolutionCurrentLevel ge 0">
							<!-- $DADVT.$DAEvolutionCurrentEQMods {1}Engine {2}Ship {3}Shield {4}Weapon {5}Missile {6}Eco -->
							<do_if value="$DADVT.$DAEvolutionCurrentLevel == 1">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_1_da,ware.mod_ship_xenon_1_da,ware.mod_shield_xenon_1_da,ware.mod_weapon_xenon_1_da,ware.mod_weapon_xenon_missile_1_da,ware.mod_ship_xenon_eco_1_da]"/>
							</do_if>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 2">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_2_da,ware.mod_ship_xenon_2_da,ware.mod_shield_xenon_2_da,ware.mod_weapon_xenon_2_da,ware.mod_weapon_xenon_missile_2_da,ware.mod_ship_xenon_eco_2_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 3">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_3_da,ware.mod_ship_xenon_3_da,ware.mod_shield_xenon_3_da,ware.mod_weapon_xenon_3_da,ware.mod_weapon_xenon_missile_3_da,ware.mod_ship_xenon_eco_3_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 4">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_4_da,ware.mod_ship_xenon_4_da,ware.mod_shield_xenon_4_da,ware.mod_weapon_xenon_4_da,ware.mod_weapon_xenon_missile_4_da,ware.mod_ship_xenon_eco_4_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 5">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_5_da,ware.mod_ship_xenon_5_da,ware.mod_shield_xenon_5_da,ware.mod_weapon_xenon_5_da,ware.mod_weapon_xenon_missile_5_da,ware.mod_ship_xenon_eco_5_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 6">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_6_da,ware.mod_ship_xenon_6_da,ware.mod_shield_xenon_6_da,ware.mod_weapon_xenon_6_da,ware.mod_weapon_xenon_missile_6_da,ware.mod_ship_xenon_eco_6_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 7">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_7_da,ware.mod_ship_xenon_7_da,ware.mod_shield_xenon_7_da,ware.mod_weapon_xenon_7_da,ware.mod_weapon_xenon_missile_7_da,ware.mod_ship_xenon_eco_7_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 8">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_8_da,ware.mod_ship_xenon_8_da,ware.mod_shield_xenon_8_da,ware.mod_weapon_xenon_8_da,ware.mod_weapon_xenon_missile_8_da,ware.mod_ship_xenon_eco_8_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 9">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_9_da,ware.mod_ship_xenon_9_da,ware.mod_shield_xenon_9_da,ware.mod_weapon_xenon_9_da,ware.mod_weapon_xenon_missile_9_da,ware.mod_ship_xenon_eco_9_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 10">
								<set_value name="$DADVT.$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_10_da,ware.mod_ship_xenon_10_da,ware.mod_shield_xenon_10_da,ware.mod_weapon_xenon_10_da,ware.mod_weapon_xenon_missile_10_da,ware.mod_ship_xenon_eco_10_da]"/>
							</do_elseif>
						</do_if>
					</actions>
				</library>
				<library name="LibraryEvolutionOrderXenonShips">
					<actions>
						<do_if value="$DADVT.$DAEvolutionMaxXenonJobs and $DADVT.$DAEvolutionXenonFleetSize and ($DADVT.$DAEvolutionXenonFleetSizeName != null)">
							<!-- string manipulation for job names -->
							<set_value name="$DAEvolutionXenonCarrierFleetJob" exact="'xenon_carrier_patrol_'"/>
							<set_value name="$DAEvolutionXenonDestroyerFleetJob" exact="'xenon_destroyer_patrol_'"/>
							<set_value name="$DAEvolutionXenonCarrierFleetJob" exact="$DADVT.$DAEvolutionXenonFleetSizeName" operation="add"/>
							<set_value name="$DAEvolutionXenonDestroyerFleetJob" exact="$DADVT.$DAEvolutionXenonFleetSizeName" operation="add"/>
							<do_if value="$DADVT.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- Xenon job names: %s -- %s.'.[$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob]" context="false" filter="scripts"/>
							</do_if>
							<!-- Find ship counts. -->
							<find_ship_by_true_owner groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers" faction="faction.xenon" job="$DAEvolutionXenonFleetJobs" checkoperational="true" space="player.galaxy" multiple="true" append="true"/>
							<include_actions ref="LibraryEvolutionCheckOperationalShips"/>
							<do_if value="$DADVT.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- Xenon ships active: %s -- Max Fleets %s'.[($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count),$DADVT.$DAEvolutionMaxXenonJobs]" context="false" filter="scripts"/>
							</do_if>
							<!-- Decide if we need more -->
							<!-- This count is more difficult than necessary due to ordered ships not being caught by find group above -->
							<do_if value="($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count) lt $DADVT.$DAEvolutionMaxXenonJobs">
								<!-- Find if Xenon can actually build ships -->
								<find_sector name="$DAEvolutionLocOwnedSectors" owner="faction.xenon" multiple="true" append="false"/>
								<do_if value="$DAEvolutionLocOwnedSectors.count" min="1">
									<find_station_by_true_owner name="$DAEvolutionLocShipyards" space="$DAEvolutionLocOwnedSectors" canbuildships="true" faction="faction.xenon" shipyard="true" multiple="true" required="true">
										<match_content class="class.buildmodule" checkoperational="true"/>
									</find_station_by_true_owner>
									<do_if value="$DADVT.$DAEvolutionDetailedDebug">
										<debug_text text="'MOD: DAEvolution -- Xenon shipyards: %s'.[$DAEvolutionLocShipyards.count]" context="false" filter="scripts"/>
									</do_if>
									<do_if value="$DAEvolutionLocShipyards.count" min="1">
										<do_if value="$DADVT.$DAEvolutionEnableFastOrder">
											<!-- Order multiple at a time -->
											<set_value name="$DAEvolutionLocNumberOfShipsToBuild" exact="[($DADVT.$DAEvolutionMaxXenonJobs - ($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count)),$DAEvolutionLocShipyards.count].min"/>
										</do_if>
										<do_else>
											<!-- Order one -->
											<set_value name="$DAEvolutionLocNumberOfShipsToBuild" exact="1"/>
										</do_else>
										<shuffle_list list="$DAEvolutionLocShipyards"/>
										<get_factions_by_relation result="$DAEvolutionLocXenonEnemies" faction="faction.xenon" relation="killmilitary"/>
										<do_all exact="$DAEvolutionLocNumberOfShipsToBuild" counter="$S">
											<set_value name="$DAEvolutionLocSelectedShipyard" exact="$DAEvolutionLocShipyards.{$S}"/>
											<!-- find closest sector bordering with relation le killmilitary -->
											<find_sector name="$DAEvolutionLocHostileSectors" space="player.galaxy" owner="$DAEvolutionLocXenonEnemies" reachablefrom="$DAEvolutionLocSelectedShipyard.sector" sortbygatedistanceto="$DAEvolutionLocSelectedShipyard" sortdescending="false" multiple="true"/>
											<!-- get closest Xenon sector from hostile sectors -->
											<do_for_each name="$DAEvolutionLocHostileSector" in="$DAEvolutionLocHostileSectors">
												<find_sector_in_range name="$DAEvolutionLocSectorsInRange" object="$DAEvolutionLocHostileSector" maxdistance="1" owner="faction.xenon" multiple="true"/>
												<do_if value="$DAEvolutionLocSectorsInRange.count" min="1">
													<sort_list list="$DAEvolutionLocSectorsInRange" sortbyvalue="loop.element.gatedistance.{$DAEvolutionLocSelectedShipyard}"/>
													<set_value name="$DAEvolutionLocSelectedSector" exact="$DAEvolutionLocSectorsInRange.{1}"/>
													<find_gate name="$DAEvolutionLocGate" space="$DAEvolutionLocSelectedSector" active="true" multiple="false" append="false"/>
													<find_zone name="$DAEvolutionLocZone" space="$DAEvolutionLocSelectedSector" normalzone="true" multiple="false" append="false">
														<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
													</find_zone>
													<do_if value="$DAEvolutionLocGate">
														<do_if value="$DADVT.$DAEvolutionDetailedDebug">
															<debug_text text="'MOD: DAEvolution -- Selected Shipyard in: %s -- Selected Xenon sector: %s'.[$DAEvolutionLocSelectedShipyard.sector.knownname,$DAEvolutionLocSelectedSector.knownname]" context="false" filter="scripts"/>
														</do_if>
														<break/>
													</do_if>
												</do_if>
											</do_for_each>
											<do_if value="@$DAEvolutionLocGate">
												<!-- We have the job, sector, gate for zone -->
												<set_value name="$LocEvoJob" exact="[$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob].random"/>
												<!-- event.param = [$JobID,$Shipyard,$JobMainZone] -->
												<signal_cue_instantly cue="EventEvolutionRequestJobShip" param="[$LocEvoJob,$DAEvolutionLocSelectedSector,$DAEvolutionLocGate.zone]"/>
												<do_if value="$DADVT.$DAEvolutionDetailedDebug">
													<debug_text text="'MOD: DAEvolution -- Requested %s ship with gate -- ShipyardSector: %s -- JobMainSector: %s.'.[$LocEvoJob,$DAEvolutionLocSelectedSector.knownname,$DAEvolutionLocGate.sector.knownname]" context="false" filter="scripts"/>
												</do_if>
												<remove_value name="$LocEvoJob"/>
											</do_if>
											<do_elseif value="@$DAEvolutionLocZone">
												<!-- We do not have the gate for zone -->
												<set_value name="$LocEvoJob" exact="[$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob].random"/>
												<!-- event.param = [$JobID,$Shipyard,$JobMainZone] -->
												<signal_cue_instantly cue="EventEvolutionRequestJobShip" param="[$LocEvoJob,$DAEvolutionLocSelectedSector,$DAEvolutionLocZone]"/>
												<do_if value="$DADVT.$DAEvolutionDetailedDebug">
													<debug_text text="'MOD: DAEvolution -- Requested %s ship with sector and zone -- ShipyardSector: %s -- JobMainSector: %s.'.[$LocEvoJob,$DAEvolutionLocSelectedSector.knownname,$DAEvolutionLocZone.sector.knownname]" context="false" filter="scripts"/>
												</do_if>
												<remove_value name="$LocEvoJob"/>
											</do_elseif>
											<remove_value name="$DAEvolutionLocSelectedShipyard"/>
											<remove_value name="$DAEvolutionLocHostileSectors"/>
											<remove_value name="$DAEvolutionLocHostileSector"/>
											<remove_value name="$DAEvolutionLocSectorsInRange"/>
											<remove_value name="$DAEvolutionLocSelectedSector"/>
											<remove_value name="$DAEvolutionLocGate"/>
											<remove_value name="$DAEvolutionLocZone"/>
										</do_all>
										<remove_value name="$DAEvolutionLocNumberOfShipsToBuild"/>
									</do_if>
									<remove_value name="$DAEvolutionLocXenonEnemies"/>
									<remove_value name="$DAEvolutionLocShipyards"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAEvolution -- Xenon has no sectors.'" context="true" filter="error"/>
								</do_else>
								<remove_value name="$DAEvolutionLocOwnedSectors"/>
							</do_if>
							<do_elseif value="$DADVT.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- Xenon ships at or above max, skipping activation.'" context="false" filter="scripts"/>
							</do_elseif>
							<remove_value name="$DAEvolutionXenonCarrierFleetJob"/>
							<remove_value name="$DAEvolutionXenonDestroyerFleetJob"/>
							<remove_value name="$DAEvolutionXenonCarrierFleetJobNumbers"/>
							<remove_value name="$DAEvolutionXenonDestroyerFleetJobNumbers"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAEvolution -- ERROR: Missing Var for Xenon Jobs. $DADVT.$DAEvolutionMaxXenonJobs %s -- $DAEvolutionXenonFleetSizeSmall %s -- $DAEvolutionXenonFleetSizeMedium %s -- $DAEvolutionXenonFleetSizeLarge %s'.[$DADVT.$DAEvolutionMaxXenonJobs,$DAEvolutionXenonFleetSizeSmall,$DAEvolutionXenonFleetSizeMedium,$DAEvolutionXenonFleetSizeLarge]" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryEvolutionCheckOperationalShips">
					<actions>
						<!-- Check if ships in list are in group yet -->
						<!-- $DADVT.$DAEvolutionXenonFleetJobNumbers contains ships found by find_ships in LibraryEvolutionOrderXenonShips -->
						<!-- $DADVT.$DAEvolutionXenonShipGroup should contain all operational -->
						<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.count or $DADVT.$DAEvolutionXenonShipTempList.count or $DADVT.$DAEvolutionXenonShipGroup.count">
							<do_if value="$DADVT.$DAEvolutionXenonShipTempList.count" min="1">
								<!-- These are ships ordered, but may not be operational -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonShipTempList" reverse="true">
									<do_if value="(not $DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}) and ($DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip})">
										<add_to_group groupname="$DADVT.$DAEvolutionXenonShipGroup" object="$DAEvolutionLocXShip"/>
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Add to $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonShipTempList -- Ship: %s (%s) -- Job: %s -- Location: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
									<do_elseif value="($DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}) or ($DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip})">
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Removing operational ship from temp list -- Ship: %s (%s) -- Job: %s -- Location: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
									</do_elseif>
									<do_else>
										<!-- this ship should not be active in this case -->
									</do_else>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
							</do_if>
							<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.count" min="1">
								<!-- These are ships found in the find_ships search -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonFleetJobNumbers" reverse="true">
									<do_if value="$DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}">
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonFleetJobNumbers -- Ship: %s (%s) -- Job: %s -- Location: %s -- Subordinates: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname,$DAEvolutionLocXShip.subordinates.count]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
									<do_elseif value="not $DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}">
										<add_to_group groupname="$DADVT.$DAEvolutionXenonShipGroup" object="$DAEvolutionLocXShip"/>
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Add to $DADVT.$DAEvolutionXenonShipGroup -- Ship: %s (%s) -- Job: %s -- Location: %s -- Subordinates: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname,$DAEvolutionLocXShip.subordinates.count]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_elseif>
									<do_else>
										<!-- We should never reach here -->
									</do_else>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
							</do_if>
							<do_if value="$DADVT.$DAEvolutionXenonShipGroup.count" min="1">
								<!-- These are ships found by event_job_ship_activated -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonShipGroup">
									<do_if value="$DADVT.$DAEvolutionXenonShipTempList.indexof.{$DAEvolutionLocXShip}">
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonShipTempList -- Ship: %s (%s) -- Job: %s -- Location: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
									</do_if>
									<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip}">
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<debug_text text="'MOD: DAEvolution -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonFleetJobNumbers -- Ship: %s (%s) -- Job: %s -- Location: %s'.[$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
								<!-- Moved restock to when ship is activated -->
							</do_if>
							<do_if value="$DADVT.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- Xenon ship count by variable -- $DADVT.$DAEvolutionXenonShipGroup.count: %s -- $DADVT.$DAEvolutionXenonFleetJobNumbers.count: %s -- $DADVT.$DAEvolutionXenonShipTempList.count: %s'.[$DADVT.$DAEvolutionXenonShipGroup.count,$DADVT.$DAEvolutionXenonFleetJobNumbers.count,$DADVT.$DAEvolutionXenonShipTempList.count]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
					</actions>
				</library>
				<!-- Evolution // Variable Check Libraries -->
				<library name="LibraryCheckEvolutionVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAEvolutionEnable? or (not ((typeof $DADVT.$DAEvolutionEnable == datatype.integer) and (($DADVT.$DAEvolutionEnable == 1) or ($DADVT.$DAEvolutionEnable == 0))))">
							<set_value name="$DADVT.$DAEvolutionEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionInterval? or (not ($DADVT.$DAEvolutionInterval gt 0))">
							<set_value name="$DADVT.$DAEvolutionInterval" exact="240"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionMaxLevel? or ($DADVT.$DAEvolutionMaxLevel != 10)">
							<set_value name="$DADVT.$DAEvolutionMaxLevel" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvoltuionPlayerMaxSetting? or (not ($DADVT.$DAEvoltuionPlayerMaxSetting gt 0))">
							<set_value name="$DADVT.$DAEvoltuionPlayerMaxSetting" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionCurrentLevel? or (not ($DADVT.$DAEvolutionCurrentLevel ge 0))">
							<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionCurrentEQMods? or ($DADVT.$DAEvolutionCurrentEQMods == null)">
							<create_list name="$DADVT.$DAEvolutionCurrentEQMods"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAEvolutionLastUpgradeTime? or (not (typeof $DAEvolutionLastUpgradeTime == datatype.time))">
							<set_value name="$DAEvolutionLastUpgradeTime" exact="0s"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableJobs? or (not ((typeof $DADVT.$DAEvolutionEnableJobs == datatype.integer) and (($DADVT.$DAEvolutionEnableJobs == 1) or ($DADVT.$DAEvolutionEnableJobs == 0))))">
							<set_value name="$DADVT.$DAEvolutionEnableJobs" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionMaxXenonJobs? or (not ($DADVT.$DAEvolutionMaxXenonJobs gt 0))">
							<set_value name="$DADVT.$DAEvolutionMaxXenonJobs" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetSize? or (not ($DADVT.$DAEvolutionXenonFleetSize gt 0))">
							<set_value name="$DADVT.$DAEvolutionXenonFleetSize" exact="2"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetSizeName? or ($DADVT.$DAEvolutionXenonFleetSizeName == null)">
							<set_value name="$DADVT.$DAEvolutionXenonFleetSizeName" exact="'daevoxen_medium'"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonShipGroup? or ($DADVT.$DAEvolutionXenonShipGroup == null)">
							<create_group groupname="$DADVT.$DAEvolutionXenonShipGroup"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetJobNumbers? or ($DADVT.$DAEvolutionXenonFleetJobNumbers == null)">
							<create_group groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonShipTempList? or ($DADVT.$DAEvolutionXenonShipTempList == null)">
							<create_list name="$DADVT.$DAEvolutionXenonShipTempList"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAEvolutionXenonFleetJobs? or ($DAEvolutionXenonFleetJobs == null)">
							<set_value name="$DAEvolutionXenonFleetJobs" exact="['xenon_carrier_patrol_daevoxen_small','xenon_destroyer_patrol_daevoxen_small','xenon_carrier_patrol_daevoxen_medium','xenon_destroyer_patrol_daevoxen_medium','xenon_carrier_patrol_daevoxen_large','xenon_destroyer_patrol_daevoxen_large']"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionDetailedDebug? or (not ((typeof $DADVT.$DAEvolutionDetailedDebug == datatype.integer) and (($DADVT.$DAEvolutionDetailedDebug == 1) or ($DADVT.$DAEvolutionDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAEvolutionDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionTotalShipsBuilt? or (not ($DADVT.$DAEvolutionTotalShipsBuilt ge 0))">
							<set_value name="$DADVT.$DAEvolutionTotalShipsBuilt" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableUpgradeStations? or (not ((typeof $DADVT.$DAEvolutionEnableUpgradeStations == datatype.integer) and (($DADVT.$DAEvolutionEnableUpgradeStations == 1) or ($DADVT.$DAEvolutionEnableUpgradeStations == 0))))">
							<set_value name="$DADVT.$DAEvolutionEnableUpgradeStations" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableFastOrder? or (not ((typeof $DADVT.$DAEvolutionEnableFastOrder == datatype.integer) and (($DADVT.$DAEvolutionEnableFastOrder == 1) or ($DADVT.$DAEvolutionEnableFastOrder == 0))))">
							<set_value name="$DADVT.$DAEvolutionEnableFastOrder" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionStations? or ($DADVT.$DAEvolutionStations == null)">
							<create_group groupname="$DADVT.$DAEvolutionStations"/>
							<find_station_by_true_owner groupname="$DADVT.$DAEvolutionStations" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true">
								<match_any>
									<match shipyard="true"/>
									<match wharf="true"/>
								</match_any>
							</find_station_by_true_owner>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionStationProgress? or ($DADVT.$DAEvolutionStationProgress == null)">
							<set_value name="$DADVT.$DAEvolutionStationProgress" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAEvolution -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Fill // Timer Cues -->
				<cue name="TimerFill" instantiate="true" checkinterval="5min" checktime="5min" comment="Timer 45 default">
					<conditions>
						<check_value value="$DADVT.$DAFillEnable"/>
					</conditions>
					<actions>
						<do_if value="(not $DAFillLastCheckTime?) or (player.age ge ($DAFillLastCheckTime + ($DADVT.$DAFillCheckInterval)min))">
							<set_value name="$DAFillLastCheckTime" exact="player.age"/>
							<do_if value="$DADVT.$DAFillDetailedDebug">
								<debug_text text="'MOD: DAFill -- TimerFill -- Starting Fill Script'" context="false" filter="scripts"/>
							</do_if>
							<do_if value="@$DADVT.$DAFillShipModsEnable and @$DADVT.$DAFillShipModPaintEnable">
								<include_actions ref="LibraryFillSetPaintMods"/>
							</do_if>
							<do_if value="($DADVT.$DAFillMaxTSWarePercent lt 100) or ($DADVT.$DAFillMinTSWarePercent gt 0)">
								<signal_cue_instantly cue="EventFillTradeStations"/>
							</do_if>
							<do_if value="($DADVT.$DAFillMinSYWarePercent gt 0) or $DADVT.$DAFillXenonProtection">
								<signal_cue_instantly cue="EventFillShipStations"/>
							</do_if>
						</do_if>
					</actions>
				</cue>
				<!-- Fill // Event cues -->
				<cue name="EventFillTradeStations" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="$DADVT.$DAFillMaxTSWarePercent lt 100">
							<find_station groupname="$DADrainTradeStations" multiple="true" space="player.galaxy" functional="true">
								<match owner="faction.player" negate="true"/>
								<match owner="$DADVT.$DAFillTSExcludedFactions" negate="true"/>
								<match_any>
									<match tradestation="true"/>
									<match piratebase="true"/>
								</match_any>
							</find_station>
						</do_if>
						<do_if value="$DADVT.$DAFillMinTSWarePercent gt 0">
							<find_station groupname="$DAFillTradeStations" multiple="true" space="player.galaxy" functional="true">
								<match owner="faction.player" negate="true"/>
								<match owner="$DADVT.$DAFillTSExcludedFactions" negate="true"/>
								<match_any>
									<match tradestation="true"/>
									<match piratebase="true"/>
								</match_any>
							</find_station>
						</do_if>
						<do_if value="$DADVT.$DAFillDetailedDebug">
							<debug_text text="'MOD: DAFill -- EventFillTradeStations -- Drain %s tradestations -- Fill %s tradestations'.[@$DADrainTradeStations.count,@$DAFillTradeStations.count]" context="false" filter="scripts"/>
						</do_if>
						<do_if value="@$DADrainTradeStations.count" min="1">
							<set_value name="$DAFillFactionsModded" exact="[]"/>
						</do_if>
						<do_elseif value="@$DAFillTradeStations.count" min="1">
							<!-- NOTHING YET -->
						</do_elseif>
						<do_else>
							<do_if value="$DADVT.$DAFillDetailedDebug">
								<debug_text text="'MOD: DAFill -- EventFillTradeStations -- No tradestations to check.'" context="false" filter="scripts"/>
							</do_if>
							<cancel_cue cue="EventFillTradeStations"/>
						</do_else>
					</actions>
					<cues>
						<cue name="FillTradeStationDrainLoop">
							<delay exact="2s"/>
							<actions>
								<do_if value="@$DADrainTradeStations.count" min="1">
									<set_value name="$DAFillLocStation" exact="$DADrainTradeStations.{1}"/>
									<do_if value="$DADVT.$DAFillDetailedDebug">
										<debug_text text="'MOD: DAFill -- FillTradeStationDrainLoop -- Draining %s(%s) in %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname]" context="false" filter="scripts"/>
									</do_if>
									<include_actions ref="LibraryDrainTradeStation"/>
									<remove_from_group group="$DADrainTradeStations" object="$DAFillLocStation"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<remove_value name="$DAFillLocStation"/>
									<remove_value name="$DAFillFactionsModded"/>
									<do_if value="$DADVT.$DAFillDetailedDebug">
										<debug_text text="'MOD: DAFill -- FillTradeStationDrainLoop -- Completed tradestations drain.'" context="false" filter="scripts"/>
									</do_if>
									<do_if value="@$DAFillTradeStations.count">
										<signal_cue_instantly cue="FillTradeStationFillEvent"/>
									</do_if>
									<do_else>
										<do_if value="$DADVT.$DAFillDetailedDebug">
											<debug_text text="'MOD: DAFill -- FillTradeStationDrainLoop -- Completed Fill tradestation script.'" context="false" filter="scripts"/>
										</do_if>
										<cancel_cue cue="EventFillTradeStations"/>
									</do_else>
								</do_else>
							</actions>
						</cue>
						<cue name="FillTradeStationFillEvent">
							<conditions>
								<event_cue_signalled/>
							</conditions>
							<actions>
								<do_if value="$DADVT.$DAFillDetailedDebug">
									<debug_text text="'MOD: DAFill -- FillTradeStationFillEvent -- Signalled! -- Fill %s tradestations'.[@$DAFillTradeStations.count]" context="false" filter="scripts"/>
								</do_if>
							</actions>
							<cues>
								<cue name="FillTradeStationFillLoop">
									<delay exact="2s"/>
									<actions>
										<do_if value="@$DAFillTradeStations.count" min="1">
											<set_value name="$DAFillLocStation" exact="$DAFillTradeStations.{1}"/>
											<do_if value="$DADVT.$DAFillDetailedDebug">
												<debug_text text="'MOD: DAFill -- FillTradeStationFillLoop -- Filling %s(%s) in %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname]" context="false" filter="scripts"/>
											</do_if>
											<include_actions ref="LibraryFillTradeStation"/>
											<remove_from_group group="$DAFillTradeStations" object="$DAFillLocStation"/>
											<reset_cue cue="this"/>
										</do_if>
										<do_else>
											<do_if value="$DADVT.$DAFillDetailedDebug">
												<debug_text text="'MOD: DAFill -- FillTradeStationFillLoop -- Completed Fill tradestation script.'" context="false" filter="scripts"/>
											</do_if>
											<remove_value name="$DAFillLocStation"/>
											<cancel_cue cue="EventFillTradeStations"/>
										</do_else>
									</actions>
								</cue>
							</cues>
						</cue>
					</cues>
				</cue>
				<cue name="EventFillShipStations" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="$DADVT.$DAFillMinSYWarePercent gt 0">
							<find_station groupname="$DAFillShipStations" multiple="true" space="player.galaxy" functional="true">
								<match owner="faction.player" negate="true"/>
								<match owner="$DADVT.$DAFillSYWExcludedFactions" negate="true"/>
								<match_any>
									<match shipyard="true"/>
									<match wharf="true"/>
									<match equipmentdock="true"/>
								</match_any>
							</find_station>
						</do_if>
						<do_if value="$DADVT.$DAFillXenonProtection">
							<find_station_by_true_owner groupname="$DAFillShipStations" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true">
								<match_any>
									<match shipyard="true"/>
									<match wharf="true"/>
									<match equipmentdock="true"/>
								</match_any>
							</find_station_by_true_owner>
						</do_if>
						<do_if value="$DADVT.$DAFillDetailedDebug">
							<debug_text text="'MOD: DAFill -- EventFillShipStations -- Fixing/Filling %s ship stations'.[$DAFillShipStations.count]" context="false" filter="scripts"/>
						</do_if>
						<do_if value="@$DAFillShipStations.count" min="1">
							<!-- NOTHING YET -->
						</do_if>
						<do_else>
							<do_if value="$DADVT.$DAFillDetailedDebug">
								<debug_text text="'MOD: DAFill -- EventFillShipStations -- No ship stations to check.'" context="false" filter="scripts"/>
							</do_if>
							<cancel_cue cue="EventFillShipStations"/>
						</do_else>
					</actions>
					<cues>
						<cue name="FillShipStationLoop">
							<delay exact="2s"/>
							<actions>
								<do_if value="@$DAFillShipStations.count" min="1">
									<set_value name="$DAFillLocStation" exact="$DAFillShipStations.{1}"/>
									<do_if value="$DADVT.$DAFillDetailedDebug">
										<debug_text text="'MOD: DAFill -- FillShipStationLoop -- Fixing/Filling %s(%s) in %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname]" context="false" filter="scripts"/>
									</do_if>
									<include_actions ref="LibraryFillCheckForInvalidWares"/>
									<include_actions ref="LibraryFillShipStation"/>
									<remove_from_group group="$DAFillShipStations" object="$DAFillLocStation"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<do_if value="$DADVT.$DAFillDetailedDebug">
										<debug_text text="'MOD: DAFill -- FillShipStationLoop -- Completed Fill ship station script.'" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$DAFillLocStation"/>
									<cancel_cue cue="EventFillShipStations"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Fill // Functional Libraries -->
				<library name="LibraryDrainTradeStation">
					<actions>
						<do_if value="$DAFillLocStation.exists">
							<do_if value="not $DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
								<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="0ct"/>
							</do_if>
							<set_value name="$DAFillLocAddShipMod" exact="false"/>
							<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.tradewares.list">
								<do_if value="not $DADVT.$DAFillWareStatistics.{$DAFillLocWare}?">
									<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}" exact="[0,0]" comment="Added Removed"/>
								</do_if>
								<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
								<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
								<set_value name="$DAFillLocRemoveWareAmount" exact="0"/>
								<set_value name="$DAFillLocAmountRemoved" exact="0"/>
								<do_if value="$DAFillLocWareAmount gt (($DAFillLocMaxWareAmount * ($DADVT.$DAFillMaxTSWarePercent / 100.0))i)">
									<set_value name="$DAFillLocRemoveWareAmount" exact="$DAFillLocWareAmount - ($DAFillLocMaxWareAmount * ($DADVT.$DAFillMaxTSWarePercentAfter / 100.0))i"/>
									<do_if value="$DAFillLocRemoveWareAmount" min="1">
										<remove_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocRemoveWareAmount" result="$DAFillLocAmountRemoved"/>
										<do_if value="$DAFillLocAmountRemoved" min="1">
											<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}.{2}" exact="$DAFillLocAmountRemoved" operation="add"/>
											<set_value name="$DAFillLocAddShipMod" exact="true"/>
											<do_if value="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
												<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="$DAFillLocAmountRemoved * $DAFillLocWare.averageprice" operation="add"/>
											</do_if>
											<do_if value="$DADVT.$DAFillDetailedDebug">
												<debug_text text="'MOD: DAFill -- LibraryDrainTradeStation -- %s(%s) in %s -- Removed %s units of %s -- Attempted Amount: %s -- Remaining: %s -- Target: %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname,$DAFillLocAmountRemoved,$DAFillLocWare.name,$DAFillLocRemoveWareAmount,@$DAFillLocStation.cargo.{$DAFillLocWare}.count,@$DAFillLocStation.cargo.{$DAFillLocWare}.target]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
							</do_for_each>
							<do_if value="$DADVT.$DAFillShipModsEnable and $DAFillLocAddShipMod and (not $DAFillFactionsModded.indexof.{$DAFillLocStation.trueowner})">
								<include_actions ref="LibraryFillAddShipMod"/>
								<append_to_list name="$DAFillFactionsModded" exact="$DAFillLocStation.trueowner"/>
								<set_value name="$DAFillLocAddShipMod" exact="false"/>
							</do_if>
							<do_else>
								<set_value name="$DAFillLocAddShipMod" exact="false"/>
							</do_else>
							<remove_value name="$DAFillLocWare"/>
							<remove_value name="$DAFillLocWareAmount"/>
							<remove_value name="$DAFillLocMaxWareAmount"/>
							<remove_value name="$DAFillLocRemoveWareAmount"/>
							<remove_value name="$DAFillLocAmountRemoved"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryFillTradeStation">
					<actions>
						<do_if value="$DAFillLocStation.exists">
							<do_if value="not $DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
								<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="0ct"/>
							</do_if>
							<!-- Logic for sorting by lowest percent to highest -->
							<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.tradewares.list">
								<do_if value="not $DADVT.$DAFillWareStatistics.{$DAFillLocWare}?">
									<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}" exact="[0,0]" comment="Added Removed"/>
								</do_if>
								<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
								<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
								<set_value name="$DAFillLocAddWareAmount" exact="0"/>
								<set_value name="$DAFillLocAmountAdded" exact="0"/>
								<do_if value="$DAFillLocWareAmount lt (($DAFillLocMaxWareAmount * ($DADVT.$DAFillMinTSWarePercent / 100.0))i)">
									<do_if value="@$DADVT.$DAFillLimitByValue">
										<set_value name="$DAFillLocDesiredWareAmount" exact="(($DAFillLocMaxWareAmount * ($DADVT.$DAFillMinTSWarePercentAfter / 100.0))i) - $DAFillLocWareAmount"/>
										<set_value name="$DAFillLocAffordableAmount" exact="($DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner} / $DAFillLocWare.averageprice)i"/>
										<set_value name="$DAFillLocAddWareAmount" exact="[[$DAFillLocDesiredWareAmount,$DAFillLocAffordableAmount].min,0].max"/>
									</do_if>
									<do_else>
										<set_value name="$DAFillLocAddWareAmount" exact="(($DAFillLocMaxWareAmount * ($DADVT.$DAFillMinTSWarePercentAfter / 100.0))i) - $DAFillLocWareAmount"/>
									</do_else>
									<do_if value="$DAFillLocAddWareAmount" min="1">
										<add_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocAddWareAmount" result="$DAFillLocAmountAdded"/>
										<do_if value="$DAFillLocAmountAdded" min="1">
											<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}.{1}" exact="$DAFillLocAmountAdded" operation="add"/>
											<do_if value="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
												<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="$DAFillLocAmountAdded * $DAFillLocWare.averageprice" operation="subtract"/>
											</do_if>
											<do_if value="$DADVT.$DAFillDetailedDebug">
												<debug_text text="'MOD: DAFill -- LibraryFillTradeStation -- %s(%s) in %s -- Added %s units of %s -- Attempted Amount: %s -- Desired Amount: %s -- Affordable Amount: %s -- InCargo: %s -- Target: %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname,$DAFillLocAmountAdded,$DAFillLocWare.name,$DAFillLocAddWareAmount,@$DAFillLocDesiredWareAmount,@$DAFillLocAffordableAmount,@$DAFillLocStation.cargo.{$DAFillLocWare}.count,@$DAFillLocStation.cargo.{$DAFillLocWare}.target]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
							</do_for_each>
							<remove_value name="$DAFillLocWare"/>
							<remove_value name="$DAFillLocWareAmount"/>
							<remove_value name="$DAFillLocMaxWareAmount"/>
							<remove_value name="$DAFillLocAddWareAmount"/>
							<remove_value name="$DAFillLocDesiredWareAmount"/>
							<remove_value name="$DAFillLocAffordableAmount"/>
							<remove_value name="$DAFillLocAmountAdded"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryFillCheckForInvalidWares">
					<actions>
						<do_if value="$DAFillLocStation.exists">
							<do_if value="not $DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
								<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="0ct"/>
							</do_if>
							<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.cargo.list">
								<do_if value="not $DADVT.$DAFillWareStatistics.{$DAFillLocWare}?">
									<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}" exact="[0,0]" comment="Added Removed"/>
								</do_if>
								<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
								<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
								<set_value name="$DAFillLocRemoveWareAmount" exact="0"/>
								<set_value name="$DAFillLocAmountRemoved" exact="0"/>
								<do_if value="$DAFillLocWareAmount gt $DAFillLocMaxWareAmount">
									<set_value name="$DAFillLocRemoveWareAmount" exact="($DAFillLocWareAmount - $DAFillLocMaxWareAmount)i"/>
									<do_if value="$DAFillLocRemoveWareAmount" min="1">
										<remove_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocRemoveWareAmount" result="$DAFillLocAmountRemoved"/>
										<do_if value="$DAFillLocAmountRemoved" min="1">
											<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}.{2}" exact="$DAFillLocRemoveWareAmount" operation="add"/>
											<do_if value="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
												<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="$DAFillLocAmountRemoved * $DAFillLocWare.averageprice" operation="add"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
								<do_if value="$DAFillLocAmountRemoved" min="1">
									<debug_text text="'MOD: DAFill -- LibraryFillCheckForInvalidWares Fix -- %s(%s) in %s -- Removed %s units of %s -- Attempted Amount: %s -- Remaining: %s -- Target: %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname,$DAFillLocAmountRemoved,$DAFillLocWare.name,$DAFillLocRemoveWareAmount,@$DAFillLocStation.cargo.{$DAFillLocWare}.count,@$DAFillLocStation.cargo.{$DAFillLocWare}.target]" context="false" filter="scripts"/>
								</do_if>
							</do_for_each>
							<remove_value name="$DAFillLocWare"/>
							<remove_value name="$DAFillLocWareAmount"/>
							<remove_value name="$DAFillLocMaxWareAmount"/>
							<remove_value name="$DAFillLocRemoveWareAmount"/>
							<remove_value name="$DAFillLocAmountRemoved"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryFillShipStation">
					<actions>
						<do_if value="$DAFillLocStation.exists">
							<do_if value="not $DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
								<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="0ct"/>
							</do_if>
							<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.resources.list">
								<do_if value="not $DADVT.$DAFillWareStatistics.{$DAFillLocWare}?">
									<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}" exact="[0,0]" comment="Added Removed"/>
								</do_if>
								<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
								<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
								<do_if value="(($DADVT.$DAFillMinSYWarePercent lt 20) or ($DADVT.$DAFillMinSYWarePercentAfter lt 25)) and $DADVT.$DAFillXenonProtection and ($DAFillLocStation.trueowner == faction.xenon)">
									<set_value name="$DAFillLocMinWarePercent" exact="25"/>
									<set_value name="$DAFillLocMinWarePercentAfter" exact="25"/>
								</do_if>
								<do_else>
									<set_value name="$DAFillLocMinWarePercent" exact="$DADVT.$DAFillMinSYWarePercent"/>
									<set_value name="$DAFillLocMinWarePercentAfter" exact="$DADVT.$DAFillMinSYWarePercentAfter"/>
								</do_else>
								<set_value name="$DAFillLocAddWareAmount" exact="0"/>
								<set_value name="$DAFillLocAmountAdded" exact="0"/>
								<set_value name="$DAFillLocRemoveWareAmount" exact="0"/>
								<set_value name="$DAFillLocAmountRemoved" exact="0"/>
								<do_if value="$DAFillLocWareAmount gt $DAFillLocMaxWareAmount">
									<set_value name="$DAFillLocRemoveWareAmount" exact="($DAFillLocWareAmount - $DAFillLocMaxWareAmount)i"/>
									<do_if value="$DAFillLocRemoveWareAmount" min="1">
										<remove_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocRemoveWareAmount" result="$DAFillLocAmountRemoved"/>
										<do_if value="$DAFillLocAmountRemoved" min="1">
											<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}.{2}" exact="$DAFillLocRemoveWareAmount" operation="add"/>
											<do_if value="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}?">
												<set_value name="$DADVT.$DAFillFactionAccounts.{$DAFillLocStation.trueowner}" exact="$DAFillLocAmountRemoved * $DAFillLocWare.averageprice" operation="add"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
								<do_if value="$DAFillLocWareAmount lt (($DAFillLocMaxWareAmount * ($DAFillLocMinWarePercent / 100.0))i)">
									<set_value name="$DAFillLocAddWareAmount" exact="(($DAFillLocMaxWareAmount * ($DAFillLocMinWarePercentAfter / 100.0))i) - $DAFillLocWareAmount"/>
									<do_if value="$DAFillLocAddWareAmount" min="1">
										<add_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocAddWareAmount" result="$DAFillLocAmountAdded"/>
										<do_if value="$DAFillLocAmountAdded" min="1">
											<set_value name="$DADVT.$DAFillWareStatistics.{$DAFillLocWare}.{1}" exact="$DAFillLocAmountAdded" operation="add"/>
											<do_if value="md.$DAShipyardWharfTable.{$DAFillLocStation}.{$DAFillLocWare}.$TradeAmount?">
												<set_value name="md.$DAShipyardWharfTable.{$DAFillLocStation}.{$DAFillLocWare}.$TradeAmount" exact="$DAFillLocAmountAdded" operation="add"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
								<do_if value="$DADVT.$DAFillDetailedDebug">
									<do_if value="$DAFillLocAmountRemoved" min="1">
										<debug_text text="'MOD: DAFill -- LibraryFillShipStation Fix -- %s(%s) in %s -- Removed %s units of %s -- Attempted Amount: %s -- Remaining: %s -- Target: %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname,$DAFillLocAmountRemoved,$DAFillLocWare.name,$DAFillLocRemoveWareAmount,@$DAFillLocStation.cargo.{$DAFillLocWare}.count,@$DAFillLocStation.cargo.{$DAFillLocWare}.target]" context="false" filter="scripts"/>
									</do_if>
									<do_if value="$DAFillLocAmountAdded" min="1">
										<debug_text text="'MOD: DAFill -- LibraryFillShipStation Fill -- %s(%s) in %s -- Added %s units of %s -- Attempted Amount: %s -- Remaining: %s -- Target: %s'.[$DAFillLocStation.knownname,$DAFillLocStation.idcode,$DAFillLocStation.sector.knownname,$DAFillLocAmountAdded,$DAFillLocWare.name,$DAFillLocAddWareAmount,@$DAFillLocStation.cargo.{$DAFillLocWare}.count,@$DAFillLocStation.cargo.{$DAFillLocWare}.target]" context="false" filter="scripts"/>
									</do_if>
								</do_if>
							</do_for_each>
							<remove_value name="$DAFillLocWare"/>
							<remove_value name="$DAFillLocWareAmount"/>
							<remove_value name="$DAFillLocMaxWareAmount"/>
							<remove_value name="$DAFillLocMinWarePercent"/>
							<remove_value name="$DAFillLocMinWarePercentAfter"/>
							<remove_value name="$DAFillLocAddWareAmount"/>
							<remove_value name="$DAFillLocAmountAdded"/>
							<remove_value name="$DAFillLocRemoveWareAmount"/>
							<remove_value name="$DAFillLocAmountRemoved"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryFillAddShipMod">
					<actions>
						<!-- Faction will get a mod for 1 combat (ship or fleet depends on option) and 1 economy ship each time -->
						<!-- DONE: Test tracking for number of ships upgraded. Working. -->
						<set_value name="$DAFillLocOwner" exact="$DAFillLocStation.trueowner"/>
						<set_value name="$DAFillLocHullMod" exact="[ware.mod_ship_mass_AI,ware.mod_ship_mass_AI_mk2,ware.mod_ship_mass_AI_mk1].random"/>
						<set_value name="$DAFillLocShieldMod" exact="[ware.mod_shield_capacity_AI,ware.mod_shield_capacity_AI_mk2,ware.mod_shield_capacity_AI_mk1].random"/>
						<set_value name="$DAFillLocEngineMod" exact="[ware.mod_engine_forwardthrust_AI,ware.mod_engine_forwardthrust_AI_mk2,ware.mod_engine_forwardthrust_AI_mk1].random"/>
						<set_value name="$DAFillLocWeaponMod" exact="[ware.mod_weapon_damage_AI,ware.mod_weapon_damage_AI_mk2,ware.mod_weapon_damage_AI_mk1].random"/>
						<set_value name="$DAFillLocMiningMod" exact="[ware.mod_weapon_mining_AI,ware.mod_weapon_mining_AI_mk2,ware.mod_weapon_mining_AI_mk1].random"/>
						<set_value name="$DAFillLocMissileMod" exact="[ware.mod_weapon_missile_AI,ware.mod_weapon_missile_AI_mk2,ware.mod_weapon_missile_AI_mk1].random"/>
						<set_value name="$DAFillLocMiningWeapons" exact="[@macro.turret_arg_l_mining_01_mk1_macro,@macro.turret_arg_m_mining_01_mk1_macro,@macro.turret_arg_m_mining_02_mk1_macro,@macro.turret_par_l_mining_01_mk1_macro,
							@macro.turret_par_m_mining_01_mk1_macro,@macro.turret_par_m_mining_02_mk1_macro,@macro.turret_tel_l_mining_01_mk1_macro,@macro.turret_tel_m_mining_01_mk1_macro,@macro.turret_tel_m_mining_02_mk1_macro,
							@macro.weapon_gen_m_mining_01_mk1_macro,@macro.weapon_gen_m_mining_01_mk2_macro,@macro.weapon_gen_s_mining_01_mk1_macro,@macro.weapon_gen_s_mining_01_mk2_macro,@macro.weapon_xen_m_mining_01_mk1_macro,
							@macro.turret_spl_l_mining_01_mk1_macro,@macro.turret_spl_m_mining_01_mk1_macro,@macro.turret_spl_m_mining_02_mk1_macro,@macro.turret_ter_l_mining_01_mk1_macro,@macro.turret_ter_m_mining_01_mk1_macro,
							@macro.turret_ter_m_mining_02_mk1_macro]"/>
						<do_if value="not $DADVT.$DAFillShipmodStatistics.{$DAFillLocOwner}?">
							<set_value name="$DADVT.$DAFillShipmodStatistics.{$DAFillLocOwner}" exact="[0,0]" comment="Military Civilian"/>
						</do_if>
						<!-- 20240318 Prioritize XL modding then L -->
						<find_ship_by_true_owner name="$DAFillLocMilShip" multiple="false" space="player.galaxy" validjobship="true" faction="$DAFillLocOwner" functional="true" docked="false" class="class.ship_xl" primarypurpose="purpose.fight">
							<match_any_equipment_mod negate="true"/>
						</find_ship_by_true_owner>
						<do_if value="not (@$DAFillLocMilShip and @$DAFillLocMilShip.exists)">
							<find_ship_by_true_owner name="$DAFillLocMilShip" multiple="false" space="player.galaxy" validjobship="true" faction="$DAFillLocOwner" functional="true" docked="false" class="class.ship_l" primarypurpose="purpose.fight">
								<match_any_equipment_mod negate="true"/>
							</find_ship_by_true_owner>
						</do_if>
						<find_ship_by_true_owner name="$DAFillLocEcoShip" multiple="false" space="player.galaxy" validjobship="true" faction="$DAFillLocOwner" functional="true" docked="false">
							<match_any>
								<match primarypurpose="purpose.trade"/>
								<match primarypurpose="purpose.build"/>
								<match primarypurpose="purpose.mine"/>
							</match_any>
							<match class="[class.ship_l, class.ship_xl]"/>
							<match_any_equipment_mod negate="true"/>
						</find_ship_by_true_owner>
						<do_if value="$DAFillLocMilShip.exists">
							<!-- 20240403 Added fleet modding option. Will probably have to deal with S/M differently -->
							<set_value name="$DAFillMilShips" exact="[]"/>
							<append_to_list name="$DAFillMilShips" exact="$DAFillLocMilShip"/>
							<do_if value="$DADVT.$DAFillShipModFleetEnable">
								<do_if value="$DAFillLocMilShip.allsubordinates.count" min="1">
									<do_for_each name="$LocSub" in="$DAFillLocMilShip.allsubordinates">
										<do_if value="$LocSub? and $LocSub.isoperational and $LocSub.isclass.ship and (not $LocSub.isunit) and (not $LocSub.isdeployable)">
											<do_if value="not ($LocSub.hasenginemod or $LocSub.hasweaponmod or $LocSub.hasshieldmod or $LocSub.hasshipmod)">
												<append_to_list name="$DAFillMilShips" exact="$LocSub"/>
											</do_if>
										</do_if>
									</do_for_each>
								</do_if>
							</do_if>
							<do_for_each name="$LocMilShip" in="$DAFillMilShips">
								<set_value name="$DAFillLocWeaponGroupTags" exact="[]"/>
								<set_value name="$DAFillLocWeaponMacros" exact="[]"/>
								<set_value name="$DAFillLocShieldGroupTags" exact="[]"/>
								<set_value name="$DAFillLocShieldMacros" exact="[]"/>
								<do_if value="@$DAFillLocEngineMod">
									<add_equipment_mods object="$LocMilShip">
										<engine ware="$DAFillLocEngineMod"/>
									</add_equipment_mods>
								</do_if>
								<do_if value="$DAFillLocHullMod">
									<add_equipment_mods object="$LocMilShip">
										<ship ware="$DAFillLocHullMod"/>
									</add_equipment_mods>
								</do_if>
								<do_if value="@$DAFillLocShieldMod">
									<do_for_each name="$DAFillLocShield" in="$LocMilShip.shields.all.list">
										<do_if value="($DAFillLocShield.grouptag) and (not $DAFillLocShieldGroupTags.indexof.{$DAFillLocShield.grouptag})">
											<add_equipment_mods object="$LocMilShip">
												<shield ware="$DAFillLocShieldMod" context="'..'" group="$DAFillLocShield.grouptag"/>
											</add_equipment_mods>
											<append_to_list name="$DAFillLocShieldGroupTags" exact="$DAFillLocShield.grouptag"/>
										</do_if>
									</do_for_each>
									<do_if value="not $LocMilShip.hasshieldmod">
										<add_equipment_mods object="$LocMilShip">
											<shield ware="$DAFillLocShieldMod"/>
										</add_equipment_mods>
									</do_if>
								</do_if>
								<do_if value="@$DAFillLocMissileMod and @$DAFillLocMiningMod and @$DAFillLocWeaponMod">
									<do_for_each name="$DAFillLocWeapon" in="$LocMilShip.weapons.all.list">
										<do_if value="@$DAFillLocWeapon.grouptag != null">
											<do_if value="not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag}">
												<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocMissileMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
													</add_equipment_mods>
												</do_if>
												<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocMiningMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
													</add_equipment_mods>
												</do_elseif>
												<do_else>
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocWeaponMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
													</add_equipment_mods>
												</do_else>
												<append_to_list name="$DAFillLocWeaponGroupTags" exact="$DAFillLocWeapon.grouptag"/>
											</do_if>
										</do_if>
										<do_elseif value="(@$DAFillLocWeapon.grouptag == null) and $DAFillLocWeapon.macro and (not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro})">
											<do_if value="not @$LocMilShip.hasweaponmod.{$DAFillLocWeapon.macro}">
												<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocMissileMod" macro="$DAFillLocWeapon.macro"/>
													</add_equipment_mods>
												</do_if>
												<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocMiningMod" macro="$DAFillLocWeapon.macro"/>
													</add_equipment_mods>
												</do_elseif>
												<do_else>
													<add_equipment_mods object="$LocMilShip">
														<weapon ware="$DAFillLocWeaponMod" macro="$DAFillLocWeapon.macro"/>
													</add_equipment_mods>
												</do_else>
												<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
											</do_if>
											<do_elseif value="not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}">
												<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
											</do_elseif>
										</do_elseif>
									</do_for_each>
								</do_if>
								<set_value name="$DADVT.$DAFillShipmodStatistics.{$DAFillLocOwner}.{1}" exact="1" operation="add" comment="military"/>
								<!-- 20240403 Added option for paint mod -->
								<!-- DONE: Set up default table for ship mods -->
								<do_if value="$DADVT.$DAFillShipModPaintEnable and $DADVT.$DAFillPaintModTable.{$DAFillLocOwner}?">
									<set_value name="$LocPaintMod" exact="$DADVT.$DAFillPaintModTable.{$DAFillLocOwner}.random"/>
									<add_paint_mod object="$LocMilShip" ware="$LocPaintMod"/>
									<remove_value name="$LocPaintMod"/>
								</do_if>
								<remove_value name="$DAFillLocWeaponGroupTags"/>
								<remove_value name="$DAFillLocWeaponMacros"/>
								<remove_value name="$DAFillLocShieldGroupTags"/>
								<remove_value name="$DAFillLocShieldMacros"/>
							</do_for_each>
							<do_if value="$DADVT.$DAFillDetailedDebug">
								<debug_text text="'MOD: DAFill -- LibraryFillAddShipMod -- Added Mods to %s(%s) and %s subordinates -- Owner: %s -- Class: %s -- Typename: %s'.[$DAFillLocMilShip.knownname,$DAFillLocMilShip.idcode,$DAFillMilShips.count - 1,$DAFillLocMilShip.owner,$DAFillLocMilShip.class,$DAFillLocMilShip.typename]" output="false" context="false" filter="scripts"/>
							</do_if>
							<remove_value name="$DAFillMilShips"/>
						</do_if>
						<remove_value name="$DAFillLocMilShip"/>
						<do_if value="$DAFillLocEcoShip.exists">
							<set_value name="$DAFillLocWeaponGroupTags" exact="[]"/>
							<set_value name="$DAFillLocWeaponMacros" exact="[]"/>
							<set_value name="$DAFillLocShieldGroupTags" exact="[]"/>
							<set_value name="$DAFillLocShieldMacros" exact="[]"/>
							<do_if value="@$DAFillLocEngineMod">
								<add_equipment_mods object="$DAFillLocEcoShip">
									<engine ware="$DAFillLocEngineMod"/>
								</add_equipment_mods>
							</do_if>
							<do_if value="@$DAFillLocHullMod">
								<add_equipment_mods object="$DAFillLocEcoShip">
									<ship ware="$DAFillLocHullMod"/>
								</add_equipment_mods>
							</do_if>
							<do_if value="@$DAFillLocShieldMod">
								<do_for_each name="$DAFillLocShield" in="$DAFillLocEcoShip.shields.all.list">
									<do_if value="($DAFillLocShield.grouptag) and (not $DAFillLocShieldGroupTags.indexof.{$DAFillLocShield.grouptag})">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<shield ware="$DAFillLocShieldMod" context="'..'" group="$DAFillLocShield.grouptag"/>
										</add_equipment_mods>
										<append_to_list name="$DAFillLocShieldGroupTags" exact="$DAFillLocShield.grouptag"/>
									</do_if>
								</do_for_each>
								<do_if value="not $DAFillLocEcoShip.hasshieldmod">
									<add_equipment_mods object="$DAFillLocEcoShip">
										<shield ware="$DAFillLocShieldMod"/>
									</add_equipment_mods>
								</do_if>
							</do_if>
							<do_if value="@$DAFillLocMissileMod and @$DAFillLocMiningMod and @$DAFillLocWeaponMod">
								<do_for_each name="$DAFillLocWeapon" in="$DAFillLocEcoShip.weapons.all.list">
									<do_if value="@$DAFillLocWeapon.grouptag != null">
										<do_if value="not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag}">
											<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocMissileMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
												</add_equipment_mods>
											</do_if>
											<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocMiningMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
												</add_equipment_mods>
											</do_elseif>
											<do_else>
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocWeaponMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
												</add_equipment_mods>
											</do_else>
											<append_to_list name="$DAFillLocWeaponGroupTags" exact="$DAFillLocWeapon.grouptag"/>
										</do_if>
									</do_if>
									<do_elseif value="(@$DAFillLocWeapon.grouptag == null) and $DAFillLocWeapon.macro and (not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro})">
										<do_if value="not @$DAFillLocEcoShip.hasweaponmod.{$DAFillLocWeapon.macro}">
											<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocMissileMod" macro="$DAFillLocWeapon.macro"/>
												</add_equipment_mods>
											</do_if>
											<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocMiningMod" macro="$DAFillLocWeapon.macro"/>
												</add_equipment_mods>
											</do_elseif>
											<do_else>
												<add_equipment_mods object="$DAFillLocEcoShip">
													<weapon ware="$DAFillLocWeaponMod" macro="$DAFillLocWeapon.macro"/>
												</add_equipment_mods>
											</do_else>
											<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
										</do_if>
										<do_elseif value="not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}">
											<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
										</do_elseif>
									</do_elseif>
								</do_for_each>
							</do_if>
							<set_value name="$DADVT.$DAFillShipmodStatistics.{$DAFillLocOwner}.{2}" exact="1" operation="add" comment="civilian"/>
							<!-- 20240403 Added option for paint mod -->
							<!-- DONE: Set up default table for ship mods -->
							<do_if value="$DADVT.$DAFillShipModPaintEnable and $DADVT.$DAFillPaintModTable.{$DAFillLocOwner}?">
								<set_value name="$LocPaintMod" exact="$DADVT.$DAFillPaintModTable.{$DAFillLocOwner}.random"/>
								<add_paint_mod object="$DAFillLocEcoShip" ware="$LocPaintMod"/>
								<remove_value name="$LocPaintMod"/>
							</do_if>
							<do_if value="$DADVT.$DAFillDetailedDebug">
								<debug_text text="'MOD: DAFill -- LibraryFillAddShipMod -- Added Mods to %s(%s) -- Owner: %s -- Class: %s -- Typename: %s'.[$DAFillLocEcoShip.knownname,$DAFillLocEcoShip.idcode,$DAFillLocEcoShip.trueowner,$DAFillLocEcoShip.class,$DAFillLocEcoShip.typename]" output="false" context="false" filter="scripts"/>
							</do_if>
							<remove_value name="$DAFillLocWeaponGroupTags"/>
							<remove_value name="$DAFillLocWeaponMacros"/>
							<remove_value name="$DAFillLocShieldGroupTags"/>
							<remove_value name="$DAFillLocShieldMacros"/>
						</do_if>
						<remove_value name="$DAFillLocEcoShip"/>
						<remove_value name="$DAFillLocOwner"/>
						<remove_value name="$DAFillLocHullMod"/>
						<remove_value name="$DAFillLocShieldMod"/>
						<remove_value name="$DAFillLocEngineMod"/>
						<remove_value name="$DAFillLocWeaponMod"/>
						<remove_value name="$DAFillLocMiningMod"/>
						<remove_value name="$DAFillLocMissileMod"/>
						<remove_value name="$DAFillLocMiningWeapons"/>
					</actions>
				</library>
				<library name="LibraryFillSetPaintMods">
					<actions>
						<do_if value="$DADVT.$DAFillPaintModTable?">
							<do_if value="faction.antigone? and faction.antigone.isactive and (not $DADVT.$DAFillPaintModTable.{faction.antigone}?)">
								<set_value name="$DADVT.$DAFillPaintModTable.{faction.antigone}" exact="[ware.paintmod_0027,ware.paintmod_0028,ware.paintmod_0029,ware.paintmod_0074,ware.paintmod_0109]"/>
							</do_if>
							<do_if value="faction.argon? and faction.argon.isactive and (not $DADVT.$DAFillPaintModTable.{faction.argon}?)">
								<set_value name="$DADVT.$DAFillPaintModTable.{faction.argon}" exact="[ware.paintmod_0024,ware.paintmod_0025,ware.paintmod_0026,ware.paintmod_0021,ware.paintmod_0022,ware.paintmod_0066]"/>
							</do_if>
							<do_if value="faction.holyorder? and faction.holyorder.isactive and (not $DADVT.$DAFillPaintModTable.{faction.holyorder}?)">
								<set_value name="$DADVT.$DAFillPaintModTable.{faction.holyorder}" exact="[ware.paintmod_0039,ware.paintmod_0040,ware.paintmod_0041,ware.paintmod_0057,ware.paintmod_0059,ware.paintmod_0070]"/>
							</do_if>
							<do_if value="faction.paranid? and faction.paranid.isactive and (not $DADVT.$DAFillPaintModTable.{faction.paranid}?)">
								<set_value name="$DADVT.$DAFillPaintModTable.{faction.paranid}" exact="[ware.paintmod_0036,ware.paintmod_0037,ware.paintmod_0038,ware.paintmod_0062,ware.paintmod_0112,ware.paintmod_0151]"/>
							</do_if>
							<do_if value="faction.teladi? and faction.teladi.isactive and (not $DADVT.$DAFillPaintModTable.{faction.teladi}?)">
								<set_value name="$DADVT.$DAFillPaintModTable.{faction.teladi}" exact="[ware.paintmod_0030,ware.paintmod_0031,ware.paintmod_0032,ware.paintmod_0073,ware.paintmod_0075,ware.paintmod_0084]"/>
							</do_if>
						</do_if>
					</actions>
				</library>
				<!-- Fill // Variable Check Libraries -->
				<library name="LibraryCheckFillVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAFillEnable? or (not ((typeof $DADVT.$DAFillEnable == datatype.integer) and (($DADVT.$DAFillEnable == 1) or ($DADVT.$DAFillEnable == 0))))">
							<set_value name="$DADVT.$DAFillEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillShipModsEnable? or (not ((typeof $DADVT.$DAFillShipModsEnable == datatype.integer) and (($DADVT.$DAFillShipModsEnable == 1) or ($DADVT.$DAFillShipModsEnable == 0))))">
							<set_value name="$DADVT.$DAFillShipModsEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillCheckInterval? or (not ($DADVT.$DAFillCheckInterval gt 0))">
							<set_value name="$DADVT.$DAFillCheckInterval" exact="60"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAFillLastCheckTime? or (not (typeof $DAFillLastCheckTime == datatype.time))">
							<set_value name="$DAFillLastCheckTime" exact="0s"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMaxTSWarePercent? or (not ($DADVT.$DAFillMaxTSWarePercent gt 0.0))">
							<set_value name="$DADVT.$DAFillMaxTSWarePercent" exact="90.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMaxTSWarePercentAfter? or (not ($DADVT.$DAFillMaxTSWarePercentAfter ge 0.0))">
							<set_value name="$DADVT.$DAFillMaxTSWarePercentAfter" exact="75.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinTSWarePercent? or (not ($DADVT.$DAFillMinTSWarePercent ge 0.0))">
							<set_value name="$DADVT.$DAFillMinTSWarePercent" exact="5.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinTSWarePercentAfter? or (not ($DADVT.$DAFillMinTSWarePercentAfter ge 0.0))">
							<set_value name="$DADVT.$DAFillMinTSWarePercentAfter" exact="10.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinSYWarePercent? or (not ($DADVT.$DAFillMinSYWarePercent ge 0.0))">
							<set_value name="$DADVT.$DAFillMinSYWarePercent" exact="5.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinSYWarePercentAfter? or (not ($DADVT.$DAFillMinSYWarePercentAfter ge 0.0))">
							<set_value name="$DADVT.$DAFillMinSYWarePercentAfter" exact="10.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillShipModFleetEnable? or (not ((typeof $DADVT.$DAFillShipModFleetEnable == datatype.integer) and (($DADVT.$DAFillShipModFleetEnable == 1) or ($DADVT.$DAFillShipModFleetEnable == 0))))">
							<set_value name="$DADVT.$DAFillShipModFleetEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillShipModPaintEnable? or (not ((typeof $DADVT.$DAFillShipModPaintEnable == datatype.integer) and (($DADVT.$DAFillShipModPaintEnable == 1) or ($DADVT.$DAFillShipModPaintEnable == 0))))">
							<set_value name="$DADVT.$DAFillShipModPaintEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillPaintModTable? or ($DADVT.$DAFillPaintModTable == null)">
							<set_value name="$DADVT.$DAFillPaintModTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillWareStatistics? or ($DADVT.$DAFillWareStatistics == null)">
							<set_value name="$DADVT.$DAFillWareStatistics" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillShipmodStatistics? or ($DADVT.$DAFillShipmodStatistics == null)">
							<set_value name="$DADVT.$DAFillShipmodStatistics" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillLimitByValue? or (not ((typeof $DADVT.$DAFillLimitByValue == datatype.integer) and (($DADVT.$DAFillLimitByValue == 1) or ($DADVT.$DAFillLimitByValue == 0))))">
							<set_value name="$DADVT.$DAFillLimitByValue" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillXenonProtection? or (not ((typeof $DADVT.$DAFillXenonProtection == datatype.integer) and (($DADVT.$DAFillXenonProtection == 1) or ($DADVT.$DAFillXenonProtection == 0))))">
							<set_value name="$DADVT.$DAFillXenonProtection" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillFactionAccounts? or ($DADVT.$DAFillFactionAccounts == null)">
							<set_value name="$DADVT.$DAFillFactionAccounts" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillTSExcludedFactions? or ($DADVT.$DAFillTSExcludedFactions == null)">
							<set_value name="$DADVT.$DAFillTSExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillSYWExcludedFactions? or ($DADVT.$DAFillSYWExcludedFactions == null)">
							<set_value name="$DADVT.$DAFillSYWExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillDetailedDebug? or (not ((typeof $DADVT.$DAFillDetailedDebug == datatype.integer) and (($DADVT.$DAFillDetailedDebug == 1) or ($DADVT.$DAFillDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAFillDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAFill -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Jobs - Expeditions // Update on load cues -->
				<cue name="UpdateOnLoadJobsEXP" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAJobsEXPEnable"/>
						<check_any>
							<check_value value="not $UpdateOnLoadJobsEXPTimer?"/>
							<check_value value="$UpdateOnLoadJobsEXPTimer? and (player.age gt $UpdateOnLoadJobsEXPTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadJobsEXPTimer" exact="player.age + 5s"/>
						<include_actions ref="LibraryJobsEXPCheckFactionsandJobs"/>
						<include_actions ref="LibraryJobsEXPUpdateEnemiesAllies"/>
						<include_actions ref="LibraryJobsEXPCheckForSurvivor"/>
						<include_actions ref="LibraryJobsEXPCheckExpeditionReadiness"/>
					</actions>
				</cue>
				<!-- Jobs - Expeditions // One time Cue -->
				<!-- Jobs - Expeditions // Timer Cues -->
				<cue name="TimerJobsExpMain" instantiate="true" checkinterval="60min" checktime="50min" comment="Timer 50">
					<conditions>
						<check_value value="$DADVT.$DAJobsEXPEnable"/>
					</conditions>
					<actions>
						<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
							<debug_text text="'MOD: DAJobsEXP -- Timer.'" context="false" filter="scripts"/>
						</do_if>
						<include_actions ref="LibraryJobsEXPCheckFactionsandJobs"/>
						<include_actions ref="LibraryJobsEXPUpdateEnemiesAllies"/>
						<include_actions ref="LibraryJobsEXPCheckForSurvivor"/>
						<include_actions ref="LibraryJobsEXPCheckExpeditionReadiness"/>
					</actions>
				</cue>
				<cue name="TimerJobsEXPLaunch" instantiate="true" checkinterval="15min" checktime="58min" comment="Timer 12/27/43/58">
					<conditions>
						<check_value value="$DADVT.$DAJobsEXPEnable"/>
						<check_value value="$DAJobsEXPReadyExpeditionFleets.count" min="1"/>
					</conditions>
					<actions>
						<include_actions ref="LibraryJobsEXPLaunchExpeditionFleets"/>
					</actions>
				</cue>
				<!-- Jobs - Expeditions // Event cues -->
				<cue name="EventJobsEXPInitialChecks" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<set_value name="$LocDebug" exact="if event.param? then event.param else false"/>
						<include_actions ref="LibraryJobsEXPCheckFactionsandJobs"/>
						<remove_value name="$LocDebug"/>
					</actions>
				</cue>
				<!-- Jobs - Expeditions // Functional Libraries -->
				<library name="LibraryJobsEXPCheckFactionsandJobs">
					<actions>
						<!-- DONE: Change to a library -->
						<!-- Update $DADVT.$DAJobsEXPFactions + $DAJobsEXPExpeditionJobs -->
						<!-- if $DADVT.$DAJobsEXPEnable then activate -->
						<!-- if not $DADVT.$DAJobsEXPEnable then deactivate -->
						<do_if value="$DADVT.$DAJobsEXPDetailedDebug or @$LocDebug">
							<debug_text text="'MOD: DAJobsEXP -- Updating EXPFactions, EXPExpedition Jobs, and activating/deactivating expedition jobs.'" context="false" filter="scripts"/>
						</do_if>
						<get_factions_by_tag tag="tag.claimspace" result="$DAJobsEXPLocFactionsToCheck"/>
						<do_for_each name="$DAJobsEXPLocFactionToCheck" in="$DAJobsEXPLocFactionsToCheck">
							<do_if value="(not $DAJobsEXPLocFactionToCheck.isactive) or (not $DADVT.$DAJobsEXPEnable) or (($DAJobsEXPLocFactionToCheck == faction.boron) and (not $DADVT.$DAJobsSSTRemoveExclusivity))">
								<get_suitable_job result="$DAJobsEXPLocJobs" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocFactionToCheck" includeinactive="true" multiple="true"/>
								<do_if value="$DADVT.$DAJobsEXPFactions.indexof.{$DAJobsEXPLocFactionToCheck}">
									<remove_from_list name="$DADVT.$DAJobsEXPFactions" exact="DAJobsEXPLocFactionToCheck" multiple="true"/>
								</do_if>
								<do_if value="$DAJobsEXPLocJobs.count" min="1">
									<do_for_each name="$DAJobsEXPLocJob" in="$DAJobsEXPLocJobs">
										<do_if value="$DAJobsEXPExpeditionJobs.indexof.{$DAJobsEXPLocJob}">
											<remove_from_list name="$DAJobsEXPExpeditionJobs" exact="$DAJobsEXPLocJob" multiple="true"/>
										</do_if>
										<check_job_active result="$DAJobsEXPLocIsActive" job="$DAJobsEXPLocJob"/>
										<do_if value="$DAJobsEXPLocIsActive">
											<set_job_active activate="false" job="$DAJobsEXPLocJob"/>
											<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
												<debug_text text="'MOD: DAJobsEXP -- Deactivating %s.'.[$DAJobsEXPLocJob]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<remove_value name="$DAJobsEXPLocIsActive"/>
									</do_for_each>
								</do_if>
								<remove_value name="$DAJobsEXPLocJobs"/>
							</do_if>
							<do_elseif value="$DAJobsEXPLocFactionToCheck.isactive and $DADVT.$DAJobsEXPEnable">
								<get_suitable_job result="$DAJobsEXPLocJobs" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocFactionToCheck" includeinactive="true" multiple="true"/>
								<do_if value="$DAJobsEXPLocJobs.count" min="1">
									<do_if value="not $DADVT.$DAJobsEXPFactions.indexof.{$DAJobsEXPLocFactionToCheck}">
										<append_to_list name="$DADVT.$DAJobsEXPFactions" exact="$DAJobsEXPLocFactionToCheck"/>
									</do_if>
									<do_for_each name="$DAJobsEXPLocJob" in="$DAJobsEXPLocJobs">
										<check_job_active result="$DAJobsEXPLocIsActive" job="$DAJobsEXPLocJob"/>
										<do_if value="not $DAJobsEXPLocIsActive">
											<set_job_active activate="true" job="$DAJobsEXPLocJob"/>
											<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
												<debug_text text="'MOD: DAJobsEXP -- Activating %s.'.[$DAJobsEXPLocJob]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_if value="not $DAJobsEXPExpeditionJobs.indexof.{$DAJobsEXPLocJob}">
											<append_to_list name="$DAJobsEXPExpeditionJobs" exact="$DAJobsEXPLocJob"/>
										</do_if>
										<remove_value name="$DAJobsEXPLocIsActive"/>
									</do_for_each>
								</do_if>
								<remove_value name="$DAJobsEXPLocJobs"/>
							</do_elseif>
						</do_for_each>
						<remove_value name="$DAJobsEXPLocFactionsToCheck"/>
						<get_suitable_job result="$DAJobsEXPLocActiveJobs" tags="$DAJobsEXPTags" includeinactive="false" multiple="true"/>
						<do_if value="$DADVT.$DAJobsEXPDetailedDebug or @$LocDebug">
							<debug_text text="'MOD: DAJobsEXP -- Active count: %s -- Attempted count: %s.'.[$DAJobsEXPLocActiveJobs.count,$DAJobsEXPExpeditionJobs.count]" context="false" filter="scripts"/>
						</do_if>
						<remove_value name="$DAJobsEXPLocActiveJobs"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPUpdateEnemiesAllies">
					<actions>
						<!-- Find claimspace factions -->
						<set_value name="$DAJobsEXPClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DAJobsEXPClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$DAJobsEXPVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$DAJobsEXPVisitorList"/>
						<!-- Find peaceful factions -->
						<set_value name="$DAJobsEXPPeacefulList" exact="[]"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DAJobsEXPPeacefulList"/>
						<!-- Remove excluded, peaceful, and visitors from claimspace list -->
						<remove_from_list name="$DAJobsEXPClaimspaceList" list="$DAJobsEXPExcludedFactions" multiple="true"/>
						<remove_from_list name="$DAJobsEXPClaimspaceList" list="$DAJobsEXPVisitorList" multiple="true"/>
						<remove_from_list name="$DAJobsEXPClaimspaceList" list="$DAJobsEXPPeacefulList" multiple="true"/>
						<set_value name="$DAJobsEXPLocFactionList" exact="[]"/>
						<!-- Check for errors instead of nesting -->
						<do_for_each name="$DAJobsEXPLocExpeditionFaction" in="$DADVT.$DAJobsEXPFactions">
							<do_if value="$DAJobsEXPLocExpeditionFaction.isactive and $DAJobsEXPLocExpeditionFaction.willclaimspace">
								<find_sector name="$DAJobsEXPLocSectors" owner="$DAJobsEXPLocExpeditionFaction" multiple="true"/>
								<do_if value="$DAJobsEXPErrorFactions.indexof.{$DAJobsEXPLocExpeditionFaction}">
									<!-- If faction previously worked then reset error -->
									<remove_from_list name="$DAJobsEXPErrorFactions" exact="$DAJobsEXPLocExpeditionFaction" multiple="true"/>
								</do_if>
								<do_if value="$DAJobsEXPLocSectors.count" min="1">
									<!-- Only focus on factions who own a sector -->
									<append_to_list name="$DAJobsEXPLocFactionList" exact="$DAJobsEXPLocExpeditionFaction"/>
								</do_if>
							</do_if>
							<do_elseif value="not $DAJobsEXPErrorFactions.indexof.{$DAJobsEXPLocExpeditionFaction}">
								<debug_text text="'MOD: DAJobsEXP -- %s -- isactive: %s -- willclaimspace: %s.'.[$DAJobsEXPLocExpeditionFaction,$DAJobsEXPLocExpeditionFaction.isactive,$DAJobsEXPLocExpeditionFaction.willclaimspace]" context="true" filter="error"/>
								<!-- Faction will only error once -->
								<append_to_list name="$DAJobsEXPErrorFactions" exact="$DAJobsEXPLocExpeditionFaction"/>
							</do_elseif>
						</do_for_each>
						<remove_value name="$DAJobsEXPLocExpeditionFaction"/>
						<remove_value name="$DAJobsEXPLocSectors"/>
						<set_value name="$DAjobsEXPLocAllyEnemyString" exact="'MOD: DAJobsEXP -- Updated Allies/Enemies Report'"/>
						<do_for_each name="$DAJobsEXPLocFaction" in="$DAJobsEXPLocFactionList">
							<set_value name="$DAjobsEXPLocAllyEnemyString" exact="'\n %s Report:'.[$DAJobsEXPLocFaction]" operation="add"/>
							<do_if value="not $DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}?">
								<set_value name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="[]"/>
							</do_if>
							<do_if value="not $DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}?">
								<set_value name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="[]"/>
							</do_if>
							<do_for_each name="$DAJobsEXPLocClaimspaceFaction" in="$DAJobsEXPClaimspaceList">
								<do_if value="($DAJobsEXPLocFaction != $DAJobsEXPLocClaimspaceFaction) and ($DAJobsEXPLocClaimspaceFaction.isactive) and ($DAJobsEXPLocClaimspaceFaction.willclaimspace)">
									<!-- Only focus on factions who own a sector -->
									<find_sector name="$DAJobsEXPLocSectors" owner="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
									<!-- Enemies -->
									<do_if value="($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} le -0.32) and ($DAJobsEXPLocSectors.count) and (not $DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (Kill+Sectors) AND (NOT already added) -->
										<append_to_list name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Enemy Added: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_if>
									<do_elseif value="(not (($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} le -0.32) and ($DAJobsEXPLocSectors.count))) and ($DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (NOT Kill+Sectors) AND (already added) -->
										<remove_from_list name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Enemy Removed: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_elseif>
									<do_else>
										<!-- (NOT Kill+Sectors) AND (NOT already added) -->
										<!-- (Kill+Sectors) AND (already added) -->
									</do_else>
									<!-- Allies -->
									<do_if value="($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} ge 0.32) and ($DAJobsEXPLocSectors.count) and (not $DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (Ally+Sectors) AND (NOT already added) -->
										<append_to_list name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Ally Added: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_if>
									<do_elseif value="(not (($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} ge 0.32) and ($DAJobsEXPLocSectors.count))) and ($DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (NOT Ally+Sectors) AND (already added) -->
										<remove_from_list name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Ally Removed: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_elseif>
									<do_else>
										<!-- (NOT Ally+Sectors) AND (NOT already added) -->
										<!-- (Ally+Sectors) AND (already added) -->
									</do_else>
								</do_if>
								<!-- handle removing old entries -->
							</do_for_each>
						</do_for_each>
						<!-- combine debug messages -->
						<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
							<debug_text text="$DAjobsEXPLocAllyEnemyString" context="false" filter="scripts"/>
						</do_if>
						<remove_value name="$DAjobsEXPLocAllyEnemyString"/>
						<remove_value name="$DAJobsEXPLocFaction"/>
						<remove_value name="$DAJobsEXPLocClaimspaceFaction"/>
						<remove_value name="$DAJobsEXPLocSectors"/>
						<remove_value name="$DAJobsEXPClaimspaceList"/>
						<remove_value name="$DAJobsEXPVisitorList"/>
						<remove_value name="$DAJobsEXPPeacefulList"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPCheckForSurvivor">
					<actions>
						<do_if value="$DAJobsEXPActiveExpeditionFleets.count" min="1">
							<do_for_each name="$DAJobsEXPLocActiveFleet" in="$DAJobsEXPActiveExpeditionFleets" reverse="true">
								<do_if value="($DAJobsEXPLocActiveFleet.order.id == $DAJobsEXPLocActiveFleet.defaultorder.id) and ($DAJobsEXPLocActiveFleet.trueowner == $DAJobsEXPLocActiveFleet.sector.owner)">
									<remove_from_group group="$DAJobsEXPActiveExpeditionFleets" object="$DAJobsEXPLocActiveFleet"/>
									<remove_from_group group="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocActiveFleet"/>
									<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
										<debug_text text="'MOD: DAJobsEXP -- LibraryJobsEXPCheckForSurvivor -- %s %s (%s) removed from ActiveExpeditionFleets.'.[$DAJobsEXPLocActiveFleet.trueowner,$DAJobsEXPLocActiveFleet.knownname,$DAJobsEXPLocActiveFleet.idcode]" context="false" filter="scripts"/>
									</do_if>
								</do_if>
							</do_for_each>
							<remove_value name="$DAJobsEXPLocActiveFleet"/>
						</do_if>
						<!-- 20240316 Adding check for ships that may have been stolen/owner changed from a valid faction -->
						<create_group groupname="$LocTempEXPGroup"/>
						<do_if value="$DAJobsEXPActiveExpeditionFleets.count" min="1">
							<add_to_group groupname="$LocTempEXPGroup" group="$DAJobsEXPActiveExpeditionFleets"/>
						</do_if>
						<do_if value="$DAJobsEXPReadyExpeditionFleets.count" min="1">
							<add_to_group groupname="$LocTempEXPGroup" group="$DAJobsEXPReadyExpeditionFleets"/>
						</do_if>
						<do_if value="$DAJobsEXPPreparingExpeditionFleets.count" min="1">
							<add_to_group groupname="$LocTempEXPGroup" group="$DAJobsEXPPreparingExpeditionFleets"/>
						</do_if>
						<do_if value="$DAJobsEXPExpeditionFleetsFixedPatrol.count" min="1">
							<add_to_group groupname="$LocTempEXPGroup" group="$DAJobsEXPExpeditionFleetsFixedPatrol"/>
						</do_if>
						<do_for_each name="$DAJobsEXPLocShip" in="$LocTempEXPGroup">
							<do_if value="not $DADVT.$DAJobsEXPFactions.indexof.{$DAJobsEXPLocShip.trueowner}">
								<remove_from_group group="$DAJobsEXPActiveExpeditionFleets" object="$DAJobsEXPLocShip"/>
								<remove_from_group group="$DAJobsEXPReadyExpeditionFleets" object="$DAJobsEXPLocShip"/>
								<remove_from_group group="$DAJobsEXPPreparingExpeditionFleets" object="$DAJobsEXPLocShip"/>
								<remove_from_group group="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocShip"/>
								<debug_text text="'MOD: DAJobsEXP -- LibraryJobsEXPCheckForSurvivor -- %s %s (%s) removed from all groups. INVALID OWNER.'.[$DAJobsEXPLocActiveFleet.trueowner,$DAJobsEXPLocActiveFleet.knownname,$DAJobsEXPLocActiveFleet.idcode]" context="false" filter="error"/>
							</do_if>
						</do_for_each>
						<remove_value name="$LocTempEXPGroup"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPCheckExpeditionReadiness">
					<actions>
						<do_if value="$DAJobsEXPEnemiesTable.keys.count" min="1">
							<set_value name="$DAJobsEXPLocEnemiesTableFactions" exact="$DAJobsEXPEnemiesTable.keys.list"/>
							<set_value name="$LocDebugString" exact="'MOD: DAJobsEXP -- Check Expedition Readiness Report:'"/>
							<do_for_each name="$DAJobsEXPLocEnemiesTableFaction" in="$DAJobsEXPLocEnemiesTableFactions">
								<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
									<set_value name="$LocDebugString" exact="'\n %s Report:'.[$DAJobsEXPLocEnemiesTableFaction]" operation="add"/>
								</do_if>
								<set_value name="$DAJobsEXPLocExpeditionJob" exact="[null]"/>
								<get_suitable_job result="$DAJobsEXPLocExpeditionJob" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocEnemiesTableFaction" onlycommandeerable="true" multiple="true" append="false"/>
								<do_if value="not @$DAJobsEXPLocExpeditionJob.{1}">
									<get_suitable_job result="$DAJobsEXPLocExpeditionJob" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocEnemiesTableFaction" exceedquota="true" onlycommandeerable="true" multiple="true" append="false"/>
								</do_if>
								<do_if value="@$DAJobsEXPLocExpeditionJob.{1}">
									<find_ship_by_true_owner name="$DAJobsEXPLocPotentialShips" faction="$DAJobsEXPLocEnemiesTableFaction" commandeerable="true" jobtags="$DAJobsEXPTags" space="player.galaxy" multiple="true"/>
									<do_if value="$DAJobsEXPLocPotentialShips">
										<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
											<set_value name="$LocDebugString" exact="' %s Expedition Ship(s) Found.'.[@$DAJobsEXPLocPotentialShips.count]" operation="add"/>
										</do_if>
										<do_for_each name="$DAJobsEXPLocPotentialShip" in="$DAJobsEXPLocPotentialShips">
											<do_if value="($DAJobsEXPLocPotentialShip.exists) and (not $DAJobsEXPActiveExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip}) and (not $DAJobsEXPReadyExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip})">
												<get_subordinate_jobs jobs="$DAJobsEXPLocSubordinateJobs" amount="$DAJobsEXPLocSubordinateAmounts" commander="$DAJobsEXPLocPotentialShip"/>
												<do_if value="not $DAJobsEXPLocSubordinateJobs.count">
													<!-- has full subordinates -->
													<add_to_group groupname="$DAJobsEXPReadyExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
														<set_value name="$LocDebugString" exact="' Fleet Commander Ready: %s(%s)(%s).'.[$DAJobsEXPLocPotentialShip.knownname,$DAJobsEXPLocPotentialShip.idcode,$DAJobsEXPLocPotentialShip.sector.knownname]" operation="add"/>
													</do_if>
													<do_if value="$DAJobsEXPPreparingExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip}">
														<remove_from_group group="$DAJobsEXPPreparingExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													</do_if>
													<include_actions ref="LibraryJobsEXPPatrolShipyardSector"/>
												</do_if>
												<do_elseif value="$DAJobsEXPLocSubordinateJobs.count" min="1">
													<!-- NOT full subordinates -->
													<add_to_group groupname="$DAJobsEXPPreparingExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
														<set_value name="$LocDebugString" exact="' Fleet Commander Preparing: %s(%s)(%s) wants %s Subordinate Job(s).'.[$DAJobsEXPLocPotentialShip.knownname,$DAJobsEXPLocPotentialShip.idcode,$DAJobsEXPLocPotentialShip.sector.knownname,$DAJobsEXPLocSubordinateJobs.count]" operation="add"/>
													</do_if>
													<include_actions ref="LibraryJobsEXPPatrolShipyardSector"/>
													<create_order object="$DAJobsEXPLocPotentialShip" id="'RestockSubordinates'"/>
												</do_elseif>
												<remove_value name="$DAJobsEXPLocSubordinateJobs"/>
												<remove_value name="$DAJobsEXPLocSubordinateAmounts"/>
											</do_if>
											<do_elseif value="$DADVT.$DAJobsEXPDetailedDebug">
												<set_value name="$LocDebugString" exact="' All Fleets Tracked.'" operation="add"/>
											</do_elseif>
										</do_for_each>
										<remove_value name="$DAJobsEXPLocPotentialShip"/>
									</do_if>
									<do_elseif value="$DADVT.$DAJobsEXPDetailedDebug">
										<set_value name="$LocDebugString" exact="' No Expedition Ship(s) Found.'" operation="add"/>
									</do_elseif>
									<remove_value name="$DAJobsEXPLocPotentialShips"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsEXPDetailedDebug">
									<set_value name="$LocDebugString" exact="' No Job Found Commandeerable.'" operation="add"/>
								</do_elseif>
								<remove_value name="$DAJobsEXPLocExpeditionJob"/>
							</do_for_each>
							<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
								<debug_text text="'MOD: DAJobsEXP -- ActiveExpeditionFleets: %s -- ReadyExpeditionFleets: %s -- PreparingExpeditionFleets: %s.'.[$DAJobsEXPActiveExpeditionFleets.count,$DAJobsEXPReadyExpeditionFleets.count,$DAJobsEXPPreparingExpeditionFleets.count]" context="false" filter="scripts"/>
								<debug_text text="$LocDebugString" context="false" filter="scripts"/>
							</do_if>
							<remove_value name="$DAJobsEXPLocEnemiesTableFactions"/>
							<remove_value name="$DAJobsEXPLocEnemiesTableFaction"/>
							<remove_value name="$LocDebugString"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAJobsEXP -- $DAJobsEXPEnemiesTable.keys.count: %s.'.[$DAJobsEXPEnemiesTable.keys.count]" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryJobsEXPPatrolShipyardSector">
					<actions>
						<set_value name="$DAJobsEXPLocExpeditionShip" exact="$DAJobsEXPLocPotentialShip"/>
						<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol.indexof.{$DAJobsEXPLocExpeditionShip}">
							<!-- Find owned sectors -->
							<find_sector name="$DAJobsEXPLocOwnedSectors" owner="$DAJobsEXPLocExpeditionShip.trueowner" multiple="true"/>
							<do_if value="$DAJobsEXPLocOwnedSectors.count" min="1">
								<!-- Find Shipyards -->
								<find_station_by_true_owner name="$DAJobsEXPLocShipyards" space="$DAJobsEXPLocOwnedSectors" canbuildships="true" faction="$DAJobsEXPLocExpeditionShip.trueowner" sortbygatedistanceto="$DAJobsEXPLocExpeditionShip" multiple="true">
									<match_content class="class.buildmodule" checkoperational="true"/>
								</find_station_by_true_owner>
								<set_value name="$DAJobsEXPLocClosestShipyardSector" exact="$DAJobsEXPLocShipyards.{1}.sector"/>
								<do_if value="($DAJobsEXPLocClosestShipyardSector.exists) and ($DAJobsEXPLocExpeditionShip.defaultorder.id == 'Patrol') and (@$DAJobsEXPLocExpeditionShip.jobmainsector != $DAJobsEXPLocClosestShipyardSector)">
									<set_job_ship_mainsector ship="$DAJobsEXPLocExpeditionShip" sector="$DAJobsEXPLocClosestShipyardSector"/>
									<add_to_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocExpeditionShip"/>
									<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
										<debug_text text="'MOD: DAJobsEXP -- Fixed patrol: %s %s %s -- New sector: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,$DAJobsEXPLocClosestShipyardSector.knownname]" context="false" filter="scripts"/>
									</do_if>
								</do_if>
								<do_elseif value="not $DAJobsEXPLocClosestShipyardSector.exists">
									<!-- Faction no longer has a shipyard sector -->
									<debug_text text="'MOD: DAJobsEXP -- No Shipyard Sector: %s %s %s -- order sector: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,@$DAJobsEXPLocExpeditionShip.jobmainsector.knownname]" context="true" filter="error"/>
								</do_elseif>
								<do_elseif value="not ($DAJobsEXPLocExpeditionShip.defaultorder.id == 'Patrol')">
									<!-- Ship doesn't have a default order of patrol -->
									<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
										<debug_text text="'MOD: DAJobsEXP -- Not patrol order: %s %s %s -- order: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,$DAJobsEXPLocExpeditionShip.defaultorder.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$DAJobsEXPLocExpeditionShip.jobmainsector == $DAJobsEXPLocClosestShipyardSector">
									<!-- Ship is already patrolling correct sector -->
									<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol.indexof.{$DAJobsEXPLocExpeditionShip}">
										<add_to_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocExpeditionShip"/>
									</do_if>
								</do_elseif>
								<do_else>
									<!-- This should never be reached -->
								</do_else>
								<remove_value name="$DAJobsEXPLocShipyards"/>
								<remove_value name="$DAJobsEXPLocClosestShipyardSector"/>
							</do_if>
							<remove_value name="$DAJobsEXPLocOwnedSectors"/>
						</do_if>
						<remove_value name="$DAJobsEXPLocExpeditionShip"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPLaunchExpeditionFleets">
					<actions>
						<do_for_each name="$DAJobsEXPLocReadyExpeditionShip" in="$DAJobsEXPReadyExpeditionFleets" reverse="true">
							<do_if value="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocReadyExpeditionShip.trueowner}.count" min="1">
								<!-- Ship is ready and the faction has enemies -->
								<!-- 20241014 No longer chance based, still random enemy -->
								<set_value name="$DAJobsEXPLocEnemyFaction" exact="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocReadyExpeditionShip.trueowner}.random"/>
								<set_value name="$DAJobsEXPLocThisFaction" exact="$DAJobsEXPLocReadyExpeditionShip.trueowner"/>
								<find_sector name="$DAJobsEXPLocEnemyFactionSectors" owner="$DAJobsEXPLocEnemyFaction" multiple="true" sortbygatedistanceto="$DAJobsEXPLocReadyExpeditionShip"/>
								<do_if value="($DAJobsEXPLocEnemyFaction != null) and ($DAJobsEXPLocEnemyFaction.isactive) and ($DAJobsEXPLocEnemyFactionSectors.count)">
									<set_value name="$DAJobsEXPLocEnemyFactionSector" exact="$DAJobsEXPLocEnemyFactionSectors.{1}"/>
									<find_station_by_true_owner name="$DAJobsEXPLocEnemyStations" space="$DAJobsEXPLocEnemyFactionSector" faction="$DAJobsEXPLocEnemyFaction" sortbydistanceto="$DAJobsEXPLocReadyExpeditionShip" multiple="true"/>
									<do_if value="$DAJobsEXPLocEnemyStations.count" min="1">
										<remove_from_group group="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocReadyExpeditionShip"/>
										<cancel_all_orders object="$DAJobsEXPLocReadyExpeditionShip"/>
										<create_position name="$DAJobsEXPLocPosition" object="$DAJobsEXPLocEnemyStations.{1}" space="$DAJobsEXPLocEnemyFactionSector"/>
										<set_value name="$DAJobsEXPLocMindist" exact="30km"/>
										<set_value name="$DAJobsEXPLocMaxdist" exact="40km"/>
										<run_actions ref="md.LIB_Generic.CreatePositionEclipticNearFar" result="$DAJobsEXPLocPosition">
											<param name="position" value="$DAJobsEXPLocPosition"/>
											<param name="mindist" value="$DAJobsEXPLocMindist"/>
											<param name="maxdist" value="$DAJobsEXPLocMaxdist"/>
										</run_actions>
										<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'MoveGeneric'">
											<param name="destination" value="$DAJobsEXPLocEnemyStations.{1}"/>
											<param name="position" value="$DAJobsEXPLocPosition"/>
											<param name="endintargetzone" value="true"/>
											<param name="activepatrol" value="true"/>
										</create_order>
										<remove_value name="$DAJobsEXPLocPosition"/>
										<remove_value name="$DAJobsEXPLocMindist"/>
										<remove_value name="$DAJobsEXPLocMaxdist"/>
										<do_for_each name="$DAJobsEXPLocEnemyStation" in="$DAJobsEXPLocEnemyStations">
											<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'Attack'">
												<param name="primarytarget" value="$DAJobsEXPLocEnemyStation"/>
												<param name="pursuetargets" value="true"/>
												<param name="allowothertargets" value="true"/>
											</create_order>
											<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'AttackInRange'">
												<param name="destination" value="[$DAJobsEXPLocEnemyFactionSector,$DAJobsEXPLocEnemyStation.relativeposition.{$DAJobsEXPLocEnemyFactionSector}]"/>
											</create_order>
										</do_for_each>
										<add_to_group groupname="$DAJobsEXPActiveExpeditionFleets" object="$DAJobsEXPLocReadyExpeditionShip"/>
										<remove_from_group group="$DAJobsEXPReadyExpeditionFleets" object="$DAJobsEXPLocReadyExpeditionShip"/>
										<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
											<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- %s %s (%s) attacking %s stations owned by %s in %s.'.[$DAJobsEXPLocReadyExpeditionShip.trueowner,$DAJobsEXPLocReadyExpeditionShip.knownname,$DAJobsEXPLocReadyExpeditionShip.idcode,$DAJobsEXPLocEnemyStations.count,$DAJobsEXPLocEnemyFaction,$DAJobsEXPLocEnemyFactionSector.knownname]" context="false" filter="scripts"/>
										</do_if>
										<remove_value name="$DAJobsEXPLocEnemyStation"/>
										<include_actions ref="LibraryJobsEXPNewsExpeditionLaunched"/>
									</do_if>
									<do_else>
										<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- $DAJobsEXPLocEnemyStations.count: %s.'.[$DAJobsEXPLocEnemyStations.count]" context="true" filter="error"/>
									</do_else>
									<remove_value name="$DAJobsEXPLocEnemyFactionSector"/>
									<remove_value name="$DAJobsEXPLocEnemyStations"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsEXPDetailedDebug">>
									<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- $DAJobsEXPLocEnemyFaction: %s -- $DAJobsEXPLocEnemyFaction.isactive: %s -- $DAJobsEXPLocEnemyFactionSectors: %s.'.[$DAJobsEXPLocEnemyFaction,$DAJobsEXPLocEnemyFaction.isactive,$DAJobsEXPLocEnemyFactionSectors.count]" context="false" filter="scripts"/>
								</do_elseif>
								<remove_value name="$DAJobsEXPLocEnemyFaction"/>
								<remove_value name="$DAJobsEXPLocThisFaction"/>
								<remove_value name="$DAJobsEXPLocEnemyFactionSectors"/>
							</do_if>
							<do_else>
								<!-- No Enemies -->
							</do_else>
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsEXPNewsExpeditionLaunched">
					<!-- DONE: this needs to be worked on for new mod format -->
					<!-- MAYBE: integrate into DADynamicNews processing -->
					<actions>
						<!-- 
							LOGBOOK
								Title = {33232474,102} // Faction = $DAJobsEXPLocReadyExpeditionShip.trueowner.knownname // Text = $Message
							END LOGBOOK
						-->
						<!-- 
							NOTIFICATION // Max 4 Rows
								{DA Dynamic News}: $DAJobsEXPLocReadyExpeditionShip.trueowner.knownname
								$Message
							END NOTIFICATION
						-->
						<do_if value="$DAJobsEXPLocReadyExpeditionShip and $DAJobsEXPLocEnemyFactionSector">
							<!-- $DAJobsEXPLocReadyExpeditionShip, $DAJobsEXPLocEnemyFactionSector -->
							<substitute_text text="$LocationText" source="{1016,1}" comment="in sector $SECTOR$">
								<replace string="'$SECTOR$'" with="$DAJobsEXPLocReadyExpeditionShip.sector.knownname"/>
							</substitute_text>
							<substitute_text text="$DestinationText" source="{30004,8202}" comment="Invasion started in $DESTINATION$">
								<replace string="'$DESTINATION$'" with="$DAJobsEXPLocEnemyFactionSector.knownname"/>
							</substitute_text>
							<set_value name="$Message" exact="'%s(%s) %s. %s.'.[$DAJobsEXPLocReadyExpeditionShip.knownname,$DAJobsEXPLocReadyExpeditionShip.idcode,$LocationText,$DestinationText]"/>
							<remove_value name="$LocationText"/>
							<remove_value name="$DestinationText"/>
							<do_if value="$DADVT.$DADynamicNewsEnableNewsStorage">
								<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname,$Message]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
								<show_notification priority="1" text="'%s: %s\n%s'.[{33232474,102},$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname,$Message]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableLogbook">
								<write_to_logbook category="news" title="{33232474,102}" faction="$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname" text="$Message"/>
							</do_if>
							<remove_value name="$Message"/>
						</do_if>
					</actions>
				</library>
				<!-- Jobs - Expeditions // Variable Check Libraries -->
				<library name="LibraryCheckJobsEXPVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAJobsEXPEnable? or (not ((typeof $DADVT.$DAJobsEXPEnable == datatype.integer) and (($DADVT.$DAJobsEXPEnable == 1) or ($DADVT.$DAJobsEXPEnable == 0))))">
							<set_value name="$DADVT.$DAJobsEXPEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsEXPFactions? or ($DADVT.$DAJobsEXPFactions == null)">
							<set_value name="$DADVT.$DAJobsEXPFactions" exact="[faction.argon, faction.antigone, faction.paranid, faction.holyorder, faction.teladi, faction.split, faction.terran, faction.xenon]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExcludedFactions? or ($DAJobsEXPExcludedFactions == null)">
							<create_list name="$DAJobsEXPExcludedFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPTags? or ($DAJobsEXPTags == null)">
							<set_value name="$DAJobsEXPTags" exact="[tag.daexpedition]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPEnemiesTable? or ($DAJobsEXPEnemiesTable == null)">
							<set_value name="$DAJobsEXPEnemiesTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPAlliesTable? or ($DAJobsEXPAlliesTable == null)">
							<set_value name="$DAJobsEXPAlliesTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPErrorFactions? or ($DAJobsEXPErrorFactions == null)">
							<create_list name="$DAJobsEXPErrorFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPActiveExpeditionFleets? or ($DAJobsEXPActiveExpeditionFleets == null)">
							<create_group groupname="$DAJobsEXPActiveExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPReadyExpeditionFleets? or ($DAJobsEXPReadyExpeditionFleets == null)">
							<create_group groupname="$DAJobsEXPReadyExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPPreparingExpeditionFleets? or ($DAJobsEXPPreparingExpeditionFleets == null)">
							<create_group groupname="$DAJobsEXPPreparingExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol? or ($DAJobsEXPExpeditionFleetsFixedPatrol == null)">
							<create_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsEXPDetailedDebug? or (not ((typeof $DADVT.$DAJobsEXPDetailedDebug == datatype.integer) and (($DADVT.$DAJobsEXPDetailedDebug == 1) or ($DADVT.$DAJobsEXPDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAJobsEXPDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExpeditionJobs? or ($DAJobsEXPExpeditionJobs == null)">
							<set_value name="$DAJobsEXPExpeditionJobs" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAJobsEXP -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Jobs - SmartSectorTags // Timer Cues -->
				<cue name="TimerJobsSST" instantiate="true" checkinterval="60min" checktime="19min" comment="Timer 19">
					<conditions>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
					</conditions>
					<actions>
						<do_if value="$DAJSST.$PrerequisitesComplete">
							<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Started processing all factions.'" context="false" filter="scripts"/>
								<set_value name="$DAJSST.$DAJobsSSTTimeScriptStarted" exact="player.age"/>
							</do_if>
							<set_value name="$DAJSST.$PrerequisitesComplete" exact="false"/>
							<run_actions ref="LibraryJobsSSTCheckFactions"/>
							<!-- Signal CheckSectors which will handle calculation spreading -->
							<signal_cue_instantly cue="EventJobsSSTFindSectors"/>
							<!-- EventJobsSSTFindSectors will signal CheckJobs when it has completed -->
						</do_if>
						<do_elseif value="not $DAJSST.$PrerequisitesComplete">
							<debug_text text="'MOD: DAJobsSST -- Attempted to run script prior to completion of previous.'" context="true" filter="error"/>
						</do_elseif>
					</actions>
				</cue>
				<cue name="TimerJobsSSTOrderShips" instantiate="true" checkinterval="15min" checktime="15min" comment="Timer 15">
					<conditions>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
						<check_value value="$DAJSST.$PrerequisitesComplete"/>
						<check_value value="$DAJSST.$ReadyToOrderShips"/>
						<check_value value="$DADVT.$DAJobsSSTJobSizeQuotas.keys.list.count" min="1"/>
						<check_value value="$DAJSST.$JobsActivated.keys.list.count" min="1"/>
					</conditions>
					<actions>
						<!-- Reworked 20240520
							- Code now checks one tag for one faction per run
							- Much more spread out calculations
						-->
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<debug_text text="'MOD: DAJobsSST -- Started ordering ships.'" context="false" filter="scripts"/>
							<set_value name="$DAJobsSSTTimeOrderingStarted" exact="player.age"/>
						</do_if>
						<set_value name="$DAJSST.$ReadyToOrderShips" exact="false"/>
						<set_value name="$DAJobsSSTCheckFactionsForOrders" exact="$DADVT.$DAJobsSSTJobSizeQuotas.keys.list"/>
						<set_value name="$DAJobsSSTLocPossibleTags" exact="['$CriticalTag','$CoreTag','$BorderTag','$ContestedTag','$LTraderTag','$MTraderTag','$LMinerTag','$MMinerTag','$LGasMinerTag','$MGasMinerTag']"/>
					</actions>
					<cues>
						<cue name="JobsSSTOrderShipsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$DAJobsSSTCheckFactionsForOrders.count" min="1">
									<do_if value="not $DAJobsSSTOrderFaction?">
										<set_value name="$DAJobsSSTOrderFaction" exact="$DAJobsSSTCheckFactionsForOrders.{1}"/>
									</do_if>
									<do_if value="not $DAJobsSSTLocTagsToCheck?">
										<set_value name="$DAJobsSSTLocTagsToCheck" exact="[]"/>
										<do_for_each name="$DAJobsSSTLocPossibleTag" in="$DAJobsSSTLocPossibleTags">
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.{$DAJobsSSTLocPossibleTag}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.{$DAJobsSSTLocPossibleTag}.count">
												<append_to_list name="$DAJobsSSTLocTagsToCheck" exact="$DAJobsSSTLocPossibleTag"/>
											</do_if>
										</do_for_each>
									</do_if>
									<do_if value="$DAJobsSSTLocTagsToCheck.count" min="1">
										<set_value name="$DAJobsSSTOrderTag" exact="$DAJobsSSTLocTagsToCheck.{1}"/>
										<run_actions ref="LibraryJobsSSTOrderShips">
											<param name="LocFaction" value="$DAJobsSSTOrderFaction"/>
											<param name="LocWhichTag" value="$DAJobsSSTOrderTag"/>
										</run_actions>
										<remove_from_list name="$DAJobsSSTLocTagsToCheck" exact="$DAJobsSSTOrderTag" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_if value="$DAJobsSSTLocTagsToCheck.count == 0">
										<remove_from_list name="$DAJobsSSTCheckFactionsForOrders" exact="$DAJobsSSTOrderFaction" multiple="true"/>
										<remove_value name="$DAJobsSSTOrderFaction"/>
										<remove_value name="$DAJobsSSTLocTagsToCheck"/>
										<reset_cue cue="this"/>
									</do_if>
								</do_if>
								<do_else>
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to order all ships: %s'.[(player.age - @$DAJobsSSTTimeOrderingStarted).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<set_value name="$DAJSST.$ReadyToOrderShips" exact="true"/>
									<remove_value name="$DAJobsSSTOrderFaction"/>
									<remove_value name="$DAJobsSSTLocTagsToCheck"/>
									<remove_value name="$DAJobsSSTTimeOrderingStarted"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Jobs - SmartSectorTags // Update on load cues -->
				<cue name="UpdateOnLoadJobsSSTFindFactions" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
						<check_any>
							<check_value value="not $UpdateOnLoadJobsSSTFindFactionsTimer?"/>
							<check_value value="$UpdateOnLoadJobsSSTFindFactionsTimer? and (player.age gt $UpdateOnLoadJobsSSTFindFactionsTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadJobsSSTFindFactionsTimer" exact="player.age + 5s"/>
						<signal_cue_instantly cue="EventJobsSSTInitializeTables"/>
					</actions>
				</cue>
				<!-- Jobs - SmartSectorTags // Event cues -->
				<cue name="EventJobsSSTInitializeTables" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<set_value name="$LocDebug" exact="if event.param? then event.param else false"/>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Adding tracking variable for initial value overrides. This will prevent it from overriding potentially changed player values this instance -->
						<do_if value="not $DAJSST.$OverrideDefaultExecuted?">
							<set_value name="$DAJSST.$OverrideDefaultExecuted" exact="false"/>
						</do_if>
						<!-- DONE: Make partial tables for certain factions (like freesplit with no military) -->
						<!-- DONE: Signal table set up via menu, check for job to determine if tag is applicable -->
						<!-- DONE: Cue now handles deactivating jobs if JobsSST is deactivated -->
						<!-- Find claimspace factions -->
						<set_value name="$LocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$LocClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$LocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$LocVisitorList"/>
						<!-- Remove unwanted from LocClaimspaceList -->
						<remove_from_list name="$LocClaimspaceList" list="$LocVisitorList" multiple="true"/>
						<remove_value name="$LocVisitorList"/>
						<!-- Hard coding factions that are not supported. May change to a variable but these factions either have restrictions to jobs or lack logic -->
						<!-- 20240514 Transitioning to $DADVT.$DAJobsSSTUnsupportedFactions -->
						<!-- Check Factions-->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								Special handling required for Eco tags
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LTraderTag' == [$LocLTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MTraderTag' == [$LocMTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LMinerTag' == [$LocLMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MMinerTag' == [$LocMMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LGasMinerTag' == [$LocLGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MGasMinerTag' == [$LocMGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<set_value name="$LocDebugString" exact="'MOD: DAJobsSST -- $DAJobsSSTJobSizeQuotas Report:'"/>
						<do_for_each name="$LocFaction" in="$LocClaimspaceList" counter="$A">
							<set_value name="$LocDebugString" exact="'\n  (%s) %s:'.[$A,$LocFaction.id]" operation="add"/>
							<do_if value="$LocFaction.isactive and $LocFaction.willclaimspace and (not $DADVT.$DAJobsSSTUnsupportedFactions.indexof.{$LocFaction})">
								<!-- Only setting up new entries for factions, cleaning up would revert user settings -->
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}?)">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}" exact="table[]"/>
								</do_if>
								<!-- Critical Tag -->
								<set_value name="$LocCriticalTagText" exact="'DACriticalTag' + $LocFaction.id"/>
								<set_value name="$LocCriticalTag" exact="tag.{$LocCriticalTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocCriticalTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<do_if value="$LocFaction == faction.xenon">
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag" exact="[$LocCriticalTag,2,14,2,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag" exact="[$LocCriticalTag,2,1,1,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}"/>
									</do_else>
									<set_value name="$LocDebugString" exact="' $CriticalTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $CriticalTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $CriticalTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocCriticalTagText"/>
								<remove_value name="$LocCriticalTag"/>
								<remove_value name="$LocJobs"/>
								<!-- Core Tag -->
								<set_value name="$LocCoreTagText" exact="'DACoreTag' + $LocFaction.id"/>
								<set_value name="$LocCoreTag" exact="tag.{$LocCoreTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocCoreTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag" exact="[$LocCoreTag,2,20,1,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $CoreTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $CoreTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $CoreTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocCoreTagText"/>
								<remove_value name="$LocCoreTag"/>
								<remove_value name="$LocJobs"/>
								<!-- Border Tag -->
								<set_value name="$LocBorderTagText" exact="'DABorderTag' + $LocFaction.id"/>
								<set_value name="$LocBorderTag" exact="tag.{$LocBorderTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocBorderTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag" exact="[$LocBorderTag,2,20,2,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $BorderTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $BorderTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $BorderTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocBorderTagText"/>
								<remove_value name="$LocBorderTag"/>
								<remove_value name="$LocJobs"/>
								<!-- Contested Tag -->
								<set_value name="$LocContestedTagText" exact="'DAContestedTag' + $LocFaction.id"/>
								<set_value name="$LocContestedTag" exact="tag.{$LocContestedTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocContestedTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag" exact="[$LocContestedTag,2,8,2,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $ContestedTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $ContestedTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $ContestedTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocBorderTagText"/>
								<remove_value name="$LocBorderTag"/>
								<remove_value name="$LocJobs"/>
								<!-- LTrader Tag -->
								<!-- MAYBE: change {2} $FleetSize to logic. {2} is vanilla, {1} tater -->
								<set_value name="$LocLTraderTagText" exact="'DALTraderTag' + $LocFaction.id"/>
								<set_value name="$LocLTraderTag" exact="tag.{$LocLTraderTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocLTraderTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag" exact="[$LocLTraderTag,2,20,2,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $LTraderTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $LTraderTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $LTraderTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocLTraderTagText"/>
								<remove_value name="$LocLTraderTag"/>
								<remove_value name="$LocJobs"/>
								<!-- MTrader Tag -->
								<!-- MAYBE: change {2} $FleetSize to logic. {2} is vanilla, {1} tater -->
								<set_value name="$LocMTraderTagText" exact="'DAMTraderTag' + $LocFaction.id"/>
								<set_value name="$LocMTraderTag" exact="tag.{$LocMTraderTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocMTraderTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<do_if value="$LocFaction == faction.xenon">
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag" exact="[$LocMTraderTag,2,15,1,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag" exact="[$LocMTraderTag,2,20,2,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}"/>
									</do_else>
									<set_value name="$LocDebugString" exact="' $MTraderTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $MTraderTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $MTraderTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocMTraderTagText"/>
								<remove_value name="$LocMTraderTag"/>
								<remove_value name="$LocJobs"/>
								<!-- LMiner Tag -->
								<set_value name="$LocLMinerTagText" exact="'DALMinerTag' + $LocFaction.id"/>
								<set_value name="$LocLMinerTag" exact="tag.{$LocLMinerTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocLMinerTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag" exact="[$LocLMinerTag,2,4,2,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $LMinerTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $LMinerTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $LMinerTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocLMinerTagText"/>
								<remove_value name="$LocLMinerTag"/>
								<remove_value name="$LocJobs"/>
								<!-- MMiner Tag -->
								<set_value name="$LocMMinerTagText" exact="'DAMMinerTag' + $LocFaction.id"/>
								<set_value name="$LocMMinerTag" exact="tag.{$LocMMinerTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocMMinerTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<do_if value="$LocFaction == faction.xenon">
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag" exact="[$LocMMinerTag,2,45,3,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag" exact="[$LocMMinerTag,2,10,5,null,[],null,[]]"/>
										<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}"/>
									</do_else>
									<set_value name="$LocDebugString" exact="' $MMinerTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $MMinerTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $MMinerTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocMMinerTagText"/>
								<remove_value name="$LocMMinerTag"/>
								<remove_value name="$LocJobs"/>
								<!-- LGasMiner Tag -->
								<set_value name="$LocLGasMinerTagText" exact="'DALGasMinerTag' + $LocFaction.id"/>
								<set_value name="$LocLGasMinerTag" exact="tag.{$LocLGasMinerTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocLGasMinerTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag" exact="[$LocLGasMinerTag,2,4,2,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $LGasMinerTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $LGasMinerTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $LGasMinerTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocLGasMinerTagText"/>
								<remove_value name="$LocLGasMinerTag"/>
								<remove_value name="$LocJobs"/>
								<!-- MGasMiner Tag -->
								<set_value name="$LocMGasMinerTagText" exact="'DAMGasMinerTag' + $LocFaction.id"/>
								<set_value name="$LocMGasMinerTag" exact="tag.{$LocMGasMinerTagText}"/>
								<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocMGasMinerTag" includeinactive="true" force="true" multiple="true"/>
								<do_if value="(not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag?) and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag" exact="[$LocMGasMinerTag,2,10,5,null,[],null,[]]"/>
									<create_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}"/>
									<set_value name="$LocDebugString" exact="' $MGasMinerTag,'" operation="add"/>
								</do_if>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag? and @$LocJobs.count and $DADVT.$DAJobsSSTEnable">
									<set_value name="$LocDebugString" exact="' $MGasMinerTag,'" operation="add"/>
								</do_elseif>
								<do_elseif value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag? and (not @$LocJobs.count)">
									<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag"/>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed $MGasMinerTag'.[$LocFaction.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<do_elseif value="@$LocJobs.count and (not $DADVT.$DAJobsSSTEnable)">
									<do_for_each name="$LocJob" in="$LocJobs">
										<check_job_active result="$LocJobisActive" job="$LocJob"/>
										<do_if value="$LocJobisActive">
											<set_job_active activate="false" job="$LocJob"/>
										</do_if>
										<remove_value name="$LocJobisActive"/>
									</do_for_each>
								</do_elseif>
								<remove_value name="$LocMGasMinerTagText"/>
								<remove_value name="$LocMGasMinerTag"/>
								<remove_value name="$LocJobs"/>
							</do_if>
							<do_elseif value="$DADVT.$DAJobsSSTUnsupportedFactions.indexof.{$LocFaction} and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}?">
								<remove_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}"/>
							</do_elseif>
						</do_for_each>
						<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug or $LocDebug">
							<debug_text text="'MOD: DAJobsSST -- Initial Faction Check Complete -- SST Factions: %s -- Claimspace Factions: %s'.[$DADVT.$DAJobsSSTJobSizeQuotas.keys.list.count,$LocClaimspaceList.count]" context="false" filter="scripts"/>
							<debug_text text="$LocDebugString" context="false" filter="scripts"/>
						</do_if>
						<!-- Inlcude default override library for easy diff changes -->
						<do_if value="$DAJSST.$OverrideDefaultExecuted? and ($DAJSST.$OverrideDefaultExecuted == false)">
							<include_actions ref="LibraryJobsSSTOverrideDefault"/>
							<!-- 20240722 Forgot to set the override tracking to true -->
							<set_value name="$DAJSST.$OverrideDefaultExecuted" exact="true"/>
						</do_if>
						<remove_value name="$LocClaimspaceList"/>
						<remove_value name="$LocDebugString"/>
						<remove_value name="$LocDebug"/>
					</actions>
				</cue>
				<cue name="EventJobsSSTFindSectors" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<find_sector groupname="$DAJSST.$AllSectorGroup" multiple="true">
							<match_parent normalcluster="true"/>
						</find_sector>
						<set_value name="$LocAllSectors" exact="$DAJSST.$AllSectorGroup.list"/>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$LocStartTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started processing all sectors.'" context="false" filter="scripts"/>
						</do_if>
						<sort_list list="$LocAllSectors" sortbyvalue="loop.element.macro"/>
					</actions>
					<cues>
						<cue name="JobsSSTCheckSectorsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$LocAllSectors.count" min="1">
									<set_value name="$LocSector" exact="$LocAllSectors.{1}"/>
									<run_actions ref="LibraryJobsSSTProcessSector">
										<param name="LocSector" value="$LocSector"/>
									</run_actions>
									<remove_from_list name="$LocAllSectors" exact="$LocSector" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<run_actions ref="LibraryJobsSSTFactionSituationDebug"/>
										</do_if>
										<debug_text text="'MOD: DAJobsSST -- Time to process all sectors: %s'.[(player.age - @$LocStartTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocSector"/>
									<remove_value name="$LocAllSectors"/>
									<remove_value name="$LocStartTime"/>
									<!-- Signal job check -->
									<signal_cue_instantly cue="EventJobsSSTFindSectorTags"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTFindSectorTags" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<find_sector groupname="$DAJSST.$AllSectorGroup" multiple="true">
							<match_parent normalcluster="true"/>
						</find_sector>
						<set_value name="$LocAllSectors" exact="$DAJSST.$AllSectorGroup.list"/>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$LocStartTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started processing all sector tags.'" context="false" filter="scripts"/>
						</do_if>
						<sort_list list="$LocAllSectors" sortbyvalue="loop.element.macro"/>
					</actions>
					<cues>
						<cue name="JobsSSTCheckSectorTagsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$LocAllSectors.count" min="1">
									<set_value name="$LocSector" exact="$LocAllSectors.{1}"/>
									<run_actions ref="LibraryJobsSSTProcessSectorTags">
										<param name="LocSector" value="$LocSector"/>
									</run_actions>
									<remove_from_list name="$LocAllSectors" exact="$LocSector" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to process all sector tags: %s'.[(player.age - @$LocStartTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocSector"/>
									<remove_value name="$LocAllSectors"/>
									<remove_value name="$LocStartTime"/>
									<signal_cue_instantly cue="EventJobsSSTFindJobs"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTFindJobs" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Reworked 20240520
							- Code now checks one tag for one faction per run
							- Much more spread out calculations
							- Checks galaxy quota and sector quota when deciding to activate/deactivate
							- Adds appropriate jobs to $LocActivateJobs or $LocDeactivateJobs
						-->
						<set_value name="$LocActivateJobs" exact="[]"/>
						<set_value name="$LocDeactivateJobs" exact="[]"/>
						<set_value name="$LocCriticalChecked" exact="false"/>
						<set_value name="$LocCriticalFactions" exact="$DAJSST.$CriticalSectors.keys.list"/>
						<set_value name="$LocCoreChecked" exact="false"/>
						<set_value name="$LocCoreFactions" exact="$DAJSST.$CoreSectors.keys.list"/>
						<set_value name="$LocBorderChecked" exact="false"/>
						<set_value name="$LocBorderFactions" exact="$DAJSST.$BorderSectors.keys.list"/>
						<set_value name="$LocContestedChecked" exact="false"/>
						<set_value name="$LocContestedFactions" exact="$DAJSST.$ContestedSectors.keys.list"/>
						<set_value name="$LocLTraderChecked" exact="false"/>
						<set_value name="$LocLTraderFactions" exact="$DAJSST.$TraderSectors.keys.list"/>
						<set_value name="$LocMTraderChecked" exact="false"/>
						<set_value name="$LocMTraderFactions" exact="$DAJSST.$TraderSectors.keys.list"/>
						<set_value name="$LocLMinerChecked" exact="false"/>
						<set_value name="$LocLMinerFactions" exact="$DAJSST.$MinerSectors.keys.list"/>
						<set_value name="$LocMMinerChecked" exact="false"/>
						<set_value name="$LocMMinerFactions" exact="$DAJSST.$MinerSectors.keys.list"/>
						<set_value name="$LocLGasMinerChecked" exact="false"/>
						<set_value name="$LocLGasMinerFactions" exact="$DAJSST.$GasMinerSectors.keys.list"/>
						<set_value name="$LocMGasMinerChecked" exact="false"/>
						<set_value name="$LocMGasMinerFactions" exact="$DAJSST.$GasMinerSectors.keys.list"/>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$DAJobsSSTFindJobsTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started finding all jobs.'" context="false" filter="scripts"/>
						</do_if>
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								Special handling required for Eco tags
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LTraderTag' == [$LocLTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MTraderTag' == [$LocMTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LMinerTag' == [$LocLMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MMinerTag' == [$LocMMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LGasMinerTag' == [$LocLGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MGasMinerTag' == [$LocMGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
					</actions>
					<cues>
						<cue name="JobsSSTCheckJobLoop">
							<delay exact="500ms"/>
							<actions>
								<!-- Set up common list of fleet size tags -->
								<set_value name="$LocFleetSizeTags" exact="[tag.DASmallFleet,tag.DAMediumFleet,tag.DALargeFleet]"/>
								<do_if value="not $LocCriticalChecked">
									<do_if value="$LocCriticalFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocCriticalFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DACriticalTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$CriticalSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{3} -->
											<do_if value="$DAJSST.$CriticalSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="[$DAJobsSSTLocTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
												<remove_value name="$LocFleetSizeTag"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$CriticalSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CriticalTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocCriticalFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocCriticalFactions"/>
										<set_value name="$LocCriticalChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_if>
								<do_elseif value="not $LocCoreChecked">
									<do_if value="$LocCoreFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocCoreFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DACoreTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$CoreSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{3} -->
											<do_if value="$DAJSST.$CoreSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="[$DAJobsSSTLocTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
												<remove_value name="$LocFleetSizeTag"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$CoreSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$CoreTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocCoreFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocCoreFactions"/>
										<set_value name="$LocCoreChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocBorderChecked">
									<do_if value="$LocBorderFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocBorderFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DABorderTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$BorderSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{3} -->
											<do_if value="$DAJSST.$BorderSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="[$DAJobsSSTLocTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
												<remove_value name="$LocFleetSizeTag"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$BorderSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$BorderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocBorderFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocBorderFactions"/>
										<set_value name="$LocBorderChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocContestedChecked">
									<do_if value="$LocContestedFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocContestedFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DAContestedTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$ContestedSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{3} -->
											<do_if value="$DAJSST.$ContestedSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="[$DAJobsSSTLocTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
												<remove_value name="$LocFleetSizeTag"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$ContestedSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$ContestedTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocContestedFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocContestedFactions"/>
										<set_value name="$LocContestedChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocLTraderChecked">
									<do_if value="$LocLTraderFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocLTraderFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DALTraderTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$TraderSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{3} -->
											<do_if value="$DAJSST.$TraderSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$TraderSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LTraderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocLTraderFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocLTraderFactions"/>
										<set_value name="$LocLTraderChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocMTraderChecked">
									<do_if value="$LocMTraderFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocMTraderFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DAMTraderTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$TraderSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{3} -->
											<do_if value="$DAJSST.$TraderSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$TraderSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MTraderTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocMTraderFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocMTraderFactions"/>
										<set_value name="$LocMTraderChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocLMinerChecked">
									<do_if value="$LocLMinerFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocLMinerFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DALMinerTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$MinerSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{3} -->
											<do_if value="$DAJSST.$MinerSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$MinerSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocLMinerFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocLMinerFactions"/>
										<set_value name="$LocLMinerChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocMMinerChecked">
									<do_if value="$LocMMinerFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocMMinerFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DAMMinerTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$MinerSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{3} -->
											<do_if value="$DAJSST.$MinerSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$MinerSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocMMinerFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocMMinerFactions"/>
										<set_value name="$LocMMinerChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocLGasMinerChecked">
									<do_if value="$LocLGasMinerFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocLGasMinerFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DALGasMinerTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$GasMinerSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{3} -->
											<do_if value="$DAJSST.$GasMinerSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$GasMinerSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$LGasMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocLGasMinerFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocLGasMinerFactions"/>
										<set_value name="$LocLGasMinerChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="not $LocMGasMinerChecked">
									<do_if value="$LocMGasMinerFactions.count" min="1">
										<set_value name="$DAJobsSSTLocFactionToCheck" exact="$LocMGasMinerFactions.{1}"/>
										<do_if value="$DAJSST.$ClaimspaceFactions.indexof.{$DAJobsSSTLocFactionToCheck} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.count">
											<set_value name="$DAJobsSSTLocTagText" exact="'DAMGasMinerTag' + $DAJobsSSTLocFactionToCheck.id"/>
											<set_value name="$DAJobsSSTLocTag" exact="tag.{$DAJobsSSTLocTagText}"/>
											<!-- Only check for correct job on factions that have $DAJSST.$GasMinerSectors and (galaxy quota gt 0) $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{3} -->
											<do_if value="$DAJSST.$GasMinerSectors.{$DAJobsSSTLocFactionToCheck}.count and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{3} and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{4}">
												<set_value name="$DAJobsSSTLocCorrectJob" exact="null"/>
												<!-- Eco doesn't use fleetsize // get suitable jobs $DAJobsSSTCorrectJobs // process -->
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="false"/>
												<do_if value="$DAJobsSSTLocCorrectJob and ($DAJobsSSTLocCorrectJob != '')">
													<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
													<append_to_list name="$LocActivateJobs" exact="$DAJobsSSTLocCorrectJob"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND CORRECT JOB -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<!-- Possibilities:
															No Job Found - We should only be searching factions that definitely have the job
															Error
													-->
												</do_else>
												<!-- Find and deactivate other jobs -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="true" force="true" multiple="true"/>
												<!-- Multiple will always result in a list -->
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob and ($DAJobsSSTLocCorrectJob != $DAJobsSSTLocJob)">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s -- CorrectJob: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob,$DAJobsSSTLocCorrectJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
												<remove_value name="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_elseif value="(not $DAJSST.$GasMinerSectors.{$DAJobsSSTLocFactionToCheck}.count) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{3}) or (not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{4})">
												<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria or galaxy quota is 0 -->
												<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocFactionToCheck" tags="$DAJobsSSTLocTag" includeinactive="false" force="true" multiple="true"/>
												<do_if value="$DAJobsSSTLocJobs? and $DAJobsSSTLocJobs.count">
													<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
														<do_if value="$DAJobsSSTLocJob">
															<check_job_active result="$DAJobsSSTLocJobIsActive" job="$DAJobsSSTLocJob"/>
															<do_if value="$DAJobsSSTLocJobIsActive">
																<append_to_list name="$LocDeactivateJobs" exact="$DAJobsSSTLocJob"/>
																<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE -- Tag: %s -- Job: %s'.[$DAJobsSSTLocFactionToCheck.knownname,$DAJobsSSTLocTag,$DAJobsSSTLocJob]" context="false" filter="scripts"/>
																</do_if>
															</do_if>
															<remove_value name="$DAJobsSSTLocJobIsActive"/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_elseif value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- %s -- NO JOBS FOUND -- $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{5}: %s'.[$DAJobsSSTLocFactionToCheck.knownname,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocFactionToCheck}.$MGasMinerTag.{5}]" context="false" filter="scripts"/>
												</do_elseif>
												<remove_value name="$DAJobsSSTLocJobs"/>
											</do_elseif>
											<remove_value name="$DAJobsSSTLocTagText"/>
											<remove_value name="$DAJobsSSTLocTag"/>
										</do_if>
										<remove_from_list name="$LocMGasMinerFactions" exact="$DAJobsSSTLocFactionToCheck" multiple="true"/>
										<reset_cue cue="this"/>
									</do_if>
									<do_else>
										<remove_value name="$DAJobsSSTLocFactionToCheck"/>
										<remove_value name="$LocMGasMinerFactions"/>
										<set_value name="$LocMGasMinerChecked" exact="true"/>
										<reset_cue cue="this"/>
									</do_else>
								</do_elseif>
								<do_elseif value="$LocCriticalChecked and $LocCoreChecked and $LocBorderChecked and $LocContestedChecked and $LocLTraderChecked and $LocMTraderChecked and $LocLMinerChecked and $LocMMinerChecked and $LocLGasMinerChecked and $LocMGasMinerChecked">
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to find all jobs: %s'.[(player.age - @$DAJobsSSTFindJobsTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocFleetSizeTags"/>
									<remove_value name="$DAJobsSSTFindJobsTime"/>
									<signal_cue_instantly cue="EventJobsSSTActivateJobs" param="[$LocActivateJobs,$LocDeactivateJobs]"/>
									<remove_value name="$LocActivateJobs"/>
									<remove_value name="$LocDeactivateJobs"/>
									<remove_value name="$LocCriticalChecked"/>
									<remove_value name="$LocCriticalFactions"/>
									<remove_value name="$LocCoreChecked"/>
									<remove_value name="$LocCoreFactions"/>
									<remove_value name="$LocBorderChecked"/>
									<remove_value name="$LocBorderFactions"/>
									<remove_value name="$LocContestedChecked"/>
									<remove_value name="$LocContestedFactions"/>
									<remove_value name="$LocLTraderChecked"/>
									<remove_value name="$LocLTraderFactions"/>
									<remove_value name="$LocMTraderChecked"/>
									<remove_value name="$LocMTraderFactions"/>
									<remove_value name="$LocLMinerChecked"/>
									<remove_value name="$LocLMinerFactions"/>
									<remove_value name="$LocMMinerChecked"/>
									<remove_value name="$LocMMinerFactions"/>
									<remove_value name="$LocLGasMinerChecked"/>
									<remove_value name="$LocLGasMinerFactions"/>
									<remove_value name="$LocMGasMinerChecked"/>
									<remove_value name="$LocMGasMinerFactions"/>
								</do_elseif>
								<do_else>
									<!-- Error -->
									<debug_text text="'MOD: DAJobsSST -- ERROR in EventJobsSSTFindJobs Cue'" context="true" filter="error"/>
									<remove_value name="$LocFleetSizeTags"/>
									<remove_value name="$DAJobsSSTFindJobsTime"/>
									<signal_cue_instantly cue="EventJobsSSTActivateJobs" param="[[],[]]"/>
									<remove_value name="$LocActivateJobs"/>
									<remove_value name="$LocDeactivateJobs"/>
									<remove_value name="$LocCriticalChecked"/>
									<remove_value name="$LocCriticalFactions"/>
									<remove_value name="$LocCoreChecked"/>
									<remove_value name="$LocCoreFactions"/>
									<remove_value name="$LocBorderChecked"/>
									<remove_value name="$LocBorderFactions"/>
									<remove_value name="$LocContestedChecked"/>
									<remove_value name="$LocContestedFactions"/>
									<remove_value name="$LocLTraderChecked"/>
									<remove_value name="$LocLTraderFactions"/>
									<remove_value name="$LocMTraderChecked"/>
									<remove_value name="$LocMTraderFactions"/>
									<remove_value name="$LocLMinerChecked"/>
									<remove_value name="$LocLMinerFactions"/>
									<remove_value name="$LocMMinerChecked"/>
									<remove_value name="$LocMMinerFactions"/>
									<remove_value name="$LocLGasMinerChecked"/>
									<remove_value name="$LocLGasMinerFactions"/>
									<remove_value name="$LocMGasMinerChecked"/>
									<remove_value name="$LocMGasMinerFactions"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTActivateJobs" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<set_value name="$LocActivateJobs" exact="event.param.{1}"/>
						<set_value name="$JobsToDeactivate" exact="event.param.{2}"/>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$LocStartTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started activating all jobs. Count: %s -- Passing Deactivate Count: %s'.[@$LocActivateJobs.count,@$JobsToDeactivate.count]" context="false" filter="scripts"/>
						</do_if>
					</actions>
					<cues>
						<cue name="JobsSSTActivateJobsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$LocActivateJobs.count">
									<set_value name="$LocJob" exact="$LocActivateJobs.{1}"/>
									<do_if value="$LocJob? and $LocJob != null">
										<run_actions ref="LibraryJobsSSTActivateJob">
											<param name="LocJob" value="$LocJob"/>
										</run_actions>
									</do_if>
									<remove_from_list name="$LocActivateJobs" exact="$LocJob" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to activate all jobs: %s'.[(player.age - @$LocStartTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocJob"/>
									<remove_value name="$LocActivateJobs"/>
									<remove_value name="$LocStartTime"/>
									<signal_cue_instantly cue="EventJobsSSTDeactivateJobs" param="$JobsToDeactivate"/>
									<remove_value name="$JobsToDeactivate"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTDeactivateJobs" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<set_value name="$LocDeactivateJobs" exact="event.param"/>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$LocStartTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started deactivating jobs. Count: %s'.[@$LocDeactivateJobs.count]" context="false" filter="scripts"/>
						</do_if>
					</actions>
					<cues>
						<cue name="JobsSSTDeactivateJobsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$LocDeactivateJobs.count">
									<set_value name="$LocJob" exact="$LocDeactivateJobs.{1}"/>
									<do_if value="$LocJob? and $LocJob != null">
										<run_actions ref="LibraryJobsSSTDeactivateJob">
											<param name="LocJob" value="$LocJob"/>
										</run_actions>
									</do_if>
									<remove_from_list name="$LocDeactivateJobs" exact="$LocJob" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<!-- Done with basic functionality -->
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to deactivate all jobs: %s'.[(player.age - @$LocStartTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocJob"/>
									<remove_value name="$LocDeactivateJobs"/>
									<remove_value name="$LocStartTime"/>
									<signal_cue_instantly cue="EventJobsSSTCheckForRecycle"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTCheckForRecycle" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
							<set_value name="$LocStartTime" exact="player.age"/>
							<debug_text text="'MOD: DAJobsSST -- Started recycling ships.'" context="false" filter="scripts"/>
						</do_if>
					</actions>
					<cues>
						<cue name="JobsSSTRecycleShipsLoop">
							<delay exact="1s"/>
							<actions>
								<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
								<do_if value="$DAJSST.$CheckForRecycleTable.keys.count" min="1">
									<set_value name="$LocSector" exact="$DAJSST.$CheckForRecycleTable.keys.list.{1}"/>
									<do_if value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and $DAJSST.$CheckForRecycleTable.{$LocSector}.keys.count">
										<do_for_each name="$LocFaction" in="$DAJSST.$CheckForRecycleTable.{$LocSector}.keys.list">
											<do_if value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.count" min="1">
												<run_actions ref="LibraryJobsSSTCheckForRecycle">
													<param name="LocSector" value="$LocSector"/>
													<param name="LocFaction" value="$LocFaction"/>
												</run_actions>
											</do_if>
										</do_for_each>
									</do_if>
									<remove_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<!-- Done with basic functionality -->
									<do_if value="$DAJSST.$ShipsToRecycle? and $DAJSST.$ShipsToRecycle.count">
										<run_actions ref="LibraryJobsSSTCheckForRecyclePeriodic"/>
									</do_if>
									<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Time to recycle all ships: %s'.[(player.age - @$LocStartTime).formatted.default]" context="false" filter="scripts"/>
										<debug_text text="'MOD: DAJobsSST -- Total time of script run: %s'.[(player.age - $DAJSST.$DAJobsSSTTimeScriptStarted).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocSector"/>
									<remove_value name="$LocStartTime"/>
									<set_value name="$DAJSST.$PrerequisitesComplete" exact="true"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTRequestJobShip" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								Special handling required for Eco tags
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LTraderTag' == [$LocLTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MTraderTag' == [$LocMTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LMinerTag' == [$LocLMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MMinerTag' == [$LocMMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LGasMinerTag' == [$LocLGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MGasMinerTag' == [$LocMGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<!-- DONE: TEST // Seems to be working but some ships aren't getting removed from tracking or their sector isn't -->
						<request_job_ship name="this.$LocRequestedShip" job="event.param.{1}" requester="event.param.{2}" zone="event.param.{3}"/>
						<do_if value="this.$LocRequestedShip">
							<set_value name="this.$LocJobID" exact="event.param.{1}"/>
							<set_value name="this.$LocSector" exact="event.param.{2}"/>
							<set_value name="this.$LocZone" exact="event.param.{3}"/>
							<set_value name="this.$LocFaction" exact="event.param.{4}"/>
							<set_value name="this.$LocWhichTag" exact="event.param.{5}"/>
							<append_to_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{6}" exact="this.$LocRequestedShip"/>
							<append_to_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{8}" exact="this.$LocSector"/>
							<do_if value="md.$DADynamicVarTable.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Placed %s Request for %s -- $Sector: %s -- Job: %s -- LocRequestedShip: %s -- $PendingJobShips.count: %s -- $SectorsWithRequested.count: %s'.[this.$LocWhichTag,this.$LocFaction,this.$LocSector.knownname,this.$LocJobID,this.$LocRequestedShip,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{6}.count,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{8}.count]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_else>
							<cancel_cue cue="EventJobsSSTRequestJobShip"/>
						</do_else>
					</actions>
					<cues>
						<!-- Called when a requested jobship finished construction -->
						<cue name="EventJobsSSTShipBuilt">
							<conditions>
								<event_object_signalled object="parent.$LocRequestedShip" param="'build.shiptrader'" param2="'requested_ship_built'"/>
							</conditions>
							<actions>
								<set_requested_job_ship_timeout ship="parent.$LocRequestedShip" timeout="player.age + 4h"/>
								<create_order object="parent.$LocRequestedShip" id="'RestockSubordinates'">
									<param name="init" value="true"/>
								</create_order>
								<set_value name="this.$LocString" exact="'Steps:'"/>
								<!-- Ensure Variables are Valid -->
								<do_if value="parent.$LocRequestedShip and parent.$LocFaction and parent.$LocJobID and parent.$LocWhichTag">
									<!-- Verify integrity of JobSizeQuotas table -->
									<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}? and md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}? and md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.count">
										<!-- Ensure ship is not already in tracked group and that the job matches the correct job -->
										<do_if value="(not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip}) and (md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5} == parent.$LocJobID)">
											<!-- Add the ship to the group -->
											<add_to_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}" object="parent.$LocRequestedShip"/>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not md.$DADynamicVarTable.$DAJobsSSTAllShips.indexof.{parent.$LocRequestedShip}">
												<add_to_group groupname="md.$DADynamicVarTable.$DAJobsSSTAllShips" object="parent.$LocRequestedShip"/>
											</do_if>
											<set_value name="this.$LocString" exact="' Added to group.'" operation="add"/>
											<!-- Remove the ship from $PendingJobShips -->
											<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}.indexof.{parent.$LocRequestedShip}">
												<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}" exact="parent.$LocRequestedShip" multiple="false"/>
												<set_value name="this.$LocString" exact="' Removed ship from $PendingJobShips.'" operation="add"/>
											</do_if>
											<!-- Remove one entry of the sector from $SectorsWithRequested -->
											<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}.indexof.{parent.$LocRequestedShip.jobmainsector}">
												<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}" exact="parent.$LocRequestedShip.jobmainsector" multiple="false"/>
												<set_value name="this.$LocString" exact="' Removed %s from $SectorsWithRequested.'.[parent.$LocRequestedShip.jobmainsector.knownname]" operation="add"/>
											</do_if>
										</do_if>
										<do_elseif value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip}">
											<!-- Already in group, strange but not a problem -->
											<set_value name="this.$LocString" exact="' Was Already in group.'" operation="add"/>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not md.$DADynamicVarTable.$DAJobsSSTAllShips.indexof.{parent.$LocRequestedShip}">
												<add_to_group groupname="md.$DADynamicVarTable.$DAJobsSSTAllShips" object="parent.$LocRequestedShip"/>
											</do_if>
										</do_elseif>
										<do_elseif value="not (md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5} == parent.$LocJobID)">
											<debug_text text="'MOD: DAJobsSST -- ERROR ADDING SHIP TO GROUP -- not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.{$LocWhichTag}.{5} == $LocJob -- $Jobname: %s -- $LocJob: %s'.[md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5},parent.$LocJobID]" context="true" filter="error"/>
										</do_elseif>
									</do_if>
									<do_else>
										<debug_text text="'MOD: DAJobsSST -- ERROR ADDING SHIP TO GROUP -- not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.{$LocWhichTag}.count -- $LocFaction: %s -- $LocWhichTag: %s -- $LocWhichTag.count: %s'.[@parent.$LocFaction,@parent.$LocWhichTag,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.count]" context="true" filter="error"/>
									</do_else>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAJobsSSTXtremelyDetailedDebug">
									<debug_text text="'MOD: DAJobsSST -- %s(%s) added to md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{%s}.{%s}.{7} -- $JobShipsGroup.index: %s -- JobMainSector: %s -- %s'.[parent.$LocRequestedShip.knownname,parent.$LocRequestedShip.idcode,@parent.$LocFaction,@parent.$LocWhichTag,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip},@parent.$LocRequestedShip.jobmainsector.knownname,@this.$LocString]" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="this.$LocString"/>
								<cancel_cue cue="EventJobsSSTRequestJobShip"/>
							</actions>
						</cue>
						<!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
						<cue name="EventJobsSSTShipDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$LocRequestedShip"/>
							</conditions>
							<actions>
								<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}" exact="parent.$LocRequestedShip" multiple="false"/>
								<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}" exact="parent.$LocSector" multiple="false"/>
								<cancel_cue cue="EventJobsSSTRequestJobShip"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTShipChangedOwner" instantiate="true">
					<conditions>
						<event_object_changed_owner group="$DADVT.$DAJobsSSTAllShips"/>
						<check_value value="event.object.isoperational"/>
						<check_value value="event.param2"/>
					</conditions>
					<actions>
						<!-- 20240316 Removing ships from mod tracking that have owner changes -->
						<!-- Event for the specified object changing owner (object = owner changing object, param = new owner faction, param2 = previous owner faction) -->
						<!-- Have to check ALL previous owner $Tags.{7} for ship -->
						<set_value name="$LocStolenShip" exact="event.object"/>
						<set_value name="$LocOldFaction" exact="event.param2"/>
						<do_if value="$LocStolenShip and $LocOldFaction and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}?">
							<do_for_each name="$LocTag" in="['$CriticalTag','$CoreTag','$BorderTag','$ContestedTag','$LTraderTag','$MTraderTag','$LMinerTag','$MMinerTag','$LGasMinerTag','$MGasMinerTag']">
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}.{$LocTag}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}.{$LocTag}.{7}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}.{$LocTag}.{7}.count">
									<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}.{$LocTag}.{7}.indexof.{$LocStolenShip}">
										<remove_from_group group="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocOldFaction}.{$LocTag}.{7}" object="$LocStolenShip"/>
										<debug_text text="'MOD: DAJobsSST -- Removed Ship from group after owner change -- Object: %s(%s) -- OldOwner: %s -- NewOwner: %s'.[$LocStolenShip.knownname,$LocStolenShip.idcode,$LocOldFaction,@event.param]" context="false" filter="error"/>
									</do_if>
								</do_if>
							</do_for_each>
						</do_if>
						<remove_from_group group="$DADVT.$DAJobsSSTAllShips" object="$LocStolenShip"/>
						<remove_value name="$LocStolenShip"/>
						<remove_value name="$LocOldFaction"/>
					</actions>
				</cue>
				<cue name="EventJobsSSTSectorChangedOwner" instantiate="true">
					<conditions>
						<event_object_changed_owner group="$DAJSST.$AllSectorGroup"/>
						<check_value value="false"/>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
						<check_value value="$DAJSST.$PrerequisitesComplete"/>
						<check_value value="$DAJSST.$CriticalSectors.keys.count or $DAJSST.$CoreSectors.keys.count or $DAJSST.$BorderSectors.keys.count or $DAJSST.$ContestedSectors.keys.count"/>
					</conditions>
					<actions>
						<!-- TODO: requires substantial improvements to JobsSST code to implement. disabled for now -->
						<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{event.param}? or $DADVT.$DAJobsSSTJobSizeQuotas.{event.param2}? and event.object.isclass.sector">
							<do_if value="not $DAJobsSSTLocSector?">
								<set_value name="$DAJobsSSTLocSector" exact="event.object"/>
								<run_actions ref="LibraryJobsSSTProcessSector">
									<param name="LocSector" value="$DAJobsSSTLocSector"/>
								</run_actions>
								<remove_value name="$DAJobsSSTLocSector"/>
							</do_if>
						</do_if>
					</actions>
				</cue>
				<cue name="EventJobsSSTToggleSpaceExclusivity" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- 20240514 Find all clusters and sectors, check for isexclusiveforextensionjobs -->
						<set_value name="this.$LocOption" exact="event.param"/>
						<!-- this.$ExclusiveBefore/After == [Cluster,Sector] -->
						<set_value name="this.$ExclusiveBefore" exact="[0,0]"/>
						<set_value name="this.$ExclusiveAfter" exact="[0,0]"/>
						<find_cluster name="this.$AllClusters" space="player.galaxy" multiple="true"/>
						<do_if value="this.$AllClusters.count" min="1">
							<do_for_each name="this.$LocSpace" in="this.$AllClusters">
								<do_if value="this.$LocSpace.isexclusiveforextensionjobs">
									<set_value name="this.$ExclusiveBefore.{1}" exact="1" operation="add"/>
								</do_if>
								<do_if value="this.$LocOption and this.$LocSpace.isexclusiveforextensionjobs">
									<set_space_job_exclusivity space="this.$LocSpace" exclusive="false"/>
								</do_if>
								<do_else>
									<reset_space_job_exclusivity space="this.$LocSpace"/>
								</do_else>
								<do_if value="this.$LocSpace.isexclusiveforextensionjobs">
									<set_value name="this.$ExclusiveAfter.{1}" exact="1" operation="add"/>
								</do_if>
							</do_for_each>
						</do_if>
						<find_sector name="this.$AllSectors" space="player.galaxy" multiple="true"/>
						<do_if value="this.$AllSectors.count" min="1">
							<do_for_each name="this.$LocSpace" in="this.$AllSectors">
								<do_if value="this.$LocSpace.isexclusiveforextensionjobs">
									<set_value name="this.$ExclusiveBefore.{2}" exact="1" operation="add"/>
								</do_if>
								<do_if value="this.$LocOption and this.$LocSpace.isexclusiveforextensionjobs">
									<set_space_job_exclusivity space="this.$LocSpace" exclusive="false"/>
								</do_if>
								<do_else>
									<reset_space_job_exclusivity space="this.$LocSpace"/>
								</do_else>
								<do_if value="this.$LocSpace.isexclusiveforextensionjobs">
									<set_value name="this.$ExclusiveAfter.{2}" exact="1" operation="add"/>
								</do_if>
							</do_for_each>
						</do_if>
						<debug_text text="'MOD: DAJobsSST -- EventJobsSSTToggleSpaceExclusivity -- Clusters Before: %s -- Clusters After: %s -- Sectors Before: %s -- Sectors After: %s'.[this.$ExclusiveBefore.{1},this.$ExclusiveAfter.{1},this.$ExclusiveBefore.{2},this.$ExclusiveAfter.{2}]" context="false" filter="scripts"/>
						<remove_value name="this.$LocOption"/>
						<remove_value name="this.$ExclusiveBefore"/>
						<remove_value name="this.$ExclusiveAfter"/>
						<remove_value name="this.$AllClusters"/>
						<remove_value name="this.$AllSectors"/>
					</actions>
				</cue>
				<!-- Jobs - SmartSectorTags // Functional Libraries -->
				<library name="LibraryJobsSSTCheckFactions" purpose="run_actions">
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Find claimspace factions -->
						<set_value name="$LocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$LocClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$LocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$LocVisitorList"/>
						<!-- Remove unwanted from LocClaimspaceList -->
						<remove_from_list name="$LocClaimspaceList" list="$LocVisitorList" multiple="true"/>
						<remove_value name="$LocVisitorList"/>
						<set_value name="$LocUpdated" exact="false"/>
						<!-- Check for inactive -->
						<do_for_each name="$LocFaction" in="$LocClaimspaceList" reverse="true">
							<do_if value="(not ($LocFaction.isactive and $LocFaction.willclaimspace)) and $DAJSST.$ClaimspaceFactions.indexof.{$LocFaction}">
								<remove_from_list name="$DAJSST.$ClaimspaceFactions" exact="$LocFaction" multiple="true"/>
								<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
									<debug_text text="'MOD: DAJobsSST -- Removed Faction from DAClaimspaceFactions: %s.'.[$LocFaction]" context="false" filter="scripts"/>
								</do_if>
								<set_value name="$LocUpdated" exact="true"/>
							</do_if>
							<do_elseif value="($LocFaction.isactive and $LocFaction.willclaimspace) and (not $DAJSST.$ClaimspaceFactions.indexof.{$LocFaction})">
								<append_to_list name="$DAJSST.$ClaimspaceFactions" exact="$LocFaction"/>
								<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
									<debug_text text="'MOD: DAJobsSST -- Added Faction to DAClaimspaceFactions: %s.'.[$LocFaction]" context="false" filter="scripts"/>
								</do_if>
								<set_value name="$LocUpdated" exact="true"/>
							</do_elseif>
							<do_else>
								<!-- Correctly exists or doesn't exist -->
							</do_else>
						</do_for_each>
						<do_if value="$LocUpdated">
							<sort_list list="$DAJSST.$ClaimspaceFactions" sortbyvalue="loop.element.id"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTProcessSector" purpose="run_actions">
					<params>
						<param name="LocSector"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<find_sector_in_range name="$LocSectorsInRange" object="$LocSector" maxdistance="1" multiple="true"/>
						<!-- This should help us only process sectors that are connected to something -->
						<do_if value="$LocSectorsInRange.count and (($LocSectorsInRange.count gt 1) or (($LocSectorsInRange.count == 1) and ($LocSectorsInRange.{1} != $LocSector)))">
							<!-- 20241005 Now checks for valid contesting faction -->
							<set_value name="$LocValidContested" exact="false"/>
							<do_if value="$LocSector.iscontested">
								<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
									<do_if value="$LocSector.iscontestedby.{$LocFaction}">
										<set_value name="$LocValidContested" exact="true"/>
									</do_if>
								</do_for_each>
							</do_if>
							<!-- Check sectors that are owned by faction in $DAJSST.$ClaimspaceFactions, ownerless, or have a valid contestor -->
							<do_if value="$LocSector.owner and (($LocSector.owner == faction.ownerless) or $DAJSST.$ClaimspaceFactions.indexof.{$LocSector.owner} or $LocValidContested)">
								<!-- Check if Critical, Core, or Border -->
								<create_group groupname="$LocCriticalStationGroup"/>
								<find_station groupname="$LocCriticalStationGroup" space="$LocSector" functional="true" multiple="true">
									<match_any>
										<match shipyard="true"/>
										<match wharf="true"/>
									</match_any>
									<match owner="faction.player" negate="true"/>
									<match owner="$DAJSST.$ClaimspaceFactions"/>
								</find_station>
								<!-- Adds new factions with critical station, does nothing if they are present and already tracked -->
								<set_value name="$LocFactionsChecked" exact="[]"/>
								<set_value name="$LocInvalidFactionsChecked" exact="[]"/>
								<do_if value="$LocCriticalStationGroup.count" min="1">
									<do_for_each name="$LocCriticalStation" in="$LocCriticalStationGroup">
										<do_if value="(not $LocFactionsChecked.indexof.{$LocCriticalStation.owner}) and (not $LocInvalidFactionsChecked.indexof.{$LocCriticalStation.owner})">
											<!-- 20241006 Do not check a valid faction multiple times -->
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocCriticalStation.owner}.$CriticalTag?">
												<!-- 20241006 Only care about $DAJSST.$CriticalSectors for valid factions -->
												<do_if value="not $DAJSST.$CriticalSectors.{$LocCriticalStation.owner}?">
													<set_value name="$DAJSST.$CriticalSectors.{$LocCriticalStation.owner}" exact="[$LocSector]"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Critical Sector -- Created $DAJSST.$CriticalSectors.{%s} -- Sector added: %s. Verified: %s'.[$LocCriticalStation.owner,$LocSector.knownname,$DAJSST.$CriticalSectors.{$LocCriticalStation.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_elseif value="not $DAJSST.$CriticalSectors.{$LocCriticalStation.owner}.indexof.{$LocSector}">
													<append_to_list name="$DAJSST.$CriticalSectors.{$LocCriticalStation.owner}" exact="$LocSector"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Critical Sector -- Added %s to $DAJSST.$CriticalSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocCriticalStation.owner,$DAJSST.$CriticalSectors.{$LocCriticalStation.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_elseif>
												<!-- 20241006 Add valid station owner with $CriticalTag to $LocFactionsChecked to skip removal -->
												<append_to_list name="$LocFactionsChecked" exact="$LocCriticalStation.owner"/>
											</do_if>
											<do_else>
												<!-- 20241006 Not a valid faction, add to $LocInvalidFactionsChecked to skip checking in this do_for_each -->
												<append_to_list name="$LocInvalidFactionsChecked" exact="$LocCriticalStation.owner"/>
											</do_else>
										</do_if>
									</do_for_each>
								</do_if>
								<!-- 20241005 Remove from $CriticalSectors for all others -->
								<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
									<do_if value="(not $LocFactionsChecked.indexof.{$LocFaction}) and $DAJSST.$CriticalSectors.{$LocFaction}? and $DAJSST.$CriticalSectors.{$LocFaction}.indexof.{$LocSector}">
										<!-- This faction no longer has a critical station here -->
										<remove_from_list name="$DAJSST.$CriticalSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Critical Sector -- Removed %s from $DAJSST.$CriticalSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$CriticalSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
								</do_for_each>
								<remove_value name="$LocFactionsChecked"/>
								<remove_value name="$LocInvalidFactionsChecked"/>
								<remove_value name="$LocCriticalStationGroup"/>
								<remove_value name="$LocCriticalStation"/>
								<!-- Check if Core -->
								<create_group groupname="$LocStationGroup"/>
								<find_station groupname="$LocStationGroup" space="$LocSector" functional="true" multiple="true">
									<match owner="faction.player" negate="true"/>
									<match owner="$DAJSST.$ClaimspaceFactions"/>
									<match_any>
										<match shipyard="true"/>
										<match wharf="true"/>
										<match tradestation="true"/>
										<match equipmentdock="true"/>
										<match defencestation="true"/>
										<match factionheadquarters="true"/>
									</match_any>
								</find_station>
								<find_station groupname="$LocStationGroup" space="$LocSector" functional="true" multiple="true">
									<match owner="faction.player" negate="true"/>
									<match owner="$DAJSST.$ClaimspaceFactions"/>
									<match_child class="class.production" checkoperational="true"/>
								</find_station>
								<set_value name="$LocOwnerOccupied" exact="false"/>
								<set_value name="$LocHostileOccupied" exact="false"/>
								<set_value name="$LocFactionsInSector" exact="[]"/>
								<set_value name="$LocHostileBordering" exact="false"/>
								<do_for_each name="$LocStation" in="$LocStationGroup">
									<!-- 20241006 Added faction check to the find_station so only $DAJSST.$ClaimspaceFactions are considered -->
									<do_if value="not $LocFactionsInSector.indexof.{$LocStation.owner}">
										<append_to_list name="$LocFactionsInSector" exact="$LocStation.owner"/>
									</do_if>
									<!-- 20241005 Don't perform additional checks on ownerless -->
									<do_if value="$LocSector.owner != faction.ownerless">
										<do_if value="($LocSector.owner == $LocStation.owner) and (not $LocOwnerOccupied)">
											<!-- Owner of sector has a station in sector, only need to check once -->
											<set_value name="$LocOwnerOccupied" exact="true"/>
										</do_if>
										<do_elseif value="($LocSector.owner != $LocStation.owner) and ($LocSector.owner.hasrelation.killmilitary.{$LocStation.owner}) and (not $LocHostileOccupied)">
											<!-- Sector has hostile stations in system, only need to check once -->
											<set_value name="$LocHostileOccupied" exact="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- %s has hostile stations in system. Verified: %s'.[$LocSector.knownname,$LocHostileOccupied]" context="false" filter="scripts"/>
											</do_if>
										</do_elseif>
									</do_if>
								</do_for_each>
								<!-- 20241005 If the sector isn't owner occupied, then skip the hostile check -->
								<do_if value="$LocOwnerOccupied">
									<!-- Check adjacent sectors for hostiles to sector owner -->
									<do_for_each name="$LocAdjacentSector" in="$LocSectorsInRange">
										<do_if value="($LocAdjacentSector != $LocSector) and (not $LocHostileBordering)">
											<do_if value="$LocAdjacentSector.owner.hasrelation.killmilitary.{$LocSector.owner}">
												<set_value name="$LocHostileBordering" exact="true"/>
												<break/>
											</do_if>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="$LocOwnerOccupied and (not ($LocHostileOccupied or $LocHostileBordering))">
									<set_value name="$LocFactionsChecked" exact="[]"/>
									<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocSector.owner}.$CoreTag?">
										<!-- Core definition: Contains owner stations, contains no enemy stations, not bordering any hostile sectors -->
										<!-- Sector is not ownerless, has no hostile stations, and is not bordering hostile owned sectors -->
										<do_if value="not $DAJSST.$CoreSectors.{$LocSector.owner}?">
											<set_value name="$DAJSST.$CoreSectors.{$LocSector.owner}" exact="[$LocSector]"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Core Sector -- Created $DAJSST.$CoreSectors. %s -- Sector added: %s. Verified: %s'.[$LocSector.owner,$LocSector.knownname,$DAJSST.$CoreSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_elseif value="not $DAJSST.$CoreSectors.{$LocSector.owner}.indexof.{$LocSector}">
											<append_to_list name="$DAJSST.$CoreSectors.{$LocSector.owner}" exact="$LocSector"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Core Sector -- Added %s to $DAJSST.$CoreSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocSector.owner,$DAJSST.$CoreSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
											</do_if>
										</do_elseif>
										<!-- Sector can be critical and core but sector can not be core and border -->
										<do_if value="($DAJSST.$BorderSectors.{$LocSector.owner}?) and ($DAJSST.$BorderSectors.{$LocSector.owner}.indexof.{$LocSector})">
											<remove_from_list name="$DAJSST.$BorderSectors.{$LocSector.owner}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Core Sector not Border Sector -- Removed %s from $DAJSST.$BorderSectors. %s.'.[$LocSector.knownname,$LocSector.owner]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<!-- Sector can not be core and contested -->
										<do_if value="($DAJSST.$ContestedSectors.{$LocSector.owner}?) and ($DAJSST.$ContestedSectors.{$LocSector.owner}.indexof.{$LocSector})">
											<remove_from_list name="$DAJSST.$ContestedSectors.{$LocSector.owner}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Core Sector not Contested Sector -- Removed %s from $DAJSST.$ContestedSectors. %s.'.[$LocSector.knownname,$LocSector.owner]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<!-- 20241006 Add valid owner with $CoreTag to $LocFactionsChecked to skip removal -->
										<append_to_list name="$LocFactionsChecked" exact="$LocSector.owner"/>
									</do_if>
									<!-- 20241005 Remove from $CoreSectors for all others -->
									<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
										<do_if value="(not $LocFactionsChecked.indexof.{$LocFaction}) and $DAJSST.$CoreSectors.{$LocFaction}? and $DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector}">
											<!-- This faction no longer meets the requirements of core -->
											<remove_from_list name="$DAJSST.$CoreSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Not Core Sector -- Removed %s from $DAJSST.$CoreSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
									</do_for_each>
									<remove_value name="$LocFactionsChecked"/>
								</do_if>
								<do_elseif value="$LocOwnerOccupied and ($LocHostileOccupied or $LocHostileBordering)">
									<!-- Border definition: Contains owner stations, may contain enemy stations, bordering hostile sector -->
									<!-- Sector is not ownerless, has hostile stations or bordering hostile owned sectors -->
									<do_if value="$LocHostileBordering">
										<set_value name="$LocFactionsChecked" exact="[]"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocSector.owner}.$BorderTag?">
											<!-- 20241006 Only care about $DAJSST.$BorderSectors for valid factions -->
											<do_if value="not $DAJSST.$BorderSectors.{$LocSector.owner}?">
												<set_value name="$DAJSST.$BorderSectors.{$LocSector.owner}" exact="[$LocSector]"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Border Sector -- Created $DAJSST.$BorderSectors. %s -- Sector added: %s. Verified: %s'.[$LocSector.owner,$LocSector.knownname,$DAJSST.$BorderSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
											<do_elseif value="not $DAJSST.$BorderSectors.{$LocSector.owner}.indexof.{$LocSector}">
												<append_to_list name="$DAJSST.$BorderSectors.{$LocSector.owner}" exact="$LocSector"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Border Sector -- Added %s to $DAJSST.$BorderSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocSector.owner,$DAJSST.$BorderSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_elseif>
											<!-- 20241006 Add valid owner with $BorderTag to $LocFactionsChecked to skip removal -->
											<append_to_list name="$LocFactionsChecked" exact="$LocSector.owner"/>
										</do_if>
										<!-- 20241005 Remove from $BorderSectors for all others -->
										<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
											<do_if value="(not $LocFactionsChecked.indexof.{$LocFaction}) and $DAJSST.$BorderSectors.{$LocFaction}? and $DAJSST.$BorderSectors.{$LocFaction}.indexof.{$LocSector}">
												<!-- This faction no longer meets the requirements of border -->
												<remove_from_list name="$DAJSST.$BorderSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Not Border Sector -- Removed %s from $DAJSST.$BorderSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$BorderSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
											<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
										</do_for_each>
										<remove_value name="$LocFactionsChecked"/>
									</do_if>
									<do_if value="$LocHostileOccupied">
										<set_value name="$LocFactionsChecked" exact="[]"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocSector.owner}.$ContestedTag?">
											<!-- 20241006 Only care about $DAJSST.$ContestedSectors for valid factions -->
											<do_if value="not $DAJSST.$ContestedSectors.{$LocSector.owner}?">
												<set_value name="$DAJSST.$ContestedSectors.{$LocSector.owner}" exact="[$LocSector]"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Created $DAJSST.$ContestedSectors. %s -- Sector added: %s. Verified: %s'.[$LocSector.owner,$LocSector.knownname,$DAJSST.$ContestedSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
											<do_elseif value="not $DAJSST.$ContestedSectors.{$LocSector.owner}.indexof.{$LocSector}">
												<append_to_list name="$DAJSST.$ContestedSectors.{$LocSector.owner}" exact="$LocSector"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Added %s to $DAJSST.$ContestedSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocSector.owner,$DAJSST.$ContestedSectors.{$LocSector.owner}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_elseif>
											<!-- 20241006 Add valid owner with $ContestedTag to $LocFactionsChecked to skip removal -->
											<append_to_list name="$LocFactionsChecked" exact="$LocSector.owner"/>
										</do_if>
										<!-- Add sector to $DAJSST.$ContestedSectors for factions that do not own sector but have stations in sector and are hostile -->
										<!-- 20241006 Go through all factions in sector, valid factions will be checked for $DAJSST.$ContestedSectors, valid factions will be added to $LocFactionsChecked to skip removal -->
										<do_for_each name="$LocFaction" in="$LocFactionsInSector">
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag?">
												<!-- 20241006 Only care about hostility checks for valid factions -->
												<do_if value="($LocSector.owner != $LocFaction) and $LocFaction.hasrelation.killmilitary.{$LocSector.owner}">
													<!-- 20241006 Only care about $DAJSST.$ContestedSectors for valid hostile factions -->
													<do_if value="not $DAJSST.$ContestedSectors.{$LocFaction}?">
														<set_value name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="[$LocSector]"/>
														<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
															<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Created $DAJSST.$ContestedSectors. %s -- Sector added: %s. Verified: %s'.[$LocFaction,$LocSector.knownname,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
														</do_if>
													</do_if>
													<do_elseif value="not $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
														<append_to_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector"/>
														<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
															<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Added %s to $DAJSST.$ContestedSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
														</do_if>
													</do_elseif>
													<!-- 20241006 Add valid faction with $ContestedTag to $LocFactionsChecked, removal check will be skipped below -->
													<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
												</do_if>
												<!-- 20241006 Even if a faction is an SST Faction, if it no longer meets hostility requirement then allow removal of $DAJSST.$ContestedSectors -->
											</do_if>
										</do_for_each>
										<!-- 20241006 Remove from $ContestedSectors for all others -->
										<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
											<do_if value="(not $LocFactionsChecked.indexof.{$LocFaction}) and $DAJSST.$ContestedSectors.{$LocFaction}? and $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
												<!-- This faction no longer meets the requirements of contested -->
												<remove_from_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Not Contested Sector -- Removed %s from $DAJSST.$ContestedSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
											<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
										</do_for_each>
										<remove_value name="$LocFactionsChecked"/>
									</do_if>
									<!-- Sector can be critical and border but sector can not be border and core -->
									<!-- Sector can be border and contested but sector can not be core and contested -->
									<do_if value="($LocHostileBordering or $LocHostileOccupied) and ($DAJSST.$CoreSectors.{$LocSector.owner}?) and ($DAJSST.$CoreSectors.{$LocSector.owner}.indexof.{$LocSector})">
										<remove_from_list name="$DAJSST.$CoreSectors.{$LocSector.owner}" exact="$LocSector" multiple="true"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Contested Sector not Core Sector -- Removed %s from $DAJSST.$CoreSectors. %s.'.[$LocSector.knownname,$LocSector.owner]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_elseif>
								<do_elseif value="$LocFactionsInSector.count gt 1">
									<!-- Contested sector definition: contains stations from multiple hostile factions -->
									<!-- Sector is ownerless but more than 1 faction has stations in sector -->
									<set_value name="$LocFactionsInSector2" exact="[]"/>
									<append_list_elements name="$LocFactionsInSector2" other="$LocFactionsInSector"/>
									<set_value name="$LocFactionsChecked" exact="[]"/>
									<do_for_each name="$LocFaction" in="$LocFactionsInSector">
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag?">
											<!-- 20241006 Only care about checks for valid factions -->
											<set_value name="$LocHostileOccupied2" exact="false"/>
											<do_for_each name="$LocFaction2" in="$LocFactionsInSector2">
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction2}.$ContestedTag?">
													<!-- 20241006 Only care about checks for valid hostile factions -->
													<do_if value="($LocFaction != $LocFaction2) and ($LocFaction.hasrelation.killmilitary.{$LocFaction2})">
														<set_value name="$LocHostileOccupied2" exact="true"/>
														<break/>
													</do_if>
												</do_if>
											</do_for_each>
											<do_if value="$LocHostileOccupied2">
												<!-- 20241006 This can only be reached if $LocFaction is valid and there is a valid hostile $LocFaction2 -->
												<do_if value="not $DAJSST.$ContestedSectors.{$LocFaction}?">
													<set_value name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="[$LocSector]"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Created $DAJSST.$ContestedSectors. %s -- Sector added: %s. Verified: %s'.[$LocFaction,$LocSector.knownname,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_elseif value="not $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
													<append_to_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Contested Sector -- Added %s to $DAJSST.$ContestedSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_elseif>
												<!-- 20241006 Sector can not be contested and core -->
												<do_if value="$DAJSST.$CoreSectors.{$LocFaction}? and $DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector}">
													<remove_from_list name="$DAJSST.$CoreSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Contested Sector not Core Sector -- Removed %s from $DAJSST.$CoreSectors. %s.'.[$LocSector.knownname,$LocFaction]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<do_elseif value="(not $LocHostileOccupied2) and $DAJSST.$ContestedSectors.{$LocFaction}? and $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
												<!-- 20241005 Now removes from $ContestedSectors if no hostiles are present -->
												<!-- This faction no longer meets the requirements of contested -->
												<remove_from_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Not Contested Sector -- Removed %s from $DAJSST.$ContestedSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_elseif>
											<!-- 20241006 Add valid faction with $ContestedTag to $LocFactionsChecked, removal check will be skipped below -->
											<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
											<remove_value name="$LocHostileOccupied2"/>
										</do_if>
									</do_for_each>
									<!-- 20241005 Remove from $ContestedSectors for all others -->
									<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
										<do_if value="(not $LocFactionsChecked.indexof.{$LocFaction}) and $DAJSST.$ContestedSectors.{$LocFaction}? and $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
											<!-- This faction no longer meets the requirements of contested -->
											<remove_from_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- Not Contested Sector -- Removed %s from $DAJSST.$ContestedSectors.{%s} -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<append_to_list name="$LocFactionsChecked" exact="$LocFaction"/>
									</do_for_each>
									<remove_value name="$LocFactionsChecked"/>
								</do_elseif>
								<do_elseif value="$LocSector.owner == faction.ownerless">
									<!-- 20241006 Sector is ownerless and does not have more than 1 valid faction present -->
									<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
										<do_if value="$DAJSST.$CriticalSectors.{$LocFaction}? and $DAJSST.$CriticalSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$CriticalSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
										</do_if>
										<do_if value="$DAJSST.$CoreSectors.{$LocFaction}? and $DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$CoreSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
										</do_if>
										<do_if value="$DAJSST.$BorderSectors.{$LocFaction}? and $DAJSST.$BorderSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$BorderSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
										</do_if>
										<do_if value="$DAJSST.$ContestedSectors.{$LocFaction}? and $DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$ContestedSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
										</do_if>
									</do_for_each>
									<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- Ownerless Uncontested -- Removed %s from all lists'.[$LocSector.knownname]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
								<!-- Trader and Miner -->
								<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
									<set_value name="$LocIsFactionValid" exact="false"/>
									<do_if value="($LocSector.owner == $LocFaction) and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}?">
										<!-- 20241006 Trader and miner sectors are only valid for the owner -->
										<find_station_by_true_owner name="$LocStation" space="$LocSector" faction="$LocFaction" functional="true" multiple="false">
											<match_child class="class.production" checkoperational="true"/>
										</find_station_by_true_owner>
										<set_value name="$LocIsFactionValid" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag?"/>
									</do_if>
									<do_if value="$LocIsFactionValid and @$LocStation">
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag?">
											<do_if value="not $DAJSST.$TraderSectors.{$LocFaction}?">
												<set_value name="$DAJSST.$TraderSectors.{$LocFaction}" exact="[$LocSector]"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Created $DAJSST.$TraderSectors. %s -- Sector added: %s. Verified: %s'.[$LocFaction,$LocSector.knownname,$DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
											<do_elseif value="not $DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}">
												<append_to_list name="$DAJSST.$TraderSectors.{$LocFaction}" exact="$LocSector"/>
												<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
													<debug_text text="'MOD: DAJobsSST -- Added %s to $DAJSST.$TraderSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
												</do_if>
											</do_elseif>
										</do_if>
										<set_value name="$LocResources" exact="$LocSector.resources.list"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag?">
											<do_if value="$LocResources.indexof.{ware.ore} or $LocResources.indexof.{ware.silicon}">
												<do_if value="not $DAJSST.$MinerSectors.{$LocFaction}?">
													<set_value name="$DAJSST.$MinerSectors.{$LocFaction}" exact="[$LocSector]"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Created $DAJSST.$MinerSectors. %s -- Sector added: %s. Verified: %s'.[$LocFaction,$LocSector.knownname,$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_elseif value="not $DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}">
													<append_to_list name="$DAJSST.$MinerSectors.{$LocFaction}" exact="$LocSector"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Added %s to $DAJSST.$MinerSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_elseif value="@$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}">
												<remove_from_list name="$DAJSST.$MinerSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											</do_elseif>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag?">
											<do_if value="$LocResources.indexof.{ware.helium} or $LocResources.indexof.{ware.hydrogen} or $LocResources.indexof.{ware.methane}">
												<do_if value="not $DAJSST.$GasMinerSectors.{$LocFaction}?">
													<set_value name="$DAJSST.$GasMinerSectors.{$LocFaction}" exact="[$LocSector]"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Created $DAJSST.$GasMinerSectors. %s -- Sector added: %s. Verified: %s'.[$LocFaction,$LocSector.knownname,$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_elseif value="not $DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}">
													<append_to_list name="$DAJSST.$GasMinerSectors.{$LocFaction}" exact="$LocSector"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Added %s to $DAJSST.$GasMinerSectors. %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}]" context="false" filter="scripts"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_elseif value="@$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}">
												<remove_from_list name="$DAJSST.$GasMinerSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											</do_elseif>
										</do_if>
										<remove_value name="$LocResources"/>
									</do_if>
									<do_elseif value="@$DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector} or @$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector} or @$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}">
										<do_if value="$DAJSST.$TraderSectors.{$LocFaction}? and $DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$TraderSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJSST.$TraderSectors'.[$LocFaction.id,$LocSector.knownname]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_if value="$DAJSST.$MinerSectors.{$LocFaction}? and $DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$MinerSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJSST.$MinerSectors'.[$LocFaction.id,$LocSector.knownname]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_if value="$DAJSST.$GasMinerSectors.{$LocFaction}? and $DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}">
											<remove_from_list name="$DAJSST.$GasMinerSectors.{$LocFaction}" exact="$LocSector" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
												<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJSST.$GasMinerSectors'.[$LocFaction.id,$LocSector.knownname]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
									</do_elseif>
									<remove_value name="$LocStation"/>
								</do_for_each>
								<!-- Cleanup -->
								<remove_value name="$LocStationGroup"/>
								<remove_value name="$LocOwnerOccupied"/>
								<remove_value name="$LocHostileOccupied"/>
								<remove_value name="$LocFactionsInSector"/>
								<remove_value name="$LocHostileBordering"/>
								<remove_value name="$LocFactionsInSector2"/>
							</do_if>
							<remove_value name="$LocValidContested"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTFactionSituationDebug" purpose="run_actions">
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
							<debug_text text="'MOD: DAJobsSST LibraryJobsSSTFactionSituationDebug -- Faction: %s -- $DAJSST.$CriticalSectors.count: %s -- $DAJSST.$CoreSectors.count: %s -- $DAJSST.$BorderSectors.count: %s -- $DAJSST.$ContestedSectors.count: %s -- $DAJSST.$TraderSectors: %s -- $DAJSST.$MinerSectors: %s -- $DAJSST.$GasMinerSectors: %s'.[$LocFaction,@$DAJSST.$CriticalSectors.{$LocFaction}.count,@$DAJSST.$CoreSectors.{$LocFaction}.count,@$DAJSST.$BorderSectors.{$LocFaction}.count,@$DAJSST.$ContestedSectors.{$LocFaction}.count,@$DAJSST.$TraderSectors.{$LocFaction}.count,@$DAJSST.$MinerSectors.{$LocFaction}.count,@$DAJSST.$GasMinerSectors.{$LocFaction}.count]" context="false" filter="scripts"/>
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsSSTProcessSectorTags" purpose="run_actions">
					<params>
						<param name="LocSector"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- $LocSector check if it is in a factions table list // update sector tag for each faction individually -->
						<do_for_each name="$LocFaction" in="$DAJSST.$ClaimspaceFactions">
							<do_if value="$DAJSST.$CriticalSectors.{$LocFaction}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag?">
								<set_value name="$LocTagText" exact="'DACriticalTag' + $LocFaction.id"/>
								<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
								<do_if value="$DAJSST.$CriticalSectors.{$LocFaction}.indexof.{$LocSector}">
									<do_if value="not ($LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJSST.$CriticalSectors.{$LocFaction}.indexof.{$LocSector})">
									<do_if value="$LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Critical -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_elseif>
								<remove_value name="$LocTagText"/>
								<remove_value name="$LocTag"/>
							</do_if>
							<do_if value="$DAJSST.$CoreSectors.{$LocFaction}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag?">
								<set_value name="$LocTagText" exact="'DACoreTag' + $LocFaction.id"/>
								<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
								<do_if value="$DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector}">
									<do_if value="not ($LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJSST.$CoreSectors.{$LocFaction}.indexof.{$LocSector})">
									<do_if value="$LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Core -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_elseif>
								<remove_value name="$LocTagText"/>
								<remove_value name="$LocTag"/>
							</do_if>
							<do_if value="$DAJSST.$BorderSectors.{$LocFaction}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag?">
								<set_value name="$LocTagText" exact="'DABorderTag' + $LocFaction.id"/>
								<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
								<do_if value="$DAJSST.$BorderSectors.{$LocFaction}.indexof.{$LocSector}">
									<do_if value="not ($LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJSST.$BorderSectors.{$LocFaction}.indexof.{$LocSector})">
									<do_if value="$LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Border -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_elseif>
								<remove_value name="$LocTagText"/>
								<remove_value name="$LocTag"/>
							</do_if>
							<do_if value="$DAJSST.$ContestedSectors.{$LocFaction}? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag?">
								<set_value name="$LocTagText" exact="'DAContestedTag' + $LocFaction.id"/>
								<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
								<do_if value="$DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector}">
									<do_if value="not ($LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJSST.$ContestedSectors.{$LocFaction}.indexof.{$LocSector})">
									<do_if value="$LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Contested -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
								</do_elseif>
								<remove_value name="$LocTagText"/>
								<remove_value name="$LocTag"/>
							</do_if>
							<!-- DAJobsSSTTraderSectors, DAJobsSSTMinerSectors, DAJobsSSTGasMinerSectors -->
							<do_if value="$DAJSST.$TraderSectors.{$LocFaction}? and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag?)">
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag?">
									<set_value name="$LocTagText" exact="'DALTraderTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Trader L -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag?">
									<set_value name="$LocTagText" exact="'DAMTraderTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$TraderSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Trader M -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
							</do_if>
							<do_if value="$DAJSST.$MinerSectors.{$LocFaction}? and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag?)">
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag?">
									<set_value name="$LocTagText" exact="'DALMinerTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Miner L -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag?">
									<set_value name="$LocTagText" exact="'DAMMinerTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$MinerSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Miner M -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
							</do_if>
							<do_if value="$DAJSST.$GasMinerSectors.{$LocFaction}? and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? or $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag?)">
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag?">
									<set_value name="$LocTagText" exact="'DALGasMinerTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Gas Miner L -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag?">
									<set_value name="$LocTagText" exact="'DAMGasMinerTag' + $LocFaction.id"/>
									<set_value name="$LocTag" exact="tag.{$LocTagText}"/>
									<do_if value="$DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector} and (not $LocSector.locationtags.indexof.{$LocTag})">
										<add_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_elseif value="(not $DAJSST.$GasMinerSectors.{$LocFaction}.indexof.{$LocSector}) and $LocSector.locationtags.indexof.{$LocTag}">
										<remove_space_location_tag space="$LocSector" tag="$LocTag"/>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[$LocSector.knownname,$LocFaction,$LocTag,@$LocSector.locationtags.indexof.{$LocTag}]" context="false" filter="scripts"/>
										</do_if>
										<!-- 20241006 Add to $DAJSST.$CheckForRecycleTable for later logic to handle the ships -->
										<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
										<do_if value="not $DAJSST.$CheckForRecycleTable.{$LocSector}?">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}" exact="table[]"/>
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_if>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}?)">
											<set_value name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="[$LocTag]"/>
										</do_elseif>
										<do_elseif value="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}? and (not $DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}.indexof.{$LocTag})">
											<append_to_list name="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}" exact="$LocTag"/>
										</do_elseif>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Not Gas Miner M -- Sector: %s -- Faction: %s -- TagToCheck: %s'.[$LocSector.knownname,$LocFaction,$LocTag]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<remove_value name="$LocTagText"/>
									<remove_value name="$LocTag"/>
								</do_if>
							</do_if>
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsSSTActivateJob" purpose="run_actions">
					<params>
						<param name="LocJob"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Check if we need to activate LocJob -->
						<!-- This library sets the appropriate job to active and should only receive jobs that have correct tags / fleet size -->
						<do_if value="not $DAJSST.$JobsActivated.{'$'+$LocJob}?">
							<set_value name="$DAJSST.$JobsActivated.{'$'+$LocJob}" exact="[$LocJob,1]"/>
							<set_job_active job="$LocJob" activate="true"/>
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Activated Job: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_elseif value="($DAJSST.$JobsActivated.{'$'+$LocJob}?) and (($DAJSST.$JobsActivated.{'$'+$LocJob}.{2}) == 0)">
							<!-- previously activated but currently inactive -->
							<set_value name="$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}" exact="1" operation="add"/>
							<set_job_active job="$LocJob" activate="true"/>
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Activated Job: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_elseif>
						<do_elseif value="($DAJSST.$JobsActivated.{'$'+$LocJob}?) and ($DAJSST.$JobsActivated.{'$'+$LocJob}.{2} gt 0)">
							<!-- already active -->
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Job already active: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_elseif>
						<do_else>
							<!-- No clue what would cause reaching here -->
							<debug_text text="'MOD: DAJobsSST -- Unhandled instance in Job activation: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[@$LocJob,@$DAJSST.$JobsActivated.{'$'+$LocJob}.count,@$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},@$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryJobsSSTDeactivateJob" purpose="run_actions">
					<params>
						<param name="LocJob"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Check if we need to deactivate LocJob -->
						<!-- DONE: Test recycling. Observed several ships recycling. -->
						<do_if value="not $DAJSST.$JobsActivated.{'$'+$LocJob}?">
							<!-- untracked -->
							<set_value name="$DAJSST.$JobsActivated.{'$'+$LocJob}" exact="[$LocJob,0]"/>
							<set_job_active job="$LocJob" activate="false"/>
							<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$LocJob" checkoperational="true" multiple="true"/>
							<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- Set ships to recycle:'"/>
								</do_if>
								<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
									<do_if value="not $LocShipToDeactivate.iscommandeered">
										<create_order object="$LocShipToDeactivate" id="'RecycleDefault'" default="true"/>
										<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
											<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
										</do_if>
									</do_if>
								</do_for_each>
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<debug_text text="$LocDeactivateString" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="$LocDeactivateString"/>
							</do_if>
							<remove_value name="$LocShipsToDeactivate"/>
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Deactivated untracked Job: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_elseif value="($DAJSST.$JobsActivated.{'$'+$LocJob}?) and (($DAJSST.$JobsActivated.{'$'+$LocJob}.{2}) != 0)">
							<!-- currently active and tracked -->
							<set_value name="$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}" exact="0"/>
							<set_job_active job="$LocJob" activate="false"/>
							<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$LocJob" checkoperational="true" multiple="true"/>
							<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- Set ships to recycle:'"/>
								</do_if>
								<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
									<do_if value="not $LocShipToDeactivate.iscommandeered">
										<create_order object="$LocShipToDeactivate" id="'RecycleDefault'" default="true"/>
										<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
											<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
										</do_if>
									</do_if>
								</do_for_each>
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<debug_text text="$LocDeactivateString" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="$LocDeactivateString"/>
							</do_if>
							<remove_value name="$LocShipsToDeactivate"/>
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Deactivated Job: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_elseif>
						<do_elseif value="($DAJSST.$JobsActivated.{'$'+$LocJob}?) and ($DAJSST.$JobsActivated.{'$'+$LocJob}.{2} == 0)">
							<!-- already deactived -->
							<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$LocJob" checkoperational="true" multiple="true"/>
							<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- Set ships to recycle:'"/>
								</do_if>
								<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
									<do_if value="not $LocShipToDeactivate.iscommandeered">
										<create_order object="$LocShipToDeactivate" id="'RecycleDefault'" default="true"/>
										<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
											<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
										</do_if>
									</do_if>
								</do_for_each>
								<do_if value="$DADVT.$DAJobsSSTDetailedDebug">
									<debug_text text="$LocDeactivateString" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="$LocDeactivateString"/>
							</do_if>
							<remove_value name="$LocShipsToDeactivate"/>
							<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- Job already deactivated: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[$LocJob,$DAJSST.$JobsActivated.{'$'+$LocJob}.count,$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="false" filter="scripts"/>
							</do_if>
						</do_elseif>
						<do_else>
							<!-- No clue what would cause reaching here -->
							<debug_text text="'MOD: DAJobsSST -- Unhandled instance in Job deactivation: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.count: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{1}: %s -- $DAJSST.$JobsActivated.{$+$LocJob}.{2}: %s'.[@$LocJob,@$DAJSST.$JobsActivated.{'$'+$LocJob}.count,@$DAJSST.$JobsActivated.{'$'+$LocJob}.{1},@$DAJSST.$JobsActivated.{'$'+$LocJob}.{2}]" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryJobsSSTCheckForRecycle" purpose="run_actions">
					<params>
						<param name="LocSector"/>
						<param name="LocFaction"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Check if we need to order ships to recycle -->
						<!-- $DAJSST.$CheckForRecycleTable.{$Sector}.{$Faction} = [$JobTag,$JobTag,$JobTag] -->
						<do_for_each name="$LocJobTag" in="$DAJSST.$CheckForRecycleTable.{$LocSector}.{$LocFaction}">
							<get_suitable_job result="$LocJobs" faction="$LocFaction" tags="$LocJobTag" includeinactive="true" force="true" multiple="true"/>
							<do_if value="$LocJobs? and $LocJobs.count">
								<do_for_each name="$LocJob" in="$LocJobs">
									<find_ship_by_true_owner name="$LocShipsToRecycle" space="player.galaxy" faction="$LocFaction" job="$LocJob" checkoperational="true" multiple="true"/>
									<do_if value="$LocShipsToRecycle.count" min="1">
										<do_for_each name="$LocShip" in="$LocShipsToRecycle">
											<do_if value="($LocShip.jobmainsector? and ($LocShip.jobmainsector == $LocSector)) or ($LocShip.jobmainzone.sector? and ($LocShip.jobmainzone.sector == $LocSector))">
												<do_if value="$LocShip.iscommandeered">
													<!-- No Event, not sure how to capture performantly -->
													<do_if value="not $DAJSST.$ShipsToRecycle.indexof.{$LocShip}">
														<add_to_group groupname="$DAJSST.$ShipsToRecycle" object="$LocShip"/>
													</do_if>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Unable to Recycle Ship: Commandeered -- Sector: %s -- Faction: %s -- Job: %s -- Ship: %s(%s)'.[$LocSector.knownname,$LocFaction,$LocJob,$LocShip.knownname,$LocShip.idcode]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
												<do_else>
													<create_order object="$LocShip" id="'RecycleDefault'" default="true"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Recycle Ship -- Sector: %s -- Faction: %s -- Job: %s -- Ship: %s(%s)'.[$LocSector.knownname,$LocFaction,$LocJob,$LocShip.knownname,$LocShip.idcode]" context="false" filter="scripts"/>
													</do_if>
												</do_else>
											</do_if>
										</do_for_each>
									</do_if>
									<remove_value name="$LocShipsToRecycle"/>
								</do_for_each>
							</do_if>
							<remove_value name="$LocJobs"/>
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsSSTCheckForRecyclePeriodic" purpose="run_actions">
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- Check if we need to order ships to recycle -->
						<!-- $DAJSST.$ShipsToRecycle -->
						<do_for_each name="$LocShip" in="$DAJSST.$ShipsToRecycle">
							<do_if value="@$LocShip and (not $LocShip.iscommandeered)">
								<create_order object="$LocShip" id="'RecycleDefault'" default="true"/>
								<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
									<debug_text text="'MOD: DAJobsSST -- Recycle Ship -- Faction: %s -- Ship: %s(%s)'.[$LocShip.trueowner,$LocShip.knownname,$LocShip.idcode]" context="false" filter="scripts"/>
								</do_if>
							</do_if>
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsSSTOrderShips" purpose="run_actions">
					<params>
						<param name="LocFaction"/>
						<param name="LocWhichTag"/>
					</params>
					<actions>
						<do_if value="not $DAJSST?">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
						</do_if>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- $LocFaction is the faction to check -->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								Special handling required for Eco tags
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LTraderTag' == [$LocLTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MTraderTag' == [$LocMTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LMinerTag' == [$LocLMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MMinerTag' == [$LocMMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LGasMinerTag' == [$LocLGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MGasMinerTag' == [$LocMGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}?">
							<do_if value="$LocWhichTag == '$CriticalTag'">
								<!-- $CriticalTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{5} != null) and $DAJSST.$CriticalSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $CriticalTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$CriticalSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{5},$LocSector,$LocZones.random,$LocFaction,'$CriticalTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $CriticalTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_if>
							<do_elseif value="$LocWhichTag == '$CoreTag'">
								<!-- $CoreTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{5} != null) and $DAJSST.$CoreSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $CoreTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$CoreSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{5},$LocSector,$LocZones.random,$LocFaction,'$CoreTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $CoreTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$BorderTag'">
								<!-- $BorderTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{5} != null) and $DAJSST.$BorderSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $BorderTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$BorderSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{5},$LocSector,$LocZones.random,$LocFaction,'$BorderTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $BorderTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$ContestedTag'">
								<!-- $ContestedTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{5} != null) and $DAJSST.$ContestedSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $ContestedTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$ContestedSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{5},$LocSector,$LocZones.random,$LocFaction,'$ContestedTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $ContestedTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$LTraderTag'">
								<!-- $LTraderTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{5} != null) and $DAJSST.$TraderSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $LTraderTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$TraderSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LTraderTag.{5},$LocSector,$LocZones.random,$LocFaction,'$LTraderTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $LTraderTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$MTraderTag'">
								<!-- $MTraderTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{5} != null) and $DAJSST.$TraderSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $MTraderTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$TraderSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MTraderTag.{5},$LocSector,$LocZones.random,$LocFaction,'$MTraderTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $MTraderTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$LMinerTag'">
								<!-- $LMinerTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{5} != null) and $DAJSST.$MinerSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $LMinerTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$MinerSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LMinerTag.{5},$LocSector,$LocZones.random,$LocFaction,'$LMinerTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $LMinerTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$MMinerTag'">
								<!-- $MMinerTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{5} != null) and $DAJSST.$MinerSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $MMinerTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$MinerSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MMinerTag.{5},$LocSector,$LocZones.random,$LocFaction,'$MMinerTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $MMinerTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$LGasMinerTag'">
								<!-- $LGasMinerTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{5} != null) and $DAJSST.$GasMinerSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $LGasMinerTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$GasMinerSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$LGasMinerTag.{5},$LocSector,$LocZones.random,$LocFaction,'$LGasMinerTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $LGasMinerTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_elseif value="$LocWhichTag == '$MGasMinerTag'">
								<!-- $MGasMinerTag -->
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{5} != null) and $DAJSST.$GasMinerSectors.{$LocFaction}.count">
									<find_ship_by_true_owner groupname="$LocShips" faction="$LocFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{5}" checkoperational="true" multiple="true"/>
									<do_if value="$LocShips? and $LocShips.count">
										<do_for_each name="$LocShip" in="$LocShips">
											<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}" object="$LocShip"/>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{6}.indexof.{$LocShip}">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{6}" exact="$LocShip" multiple="true"/>
												<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}.indexof.{$LocShip.jobmainsector})">
													<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
												</do_if>
											</do_if>
											<!-- 20240316 Adding tracking group for all ships to handle owner change/thieves -->
											<do_if value="not $DADVT.$DAJobsSSTAllShips.indexof.{$LocShip}">
												<add_to_group groupname="$DADVT.$DAJobsSSTAllShips" object="$LocShip"/>
											</do_if>
										</do_for_each>
										<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
											<debug_text text="'MOD: DAJobsSST -- Updated $MGasMinerTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[$LocFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}.count]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$LocShips"/>
									<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{4} gt 0)">
										<!-- This means we are below the galaxy cap and sector quota gt 0 -->
										<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
										<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}.count"/>
										<do_for_each name="$LocSector" in="$DAJSST.$GasMinerSectors.{$LocFaction}">
											<do_if value="$LocGalaxyQuotaWanted le 0">
												<break/>
											</do_if>
											<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{4}"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}.count">
												<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{7}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
												<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{8}">
													<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
														<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
													</do_if>
													<do_elseif value="$LocSectorQuotaWanted le 0">
														<break/>
													</do_elseif>
												</do_for_each>
											</do_if>
											<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
												<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
													<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
												</find_zone>
												<do_if value="$LocZones.count" min="1">
													<!-- DONE: Signal cue to request ship -->
													<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
													<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$MGasMinerTag.{5},$LocSector,$LocZones.random,$LocFaction,'$MGasMinerTag']"/>
													<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
													<do_if value="$DADVT.$DAJobsSSTXtremelyDetailedDebug">
														<debug_text text="'MOD: DAJobsSST -- Requested $MGasMinerTag job ship for faction: %s'.[$LocFaction.id]" context="false" filter="scripts"/>
													</do_if>
												</do_if>
											</do_if>
											<remove_value name="$LocSectorQuotaWanted"/>
										</do_for_each>
										<remove_value name="$LocGalaxyQuotaWanted"/>
									</do_if>
								</do_if>
							</do_elseif>
							<do_else>
								<debug_text text="'MOD: DAJobsSST -- LibraryJobsSSTOrderShips -- ERROR -- Invalid tag passed -- $LocWhichTag == %s'.[@$LocWhichTag]" context="true" filter="error"/>
							</do_else>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAJobsSST -- LibraryJobsSSTOrderShips -- ERROR -- Missing table -- $DADVT.$DAJobsSSTJobSizeQuotas.{%s}'.[@$LocFaction.knownname]" context="true" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryJobsSSTOverrideDefault">
					<actions>
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								Special handling required for Eco tags
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LTraderTag' == [$LocLTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MTraderTag' == [$LocMTraderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LMinerTag' == [$LocLMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MMinerTag' == [$LocMMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'LGasMinerTag' == [$LocLGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'MGasMinerTag' == [$LocMGasMinerTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<do_if value="true" comment="EasyDiffAddMarker">
							<!-- Example code for diff add to change value of default value for a faction.
								<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{faction.xenon}?">
									<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{faction.xenon}.$CriticalTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{faction.xenon}.$CriticalTag.count">
										<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{faction.xenon}.$CriticalTag.{2}" exact="1" comment="Example of changing xenon strategic patrol size to small"/>
										<debug_text text="'MOD: DAJobsSST - ExampleMod changed faction.xenon $CriticalTag.{2} to 1: %s'.[$DADVT.$DAJobsSSTJobSizeQuotas.{faction.xenon}.$CriticalTag.{2}]" context="false" filter="scripts"/>
									</do_if>
								</do_if>
							-->
						</do_if>
					</actions>
				</library>
				<!-- Jobs - SmartSectorTags // Variable Check Libraries -->
				<library name="LibraryCheckJobsSSTVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAJobsSSTEnable? or (not ((typeof $DADVT.$DAJobsSSTEnable == datatype.integer) and (($DADVT.$DAJobsSSTEnable == 1) or ($DADVT.$DAJobsSSTEnable == 0))))">
							<set_value name="$DADVT.$DAJobsSSTEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not md.$DAJSSTTable? or (md.$DAJSSTTable == null)">
							<set_value name="md.$DAJSSTTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST? or ($DAJSST == null)">
							<set_value name="$DAJSST" exact="md.$DAJSSTTable"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$CriticalSectors? or ($DAJSST.$CriticalSectors == null)">
							<set_value name="$DAJSST.$CriticalSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$CoreSectors? or ($DAJSST.$CoreSectors == null)">
							<set_value name="$DAJSST.$CoreSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$BorderSectors? or ($DAJSST.$BorderSectors == null)">
							<set_value name="$DAJSST.$BorderSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$ContestedSectors? or ($DAJSST.$ContestedSectors == null)">
							<set_value name="$DAJSST.$ContestedSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$TraderSectors? or ($DAJSST.$TraderSectors == null)">
							<set_value name="$DAJSST.$TraderSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$MinerSectors? or ($DAJSST.$MinerSectors == null)">
							<set_value name="$DAJSST.$MinerSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$GasMinerSectors? or ($DAJSST.$GasMinerSectors == null)">
							<set_value name="$DAJSST.$GasMinerSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$ClaimspaceFactions? or ($DAJSST.$ClaimspaceFactions == null)">
							<create_list name="$DAJSST.$ClaimspaceFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$AllSectorGroup? or ($DAJSST.$AllSectorGroup == null)">
							<create_group groupname="$DAJSST.$AllSectorGroup"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$JobsActivated? or ($DAJSST.$JobsActivated == null)">
							<set_value name="$DAJSST.$JobsActivated" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$PrerequisitesComplete? or (not ((typeof $DAJSST.$PrerequisitesComplete == datatype.integer) and (($DAJSST.$PrerequisitesComplete == 1) or ($DAJSST.$PrerequisitesComplete == 0))))">
							<set_value name="$DAJSST.$PrerequisitesComplete" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$ReadyToOrderShips? or (not ((typeof $DAJSST.$ReadyToOrderShips == datatype.integer) and (($DAJSST.$ReadyToOrderShips == 1) or ($DAJSST.$ReadyToOrderShips == 0))))">
							<set_value name="$DAJSST.$ReadyToOrderShips" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas? or ($DADVT.$DAJobsSSTJobSizeQuotas == null)">
							<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTAllShips? or ($DADVT.$DAJobsSSTAllShips == null)">
							<create_group groupname="$DADVT.$DAJobsSSTAllShips"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTRemoveExclusivity? or (not ((typeof $DADVT.$DAJobsSSTRemoveExclusivity == datatype.integer) and (($DADVT.$DAJobsSSTRemoveExclusivity == 1) or ($DADVT.$DAJobsSSTRemoveExclusivity == 0))))">
							<set_value name="$DADVT.$DAJobsSSTRemoveExclusivity" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTUnsupportedFactions? or ($DADVT.$DAJobsSSTUnsupportedFactions == null)">
							<set_value name="$DADVT.$DAJobsSSTUnsupportedFactions" exact="[faction.boron,faction.player]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTDetailedDebug? or (not ((typeof $DADVT.$DAJobsSSTDetailedDebug == datatype.integer) and (($DADVT.$DAJobsSSTDetailedDebug == 1) or ($DADVT.$DAJobsSSTDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAJobsSSTDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTXtremelyDetailedDebug? or (not ((typeof $DADVT.$DAJobsSSTXtremelyDetailedDebug == datatype.integer) and (($DADVT.$DAJobsSSTXtremelyDetailedDebug == 1) or ($DADVT.$DAJobsSSTXtremelyDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAJobsSSTXtremelyDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$OverrideDefaultExecuted? or (not ((typeof $DAJSST.$OverrideDefaultExecuted == datatype.integer) and (($DAJSST.$OverrideDefaultExecuted == 1) or ($DAJSST.$OverrideDefaultExecuted == 0))))">
							<set_value name="$DAJSST.$OverrideDefaultExecuted" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$CheckForRecycleTable? or ($DAJSST.$CheckForRecycleTable == null)">
							<set_value name="$DAJSST.$CheckForRecycleTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="(not $DAJSST.$DAJobsSSTTimeScriptStarted?) or (not (typeof $DAJSST.$DAJobsSSTTimeScriptStarted == datatype.time))">
							<set_value name="$DAJSST.$DAJobsSSTTimeScriptStarted" exact="0s"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJSST.$ShipsToRecycle? or ($DAJSST.$ShipsToRecycle == null)">
							<create_group groupname="$DAJSST.$ShipsToRecycle"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAJobsSST -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
				<!-- DONE: Add more gates, set to off by default -->
				<!-- DONE: add eve faction optional gates via md in their mods -->
				<!-- DONE: create menu for activating / deactivating -->
				<!-- DONE: check if faction mods are successfully checked -->
				<!-- Gate // Update on load cues -->
				<cue name="UpdateOnLoadGate" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAGateEnable"/>
						<check_any>
							<check_value value="not $UpdateOnLoadGateTimer?"/>
							<check_value value="$UpdateOnLoadGateTimer? and (player.age gt $UpdateOnLoadGateTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadGateTimer" exact="player.age + 5s"/>
						<signal_cue_instantly cue="EventGateFindGates"/>
					</actions>
				</cue>
				<!-- Gate // Event cues -->
				<cue name="EventGateFindGates" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<set_value name="$LocDebug" exact="if event.param? then event.param else false"/>
						<!-- if someone removes gates mid playthrough this may have issues -->
						<set_value name="$DAGateLocZones" exact="[]"/>
						<set_value name="$DAGateLocGates" exact="[]"/>
						<set_value name="$DAGateLocAllGates" exact="[]"/>
						<set_value name="$DAGateLocTempGateList" exact="[]"/>
						<set_value name="$DAGateLocValidZoneMacros" exact="[]"/>
						<!-- Filter out invalid zones -->
						<do_for_each name="$DAGateLocZoneMacro" in="$DADVT.$DAGateZoneMacros">
							<!-- Letting this trigger debug errors if invalid -->
							<do_if value="$DAGateLocZoneMacro.id">
								<append_to_list name="$DAGateLocValidZoneMacros" exact="$DAGateLocZoneMacro"/>
							</do_if>
						</do_for_each>
						<!-- Find Zones from macros -->
						<find_zone name="$DAGateLocZones" multiple="true" space="player.galaxy" macro="$DAGateLocValidZoneMacros"/>
						<!-- Find Gates -->
						<find_gate name="$DAGateLocGates" multiple="true" space="$DAGateLocZones">
							<match_any>
								<match active="true"/>
								<match active="false"/>
							</match_any>
						</find_gate>
						<find_gate name="$DAGateLocAllGates" multiple="true" space="player.galaxy">
							<match_any>
								<match active="true"/>
								<match active="false"/>
							</match_any>
						</find_gate>
						<do_if value="$DADVT.$DAGateShowAllGates and $DAGateLocAllGates.count">
							<append_list_elements name="$DAGateLocTempGateList" other="$DAGateLocAllGates"/>
						</do_if>
						<do_elseif value="(not $DADVT.$DAGateShowAllGates) and $DAGateLocGates.count">
							<append_list_elements name="$DAGateLocTempGateList" other="$DAGateLocGates"/>
						</do_elseif>
						<!-- TODO: Might add error checking, who knows -->
						<!-- Check if gates are tracked -->
						<do_if value="$DAGateLocTempGateList.count" min="1">
							<do_if value="$DADVT.$DAGateDetailedDebug or $LocDebug">
								<debug_text text="'MOD: DAGate -- Number of gates found: %s of %s.'.[$DAGateLocTempGateList.count,$DAGateLocAllGates.count]" context="false" filter="scripts"/>
								<do_if value="$DADVT.$DAGateDetailedDebug">
									<set_value name="$DAGateLocGateDebugString" exact="'MOD: DAGate -- Gate Report:'"/>
								</do_if>
							</do_if>
							<do_for_each name="$DAGateLocGate" in="$DAGateLocTempGateList" counter="$A">
								<do_if value="@$DAGateLocGate and @$DAGateLocGate.exit and (not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate})">
									<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate"/>
									<do_if value="$DADVT.$DAGateDetailedDebug">
										<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: %s.%s.Gate -- IsActive: %s -- Destination: %s -- Exit: %s -- Extension: %s -- Tracked: %s'.[$A,$DAGateLocGate.sector.macro,$DAGateLocGate.zone.macro,$DAGateLocGate.isactive,$DAGateLocGate.destination.macro,$DAGateLocGate.exit.macro,$DAGateLocGate.extension,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}]" operation="add"/>
									</do_if>
									<do_if value="@$DAGateLocGate.exit and (not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit})">
										<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
										<do_if value="$DADVT.$DAGateDetailedDebug">
											<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: %s.%s.Gate -- IsActive: %s -- Destination: %s -- Exit: %s -- Extension: %s -- Tracked: %s'.[$A,$DAGateLocGate.exit.sector.macro,$DAGateLocGate.exit.zone.macro,$DAGateLocGate.exit.isactive,$DAGateLocGate.exit.destination.macro,$DAGateLocGate.macro,$DAGateLocGate.exit.extension,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}]" operation="add"/>
										</do_if>
									</do_if>
								</do_if>
								<do_elseif value="(not (@$DAGateLocGate and @$DAGateLocGate.exit)) and ($DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate} or $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit})">
									<remove_from_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate" multiple="true"/>
									<remove_from_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate.exit" multiple="true"/>
									<do_if value="$DADVT.$DAGateDetailedDebug">
										<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: REMOVED -- %s.%s.Gate -- IsActive: %s -- Destination: %s -- Exit: %s -- Extension: %s -- Tracked: %s'.[$A,@$DAGateLocGate.sector.macro,@$DAGateLocGate.zone.macro,@$DAGateLocGate.isactive,@$DAGateLocGate.destination.macro,@$DAGateLocGate.exit.macro,@$DAGateLocGate.extension,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}]" operation="add"/>
									</do_if>
								</do_elseif>
							</do_for_each>
							<do_if value="$DADVT.$DAGateDetailedDebug">
								<debug_text text="$DAGateLocGateDebugString" context="false" filter="scripts"/>
								<remove_value name="$DAGateLocGateDebugString"/>
							</do_if>
						</do_if>
						<remove_value name="$DAGateLocZones"/>
						<remove_value name="$DAGateLocGates"/>
						<remove_value name="$DAGateLocAllGates"/>
						<remove_value name="$DAGateLocTempGateList"/>
						<remove_value name="$DAGateLocValidZoneMacros"/>
						<remove_value name="$LocDebug"/>
					</actions>
				</cue>
				<cue name="EventGateFindOtherModGates" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<!-- event.param = [[$ZoneMacros]] -->
					</conditions>
					<actions>
						<do_if value="event.param? and (typeof event.param == datatype.list)">
							<set_value name="$LocMacroList" exact="[]"/>
							<append_list_elements name="$LocMacroList" other="event.param"/>
							<!-- Find Zones from macros -->
							<find_zone name="$DAGateLocZones" multiple="true" space="player.galaxy" macro="$LocMacroList"/>
							<!-- Find Gates -->
							<find_gate name="$DAGateLocGates" multiple="true" space="$DAGateLocZones">
								<match_any>
									<match active="true"/>
									<match active="false"/>
								</match_any>
							</find_gate>
							<do_if value="$DAGateLocGates.count" min="1">
								<do_for_each name="$DAGateLocGate" in="$DAGateLocGates">
									<do_if value="not md.$DADynamicVarTable.$DAGateTrackedGates.indexof.{$DAGateLocGate}">
										<append_to_list name="md.$DADynamicVarTable.$DAGateTrackedGates" exact="$DAGateLocGate"/>
									</do_if>
									<do_if value="not md.$DADynamicVarTable.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}">
										<append_to_list name="md.$DADynamicVarTable.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
									</do_if>
								</do_for_each>
							</do_if>
							<remove_value name="$LocMacroList"/>
							<remove_value name="$DAGateLocZones"/>
							<remove_value name="$DAGateLocGates"/>
						</do_if>
					</actions>
				</cue>
				<!-- Gate // Variable Check Libraries -->
				<library name="LibraryCheckGateVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAGateEnable? or (not ((typeof $DADVT.$DAGateEnable == datatype.integer) and (($DADVT.$DAGateEnable == 1) or ($DADVT.$DAGateEnable == 0))))">
							<set_value name="$DADVT.$DAGateEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateTrackedGates? or ($DADVT.$DAGateTrackedGates == null)">
							<set_value name="$DADVT.$DAGateTrackedGates" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateZoneMacros? or ($DADVT.$DAGateZoneMacros == null)">
							<set_value name="$DADVT.$DAGateZoneMacros" exact="[macro.ZoneDAG3_Cluster_28_Sector001_macro,macro.ZoneDAG6_Cluster_41_Sector001_macro,
								macro.ZoneDAG3_Cluster_46_Sector001_macro,macro.ZoneDAG6_Cluster_08_Sector001_macro,
								macro.ZoneDAG5_Cluster_15_Sector001_macro,macro.ZoneDAG2_Cluster_43_Sector001_macro,
								macro.ZoneDAG6_Cluster_19_Sector001_macro,macro.ZoneDAG3_Cluster_09_Sector001_macro,
								macro.ZoneDAG4_Cluster_18_Sector001_macro,macro.ZoneDAG1_Cluster_23_Sector001_macro,
								macro.ZoneDAG3_Cluster_14_Sector001_macro,macro.ZoneDAG1_Cluster_06_Sector001_macro]"/>
							<do_if value="faction.split?">
								<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG5_Cluster_405_Sector001_macro,macro.ZoneDAG2_Cluster_418_Sector001_macro]"/>
							</do_if>
							<do_if value="faction.terran?">
								<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG1_Cluster_112_Sector001_macro,macro.ZoneDAG1_Cluster_112_Sector002_macro]"/>
							</do_if>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateDetailedDebug? or (not ((typeof $DADVT.$DAGateDetailedDebug == datatype.integer) and (($DADVT.$DAGateDetailedDebug == 1) or ($DADVT.$DAGateDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAGateDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAGate -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
				<!-- God // God // God // God // God -->
				<!-- God // One time Cue -->
				<!-- God // Update on load cues -->
				<!-- God // Timer Cues -->
				<cue name="TimerGodFindKeyStations" instantiate="true" checkinterval="30min" checktime="105min" comment="Timer 15/45">
					<conditions>
						<check_value value="$DADVT.$DAGodEnable"/>
						<check_value value="$DADVT.$DAGodStationUpgradeEnable"/>
						<check_value value="$DADVT.$DAGodFactionModuleQuotas? and $DADVT.$DAGodFactionModuleQuotas.keys.list.count"/>
					</conditions>
					<actions>
						<set_value name="$DAGLocExcluded" exact="[faction.player,faction.xenon,faction.khaak]"/>
						<create_group groupname="$DAGCheckStations"/>
						<do_for_each name="$DAGLocFaction" in="$DADVT.$DAGodFactionModuleQuotas.keys.list">
							<do_if value="$DAGLocFaction.isactive and (not $DAGLocExcluded.indexof.{$DAGLocFaction})">
								<find_station_by_true_owner name="$DAGLocStations" space="player.galaxy" faction="$DAGLocFaction" checkoperational="true" functional="true" multiple="true">
									<match owner="faction.player" negate="true"/>
									<match_any>
										<match shipyard="true"/>
										<match wharf="true"/>
										<match equipmentdock="true"/>
									</match_any>
								</find_station_by_true_owner>
								<do_if value="$DAGLocStations.count" min="1">
									<do_for_each name="$DAGLocStation" in="$DAGLocStations">
										<do_if value="not $DADVT.$DAGodStationsUpgraded.indexof.{$DAGLocStation}">
											<add_to_group groupname="$DAGCheckStations" object="$DAGLocStation"/>
										</do_if>
									</do_for_each>
								</do_if>
								<remove_value name="$DAGLocStations"/>
							</do_if>
						</do_for_each>
						<do_if value="$DAGCheckStations.count" min="1">
							<signal_cue_instantly cue="EventGodSpreadKeyStationChecks" param="$DAGCheckStations"/>
						</do_if>
						<remove_value name="$DAGLocExcluded"/>
						<remove_value name="$DAGCheckStations"/>
					</actions>
				</cue>
				<!-- God // Event cues -->
				<!-- 20240521 God delays / Initial == 1200s - 1500s / Priority == 60s - 120s / Recovery == 1500s - 1800s -->
				<cue name="EventGodSetUpTables" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- Find factions, Check Wares, Set default values -->
						<set_value name="$LocDebug" exact="if event.param? then event.param else false"/>
						<include_actions ref="LibraryGodGetFactions"/>
						<include_actions ref="LibraryGodSetDefaultQuota"/>
						<include_actions ref="LibraryGodGetWares"/>
						<include_actions ref="LibraryGodFactionOverrides"/>
						<include_actions ref="LibraryGodCheckForEco"/>
						<remove_value name="$LocDebug"/>
					</actions>
				</cue>
				<cue name="EventGodSignalledActive" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- Menu will signal this active
							event.param = $Faction
							$DADVT.$DAGodFactionModuleQuotas
						-->
						<!-- 20240916 Build list of wares in order and table of wares and module count -->
						<set_value name="$DAGodFaction" exact="event.param"/>
						<set_value name="$DAGodDelay" min="1s" max="15s"/>
						<set_value name="$DAGodWareKeysList" exact="[]"/>
						<set_value name="$DAGodWareKeysRemovalList" exact="[]"/>
						<set_value name="$DAGodWareTypesOrdered" exact="0"/>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<append_list_elements name="$DAGodWareKeysList" other="$DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.keys.list"/>
						<do_if value="$DAGodWareKeysList.indexof.{'$Enabled'}">
							<remove_from_list name="$DAGodWareKeysList" exact="'$Enabled'"/>
						</do_if>
						<shuffle_list list="$DAGodWareKeysList"/>
						<!-- Prioritization of wares -->
						<!-- 20240922 Sort by tier from lowest to highest. Delays important wares but ensures that resources are available for more advanced wares -->
						<set_value name="$Tier1Wares" exact="[ware.energycells]"/>
						<set_value name="$Tier2Wares" exact="[ware.antimattercells,ware.graphene,ware.refinedmetals,ware.siliconwafers,ware.superfluidcoolant,ware.teladianium,ware.water]"/>
						<set_value name="$Tier3Wares" exact="[ware.advancedcomposites,ware.engineparts,ware.hullparts,ware.majasnails,ware.meat,ware.microchips,ware.plasmaconductors,ware.quantumtubes,ware.scanningarrays,ware.smartchips,ware.sojabeans,ware.spices,ware.sunriseflowers,ware.wheat]"/>
						<set_value name="$Tier4Wares" exact="[ware.advancedelectronics,ware.antimatterconverters,ware.dronecomponents,ware.fieldcoils,ware.foodrations,ware.medicalsupplies,ware.missilecomponents,ware.nostropoil,ware.shieldcomponents,ware.sojahusk,ware.turretcomponents,ware.weaponcomponents]"/>
						<set_value name="$Tier5Wares" exact="[ware.claytronics]"/>
						<do_if value="faction.boron?">
							<append_list_elements name="$Tier3Wares" other="[ware.bogas,ware.plankton]"/>
							<append_list_elements name="$Tier4Wares" other="[ware.bofu]"/>
						</do_if>
						<do_if value="faction.split?">
							<append_list_elements name="$Tier3Wares" other="[ware.cheltmeat,ware.scruffinfruits]"/>
						</do_if>
						<do_if value="faction.terran?">
							<append_list_elements name="$Tier2Wares" other="[ware.computronicsubstrate,ware.metallicmicrolattice,ware.proteinpaste,ware.stimulants]"/>
							<append_list_elements name="$Tier3Wares" other="[ware.siliconcarbide]"/>
						</do_if>
						<!-- Shuffle lists -->
						<shuffle_list list="$Tier1Wares"/>
						<shuffle_list list="$Tier2Wares"/>
						<shuffle_list list="$Tier3Wares"/>
						<shuffle_list list="$Tier4Wares"/>
						<shuffle_list list="$Tier5Wares"/>
						<!-- Set PriorityWareList -->
						<set_value name="$PriorityWareList" exact="[]"/>
						<append_list_elements name="$PriorityWareList" other="$Tier1Wares"/>
						<append_list_elements name="$PriorityWareList" other="$Tier5Wares"/>
						<append_list_elements name="$PriorityWareList" other="$Tier2Wares"/>
						<append_list_elements name="$PriorityWareList" other="$Tier3Wares"/>
						<append_list_elements name="$PriorityWareList" other="$Tier4Wares"/>
						<!-- Sort $DAGodWareKeysList -->
						<sort_list list="$DAGodWareKeysList" sortbyvalue="((@$PriorityWareList.indexof.{loop.element} gt 0) * 1000) - (@$PriorityWareList.indexof.{loop.element})" sortdescending="true"/>
						<do_if value="$DADVT.$DAGodXtremelyDetailedDebug">
							<set_value name="$LocString" exact="'Ware Order:'"/>
							<do_for_each name="$LocWare" in="$DAGodWareKeysList">
								<set_value name="$LocString" exact="'%s,'.[$LocWare.id]" operation="add"/>
							</do_for_each>
							<debug_text text="'MOD: DAGod -- EventGodSignalledActive -- %s -- %s'.[$DAGodFaction,$LocString]" context="false" filter="scripts"/>
							<remove_value name="$LocString"/>
						</do_if>
						<!-- Build table from $DAGodWareKeysList -->
						<!-- $DADVT.$DAGodModuleOrderTable -->
						<do_for_each name="$LocWare" in="$DAGodWareKeysList" counter="$C">
							<do_if value="(typeof $LocWare == datatype.ware) and $DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}? and $DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.{$LocWare}? and ($DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.{$LocWare}.{2} gt 0)">
								<do_if value="not $DADVT.$DAGodModuleOrderTable.{$DAGodFaction}?">
									<set_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}" exact="table[]"/>
								</do_if>
								<set_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$LocWare}" exact="$DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.{$LocWare}.{2}"/>
								<set_value name="$DAGodWareTypesOrdered" exact="1" operation="add"/>
							</do_if>
							<do_elseif value="(typeof $LocWare == datatype.ware) and $DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}? and $DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.{$LocWare}? and ($DADVT.$DAGodFactionModuleQuotas.{$DAGodFaction}.{$LocWare}.{2} le 0)">
								<do_if value="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$LocWare}?">
									<remove_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$LocWare}"/>
								</do_if>
								<append_to_list name="$DAGodWareKeysRemovalList" exact="$LocWare"/>
							</do_elseif>
							<do_elseif value="(typeof $LocWare != datatype.ware) and $DADVT.$DAGodXtremelyDetailedDebug">
								<debug_text text="'MOD: DAGod -- EventGodSignalledActive -- ERROR:CONTINUE -- Non Ware in $DAGodWareKeysList. $LocWare = %s'.[$LocWare]" context="false" filter="scripts"/>
							</do_elseif>
						</do_for_each>
						<do_if value="$DAGodWareKeysRemovalList.count" min="1">
							<remove_from_list name="$DAGodWareKeysList" list="$DAGodWareKeysRemovalList" multiple="true"/>
						</do_if>
						<!-- Signal cue that orders modules in order -->
						<do_if value="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.keys.list.count" min="1">
							<signal_cue_instantly cue="EventGodModuleQueue" param="[$DAGodFaction,$DAGodWareKeysList]"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAGod -- EventGodSignalledActive -- ERROR:UNHANDLED -- Invalid $DADVT.$DAGodModuleOrderTable.{%s}.keys.list.count: %s'.[$DAGodFaction,$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.keys.list.count]" context="true" filter="error"/>
						</do_else>
						<do_if value="$DADVT.$DAGodDetailedDebug">
							<debug_text text="'MOD: DAGod -- EventGodSignalledActive -- Finished signalling EventGodModuleQueue for %s -- Ware typed ordered: %s'.[$DAGodFaction.id,$DAGodWareTypesOrdered]" context="false" filter="scripts"/>
						</do_if>
						<remove_value name="$DAGodFaction"/>
						<remove_value name="$DAGodDelay"/>
						<remove_value name="$DAGodWareKeysList"/>
						<remove_value name="$DAGodWareKeysRemovalList"/>
						<remove_value name="$DAGodWareTypesOrdered"/>
						<remove_value name="$DADVT"/>
						<remove_value name="$PriorityWareList"/>
						<remove_value name="$Tier1Wares"/>
						<remove_value name="$Tier2Wares"/>
						<remove_value name="$Tier3Wares"/>
						<remove_value name="$Tier4Wares"/>
						<remove_value name="$Tier5Wares"/>
						<cancel_cue cue="EventGodSignalledActive"/>
					</actions>
				</cue>
				<cue name="EventGodModuleQueue" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param =  [$DAGodFaction,$DAGodWareKeysList] -->
						<!-- Finish <signal_cue_instantly cue="EventGodDesignStation" param="[this.$DAGodFaction,this.$LocWare,this.$DAGodDelay,null]"/> -->
						<set_value name="$DAGodFaction" exact="event.param.{1}"/>
						<set_value name="$DAGodWareList" exact="event.param.{2}"/>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<set_value name="$MaxModules" exact="$DADVT.$DAGodMaxModuleSetting"/>
						<do_if value="not @$MaxModules">
							<set_value name="$MaxModules" exact="10"/>
						</do_if>
						<set_value name="$Delay" min="1s" max="30s"/>
						<set_value name="$OtherDelay" min="1s" max="5s"/>
						<set_value name="$NextWare" exact="null"/>
					</actions>
					<cues>
						<cue name="GodProcessModuleQueue">
							<delay exact="$Delay"/>
							<actions>
								<do_if value="$DAGodWareList.count" min="1">
									<!-- Set Current Ware -->
									<do_if value="@$NextWare">
										<set_value name="$Ware" exact="$NextWare"/>
									</do_if>
									<do_else>
										<set_value name="$Ware" exact="$DAGodWareList.{1}"/>
									</do_else>
									<!-- Set Next Ware -->
									<do_if value="($DAGodWareList.indexof.{$Ware} + 1) le $DAGodWareList.count">
										<set_value name="$NextWare" exact="$DAGodWareList.{$DAGodWareList.indexof.{$Ware} + 1}"/>
									</do_if>
									<do_else>
										<set_value name="$NextWare" exact="null"/>
									</do_else>
									<!-- Logic to determine order size -->
									<set_value name="$ModulesOrdered" exact="0"/>
									<set_value name="$ModulesWanted" exact="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}"/>
									<set_value name="$Debug" exact="$DADVT.$DAGodDetailedDebug"/>
									<do_if value="$ModulesWanted gt 0">
										<!-- Smaller orders -->
										<!-- ge 5 = order 5 -->
										<!-- ge 1 = Order Remaining -->
										<do_if value="$ModulesWanted ge 5">
											<set_value name="$ModulesOrdered" exact="5"/>
										</do_if>
										<do_elseif value="$ModulesWanted ge 1">
											<set_value name="$ModulesOrdered" exact="$ModulesWanted"/>
										</do_elseif>
										<do_else>
											<!-- ERROR -->
											<debug_text text="'MOD: DAGod -- GodProcessModuleQueue -- ERROR:UNHANDLED -- Invalid number in $DADVT.$DAGodModuleOrderTable.{%s}.{%s} = %s'.[$DAGodFaction,$Ware,$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}]" context="true" filter="error"/>
										</do_else>
										<!-- Pass order -->
										<do_if value="$ModulesOrdered" min="1">
											<!-- 5minutes + (90s-120s per module * interval) == 6min30s - 55min @ interval 1 -->
											<set_value name="$ModuleDelay" min="90s" max="120s"/>
											<set_value name="$Interval" exact="($DADVT.$DAGodStationRequestInterval)s"/>
											<set_value name="$Delay" exact="300s + ($ModuleDelay * $ModulesOrdered * $Interval)"/>
											<signal_cue_instantly cue="EventGodDesignStation" param="[$DAGodFaction,$Ware,$OtherDelay,$ModulesOrdered]"/>
											<do_if value="$Debug">
												<debug_text text="'MOD: DAGod -- GodProcessModuleQueue -- Ordered modules -- Faction: %s -- Ware: %s -- Modules: %s of %s -- NextWare: %s -- TimeUntilNextWare: %s -- WaresListCount: %s'.[$DAGodFaction,$Ware,$ModulesOrdered,$ModulesWanted,$NextWare,300s + ($ModuleDelay * $ModulesOrdered * $Interval),$DAGodWareList.count]" context="false" filter="scripts"/>
											</do_if>
											<remove_value name="$ModuleDelay"/>
											<remove_value name="$Interval"/>
										</do_if>
										<!-- Update table -->
										<do_if value="($ModulesWanted - $ModulesOrdered) gt 0">
											<set_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}" exact="$ModulesOrdered" operation="subtract"/>
										</do_if>
										<do_elseif value="($ModulesWanted - $ModulesOrdered) == 0">
											<remove_from_list name="$DAGodWareList" exact="$Ware"/>
											<remove_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}"/>
										</do_elseif>
										<do_else>
											<!-- ERROR -->
											<do_if value="$DADVT.$DAGodXtremelyDetailedDebug">
												<debug_text text="'MOD: DAGod -- GodProcessModuleQueue -- ERROR:CONTINUE -- Invalid result -- $DADVT.$DAGodModuleOrderTable.{%s}.{%s} - %s = %s'.[$DAGodFaction,$Ware,$ModulesOrdered,($DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware} - $ModulesOrdered)]" context="false" filter="scripts"/>
											</do_if>
											<remove_from_list name="$DAGodWareList" exact="$Ware"/>
											<remove_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}"/>
										</do_else>
									</do_if>
									<do_else>
										<!-- ERROR -->
										<do_if value="$DADVT.$DAGodXtremelyDetailedDebug">
											<debug_text text="'MOD: DAGod -- GodProcessModuleQueue -- ERROR:CONTINUE -- Invalid ware entry in table -- $DADVT.$DAGodModuleOrderTable.{%s}.{%s} = %s'.[$DAGodFaction,$Ware,$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}]" context="false" filter="scripts"/>
										</do_if>
										<remove_from_list name="$DAGodWareList" exact="$Ware"/>
										<remove_value name="$DADVT.$DAGodModuleOrderTable.{$DAGodFaction}.{$Ware}"/>
									</do_else>
									<remove_value name="$ModulesOrdered"/>
									<remove_value name="$ModulesWanted"/>
									<remove_value name="$Debug"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<!-- Nothing left to order -->
									<cancel_cue cue="EventGodModuleQueue"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventGodDesignStation" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<delay exact="event.param.{3}"/>
					<actions>
						<!-- event.param = [$DAGodFaction,$DAGodWare,$DAGodDelay,null/quota] -->
						<!-- 20240328 If a previous attempt fails or is destroyed, then signal this cue with the number of modules in event.param.{4} -->
						<!-- 20240420 Removing build plot reduction has solved the station design error problem, increasing size to 25 modules -->
						<!-- 20240626 Changing hard coded module limit to adjustable variable: $DADVT.$DAGodMaxModuleSetting. -->
						<!-- 20240916 Faction spreading is handled in EventGodModuleQueue so delays can be reduced to simply spread performance impact. No need for priority either -->
						<set_value name="$DAGodLocFaction" exact="event.param.{1}"/>
						<set_value name="$DAGodLocWare" exact="event.param.{2}"/>
						<!-- Determine if param.{4} or table value should be used -->
						<do_if value="event.param.{4}? and event.param.{4}">
							<set_value name="$DAGodLocQuota" exact="event.param.{4}"/>
						</do_if>
						<do_else>
							<set_value name="$DAGodLocQuota" exact="md.$DADynamicVarTable.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}.{2}"/>
						</do_else>
						<!-- 20240915 Reducing md table memory calls -->
						<set_value name="$DAGodLocDelay" exact="1s"/>
						<set_value name="$DAGodLocModule" exact="md.$DADynamicVarTable.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}.{1}"/>
						<set_value name="$DAGodLocFullStations" exact="0"/>
						<set_value name="$DAGodLocExpandedStations" exact="0"/>
						<set_value name="$DAGodLocPartialStations" exact="0"/>
						<set_value name="$DAGodLocMaxModuleSetting" exact="md.$DADynamicVarTable.$DAGodMaxModuleSetting"/>
						<set_value name="$DAGodLocIntervalSetting" exact="(md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
						<set_value name="$LocAlreadyExpanded" exact="[]"/>
						<do_if value="$DAGodLocQuota ge $DAGodLocMaxModuleSetting">
							<set_value name="$LocAmountToOrder" exact="$DAGodLocQuota / $DAGodLocMaxModuleSetting"/>
							<do_if value="$LocAmountToOrder ge 1">
								<set_value name="$DAGodLocFullStations" exact="$LocAmountToOrder" operation="add"/>
								<do_all exact="$LocAmountToOrder" counter="$A">
									<set_value name="$DAGodLocDelay" min="15s * $DAGodLocIntervalSetting" max="60s * $DAGodLocIntervalSetting" operation="add"/>
									<signal_cue_instantly cue="EventGodRequestStation" param="[$DAGodLocFaction,$DAGodLocWare,$DAGodLocMaxModuleSetting,$DAGodLocDelay]"/>
									<set_value name="$DAGodLocQuota" exact="$DAGodLocMaxModuleSetting" operation="subtract"/>
								</do_all>
							</do_if>
							<remove_value name="$LocAmountToOrder"/>
						</do_if>
						<do_if value="$DAGodLocQuota" min="1">
							<!-- Check if we can expand a station -->
							<!-- 20240915 Try to spread module count over multiple stations -->
							<do_if value="$DAGodLocQuota" min="2">
								<!-- 20241003 Spread to as many stations that ONLY produce this ware -->
								<set_value name="$TempStations" exact="[]"/>
								<set_value name="$TempModuleAllocation" exact="table[]"/>
								<find_station_by_true_owner name="$TempStations" space="player.galaxy" faction="$DAGodLocFaction" checkoperational="true" multiple="true" tradestation="false" shipyard="false" wharf="false" equipmentdock="false" defencestation="false">
									<match_products wares="$DAGodLocWare"/>
									<match_child class="class.production" max="$DAGodLocMaxModuleSetting - 1"/>
								</find_station_by_true_owner>
								<do_if value="$TempStations.count" min="1">
									<sort_list list="$TempStations" sortbyvalue="loop.element.sector.security + loop.element.sector.economy" sortdescending="true"/>
									<do_for_each name="$LocStation" in="$TempStations">
										<do_if value="@LocStation">
											<set_value name="$LocModules" exact="$LocStation.plannedconstruction.sequence"/>
											<do_if value="$LocModules.count" min="1">
												<set_value name="$LocExistingModules" exact="0"/>
												<do_all exact="$LocModules.count" counter="$C">
													<do_if value="$LocModules.macro.{$C}.isclass.production and ($LocModules.{$C}.macro == $DAGodLocModule)">
														<set_value name="$LocExistingModules" exact="1" operation="add"/>
													</do_if>
													<do_elseif value="$LocModules.{$C}.macro.isclass.production and ($LocModules.{$C}.macro != $DAGodLocModule)">
														<!-- Not dealing with multi product for simplicity -->
														<remove_value name="$TempModuleAllocation.{$LocStation}"/>
														<set_value name="$LocExistingModules" exact="-1"/>
														<break/>
													</do_elseif>
													<do_if value="($LocExistingModules ge 1) and ($LocExistingModules lt $DAGodLocMaxModuleSetting) and ($C == $LocModules.count)">
														<set_value name="$TempModuleAllocation.{$LocStation}" exact="[$LocExistingModules,0]"/>
													</do_if>
												</do_all>
												<remove_value name="$LocExistingModules"/>
											</do_if>
											<remove_value name="$LocModules"/>
										</do_if>
									</do_for_each>
									<do_if value="$TempModuleAllocation.keys.count" min="1">
										<set_value name="$LeftToAllocate" exact="$DAGodLocQuota"/>
										<set_value name="$LocEscape" exact="false"/>
										<do_while value="$LeftToAllocate" min="1">
											<set_value name="$LocEscape" exact="true"/>
											<do_for_each name="$LocStation" in="$TempModuleAllocation.keys.list" counter="$D">
												<do_if value="$TempModuleAllocation.{$LocStation}? and (($TempModuleAllocation.{$LocStation}.{1} + $TempModuleAllocation.{$LocStation}.{2}) lt $DAGodLocMaxModuleSetting) and ($LeftToAllocate gt 0)">
													<set_value name="$TempModuleAllocation.{$LocStation}.{2}" exact="1" operation="add"/>
													<set_value name="$LeftToAllocate" exact="1" operation="subtract"/>
													<set_value name="$LocEscape" exact="false"/>
												</do_if>
												<do_elseif value="$LeftToAllocate == 0">
													<break/>
													<set_value name="$LocEscape" exact="false"/>
												</do_elseif>
											</do_for_each>
											<do_if value="$LocEscape">
												<!-- Adding this in to handle times when the script can not allocate the desired number of modules to all existing stations. Should prevent endless loop -->
												<break/>
											</do_if>
										</do_while>
										<do_if value="$LocEscape">
											<debug_text text="'MOD: DAGod -- EventGodDesignStation -- Escaped from the do_while -- Faction: %s -- Ware: %s -- $LeftToAllocate: %s -- $LocEscape: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$LocStation.knownname,$LeftToAllocate,$LocEscape]" context="false" filter="scripts"/>
										</do_if>
										<remove_value name="$LeftToAllocate"/>
										<remove_value name="$LocEscape"/>
										<do_for_each name="$LocStation" in="$TempModuleAllocation.keys.list">
											<do_if value="$TempModuleAllocation.{$LocStation}? and ($TempModuleAllocation.{$LocStation}.{2} gt 0)">
												<set_value name="$DAGodLocDelay" min="15s * $DAGodLocIntervalSetting" max="60s * $DAGodLocIntervalSetting" operation="add"/>
												<set_value name="$DAGodLocExpandedStations" exact="1" operation="add"/>
												<signal_cue_instantly cue="EventGodExpandStationWaitingCue" param="[$DAGodLocFaction,$DAGodLocWare,$TempModuleAllocation.{$LocStation}.{2},$LocStation,$DAGodLocDelay]"/>
												<set_value name="$DAGodLocQuota" exact="$TempModuleAllocation.{$LocStation}.{2}" operation="subtract"/>
												<do_if value="not $LocAlreadyExpanded.indexof.{$LocStation}">
													<append_to_list name="$LocAlreadyExpanded" exact="$LocStation"/>
												</do_if>
												<!-- TODO Proper debug var -->
												<do_if value="true">
													<debug_text text="'MOD: DAGod -- EventGodDesignStation -- Expanding Station with new logic -- Faction: %s -- Ware: %s -- $LocStation: %s(%s) in %s with %s modules -- Remaining Modules: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,$TempModuleAllocation.{$LocStation}.{2},$DAGodLocQuota]" context="false" filter="scripts"/>
												</do_if>
												<do_if value="$DAGodLocQuota le 0">
													<break/>
												</do_if>
											</do_if>
										</do_for_each>
									</do_if>
								</do_if>
								<remove_value name="$TempStations"/>
								<remove_value name="$TempModuleAllocation"/>
							</do_if>
							<do_if value="$DAGodLocQuota" min="1">
								<!-- 20240420 Removing build plot reduction has solved the station design error problem, increasing size to 25 modules -->
								<!-- 20240420 Removing check for similar resource stations to reduce multi product stations -->
								<find_station_by_true_owner name="$LocStations" space="player.galaxy" faction="$DAGodLocFaction" checkoperational="true" multiple="true" tradestation="false" shipyard="false" wharf="false" equipmentdock="false" defencestation="false">
									<match_products wares="$DAGodLocWare"/>
									<match_child class="class.production" max="$DAGodLocMaxModuleSetting - $DAGodLocQuota"/>
								</find_station_by_true_owner>
								<!-- 20241008 Check for incompatible modules to prevent TEL Scrap Processing Factory like problems -->
								<do_for_each name="$LocStation" in="$LocStations">
									<do_if value="@$LocStation and (not $LocAlreadyExpanded.indexof.{$LocStation})">
										<set_value name="$LocModules" exact="$LocStation.plannedconstruction.sequence"/>
										<do_if value="$LocModules.count" min="1">
											<do_all exact="$LocModules.count" counter="$C">
												<do_if value="$LocModules.{$C}.macro.isclass.production and ($LocModules.{$C}.macro != $DAGodLocModule)">
													<!-- Not dealing with multi product for simplicity -->
													<break/>
												</do_if>
												<do_elseif value="$C == $LocModules.count">
													<set_value name="$DAGodLocStation" exact="$LocStation"/>
												</do_elseif>
											</do_all>
										</do_if>
										<remove_value name="$LocModules"/>
										<do_if value="@$DAGodLocStation">
											<break/>
										</do_if>
									</do_if>
								</do_for_each>
								<remove_value name="$LocStations"/>
								<remove_value name="$LocAlreadyExpanded"/>
								<do_if value="@$DAGodLocStation">
									<set_value name="$DAGodLocDelay" min="15s * $DAGodLocIntervalSetting" max="60s * $DAGodLocIntervalSetting" operation="add"/>
									<set_value name="$DAGodLocExpandedStations" exact="1" operation="add"/>
									<signal_cue_instantly cue="EventGodExpandStationWaitingCue" param="[$DAGodLocFaction,$DAGodLocWare,$DAGodLocQuota,$DAGodLocStation,$DAGodLocDelay]"/>
								</do_if>
								<do_else>
									<set_value name="$DAGodLocDelay" min="15s * $DAGodLocIntervalSetting" max="60s * $DAGodLocIntervalSetting" operation="add"/>
									<set_value name="$DAGodLocPartialStations" exact="1" operation="add"/>
									<signal_cue_instantly cue="EventGodRequestStation" param="[$DAGodLocFaction,$DAGodLocWare,$DAGodLocQuota,$DAGodLocDelay]"/>
								</do_else>
								<remove_value name="$DAGodLocStation"/>
							</do_if>
						</do_if>
						<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
							<debug_text text="'MOD: DAGod -- EventGodDesignStation -- Ordering Stations -- Faction: %s -- Ware: %s -- FullStations: %s -- ExpandedStations: %s -- PartialStations: %s -- TotalModules: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocFullStations,$DAGodLocExpandedStations,$DAGodLocPartialStations,md.$DADynamicVarTable.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}.{2}]" context="false" filter="scripts"/>
						</do_if>
						<!-- Cleanup -->
						<remove_value name="$DAGodLocFaction"/>
						<remove_value name="$DAGodLocWare"/>
						<remove_value name="$DAGodLocQuota"/>
						<remove_value name="$DAGodLocDelay"/>
						<remove_value name="$DAGodLocModule"/>
						<remove_value name="$DAGodLocFullStations"/>
						<remove_value name="$DAGodLocExpandedStations"/>
						<remove_value name="$DAGodLocPartialStations"/>
						<remove_value name="$LocPriority"/>
						<remove_value name="$DAGodLocMaxModuleSetting"/>
						<remove_value name="$DAGodLocIntervalSetting"/>
					</actions>
				</cue>
				<cue name="EventGodExpandStationWaitingCue" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<delay exact="event.param.{5}"/>
					<actions>
						<set_value name="$DAGodLocFaction" exact="event.param.{1}"/>
						<set_value name="$DAGodLocWare" exact="event.param.{2}"/>
						<set_value name="$DAGodLocQuota" exact="event.param.{3}"/>
						<set_value name="$DAGodLocStation" exact="event.param.{4}"/>
						<do_if value="$DAGodLocQuota and $DAGodLocStation">
							<signal_cue_instantly cue="EventGodExpandStation" param="[$DAGodLocFaction,$DAGodLocWare,$DAGodLocQuota,$DAGodLocStation]"/>
						</do_if>
						<do_elseif value="not $DAGodLocQuota">
							<debug_text text="'MOD: DAGod -- EventGodExpandStationWaitingCue -- ERROR:UNHANDLED -- NO QUOTA -- Faction: %s -- Ware: %s -- Quota: %s -- Station: %s(%s)'.[@$DAGodLocFaction.id,@$DAGodLocWare.id,@$DAGodLocQuota,@$DAGodLocStation.knownname,@$DAGodLocStation.idcode]" context="true" filter="error"/>
						</do_elseif>
						<do_elseif value="not $DAGodLocStation">
							<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
							<signal_cue_instantly cue="EventGodDesignStation" param="[$DAGodLocFaction,$DAGodLocWare,$LocDelay,$DAGodLocQuota]"/>
						</do_elseif>
						<remove_value name="$DAGodLocFaction"/>
						<remove_value name="$DAGodLocWare"/>
						<remove_value name="$DAGodLocQuota"/>
						<remove_value name="$DAGodLocStation"/>
						<remove_value name="$LocDelay"/>
					</actions>
				</cue>
				<cue name="EventGodRequestStation" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<delay exact="event.param.{4}"/>
					<actions>
						<!-- EventGodRequestStation param = [$Faction,$Ware,$ModuleCount,$Delay] -->
						<!-- DONE: Filter sectors for resources if $Ware is a first stage production -->
						<!-- DONE: Test lower zone limits. Working. -->
						<!-- DONE: implement position placement method -->
						<set_value name="$DAGodLocFaction" exact="event.param.{1}"/>
						<set_value name="$DAGodLocWare" exact="event.param.{2}"/>
						<set_value name="$DAGodLocModCount" exact="event.param.{3}"/>
						<set_value name="$DAGodLocMaxStations" exact="2" comment="Max amount of existing stations in a zone to consider building in"/>
						<get_factions_by_relation result="$DAGodLocEnemies" faction="$DAGodLocFaction" relation="killmilitary"/>
						<do_if value="md.$DADynamicVarTable.$DAGodAllowBuildInFriendly">
							<get_factions_by_relation result="$DAGodLocFriends" faction="$DAGodLocFaction" relation="member"/>
						</do_if>
						<find_sector name="$DAGodLocSectors" space="player.galaxy" owner="$DAGodLocFaction" contested="false" multiple="true"/>
						<do_if value="not $DAGodLocFaction.isactive">
							<debug_text text="'MOD: DAGod -- EventGodRequestStation -- ERROR:UNHANDLED -- FACTION INACTIVE -- Faction: %s -- Ware: %s -- ModuleCount: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount]" context="true" filter="error"/>
							<!-- TODO: Cancel requests? Since inactive factions are filtered in menu, this should only trigger on factions that go inactive -->
						</do_if>
						<do_elseif value="$DAGodLocFaction.isactive and $DAGodLocSectors.count">
							<!-- Request in owned sector -->
							<!-- Applies special logic for wares that require minable or energycells, then checks safe/core sectors before danger/border sectors -->
							<set_value name="$DAGodLocSafeSectors" exact="[]"/>
							<set_value name="$DAGodLocDangerSectors" exact="[]"/>
							<set_value name="$LocCheckSunlight" exact="false"/>
							<set_value name="$LocResourceSectors" exact="[]"/>
							<set_value name="$LocSunlightSectors" exact="[]"/>
							<do_for_each name="$DAGodLocSector" in="$DAGodLocSectors">
								<find_sector_in_range name="$DAGodEnemySectors" object="$DAGodLocSector" maxdistance="1" owner="$DAGodLocEnemies" multiple="true"/>
								<do_if value="not @$DAGodEnemySectors.count">
									<append_to_list name="$DAGodLocSafeSectors" exact="$DAGodLocSector"/>
								</do_if>
								<do_else>
									<append_to_list name="$DAGodLocDangerSectors" exact="$DAGodLocSector"/>
								</do_else>
								<remove_value name="$DAGodEnemySectors"/>
							</do_for_each>
							<set_value name="$LocResourcesNeeded" exact="[]"/>
							<do_if value="$DAGodLocWare.raceresources.{$DAGodLocFaction.primaryrace}.count" min="1">
								<do_for_each name="$LocWareResource" in="$DAGodLocWare.raceresources.{$DAGodLocFaction.primaryrace}.list">
									<do_if value="$LocWareResource.hastag.{tag.minable}">
										<append_to_list name="$LocResourcesNeeded" exact="$LocWareResource"/>
									</do_if>
								</do_for_each>
							</do_if>
							<do_if value="$DAGodLocWare == ware.energycells">
								<set_value name="$LocCheckSunlight" exact="true"/>
							</do_if>
							<!-- 20240424 Improved resource check to check safe then danger, will proceed to normal logic if no zone found -->
							<!-- 20240709 Wares requiring resources will now use position based logic before choosing sectors normally if no desired zones are found in Safe/Danger sectors -->
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $LocResourcesNeeded.count and ($DAGodLocSafeSectors.count or $DAGodLocDangerSectors.count)" comment="requires minable resources">
								<do_if value="$DAGodLocSafeSectors.count" min="1">
									<shuffle_list list="$DAGodLocSafeSectors"/>
									<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
										<do_if value="$DAGodLocSector.resources.count" min="1">
											<do_for_each name="$LocSectorResource" in="$DAGodLocSector.resources.list">
												<do_if value="$LocResourcesNeeded.indexof.{$LocSectorResource}">
													<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
														<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
													</find_zone>
													<do_if value="@$DAGodLocZone">
														<clear_list list="$LocResourceSectors"/>
														<break/>
													</do_if>
													<do_if value="not $LocResourceSectors.indexof.{$DAGodLocSector}">
														<append_to_list name="$LocResourceSectors" exact="$DAGodLocSector"/>
													</do_if>
												</do_if>
											</do_for_each>
										</do_if>
										<do_if value="@$DAGodLocZone">
											<clear_list list="$LocResourceSectors"/>
											<break/>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="(not @$DAGodLocZone) and $DAGodLocDangerSectors.count">
									<shuffle_list list="$DAGodLocDangerSectors"/>
									<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
										<do_if value="$DAGodLocSector.resources.count" min="1">
											<do_for_each name="$LocSectorResource" in="$DAGodLocSector.resources.list">
												<do_if value="$LocResourcesNeeded.indexof.{$LocSectorResource}">
													<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
														<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
														<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
													</find_zone>
													<do_if value="@$DAGodLocZone">
														<clear_list list="$LocResourceSectors"/>
														<break/>
													</do_if>
													<do_if value="not $LocResourceSectors.indexof.{$DAGodLocSector}">
														<append_to_list name="$LocResourceSectors" exact="$DAGodLocSector"/>
													</do_if>
												</do_if>
											</do_for_each>
										</do_if>
										<do_if value="@$DAGodLocZone">
											<clear_list list="$LocResourceSectors"/>
											<break/>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="(not @$DAGodLocZone) and $LocResourceSectors.count">
									<!-- 20240709 Position logic -->
									<set_value name="$DAGodLocSector" exact="$LocResourceSectors.random"/>
									<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
									<set_value name="$Yaw" min="0deg" max="360deg"/>
									<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
									<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
									<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
									<remove_value name="$SectorCenter"/>
									<remove_value name="$Yaw"/>
									<remove_value name="$Y"/>
									<remove_value name="$PlacementDist"/>
								</do_if>
							</do_if>
							<!-- 20240424 Added logic for energycell production to check safe then danger, will proceed to normal logic if no zone found -->
							<!-- 20240709 EC will now use position based logic before choosing sectors normally if no desired zones are found in Safe/Danger sectors -->
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $LocCheckSunlight and ($DAGodLocSafeSectors.count or $DAGodLocDangerSectors.count)" comment="energycells">
								<do_if value="$DAGodLocSafeSectors.count" min="1">
									<shuffle_list list="$DAGodLocSafeSectors"/>
									<sort_list list="$DAGodLocSafeSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
									<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
										<do_if value="$DAGodLocSector.sunlight ge 1.0">
											<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
												<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
											</find_zone>
											<do_if value="@$DAGodLocZone">
												<clear_list list="$LocSunlightSectors"/>
												<break/>
											</do_if>
											<do_if value="not $LocSunlightSectors.indexof.{$DAGodLocSector}">
												<append_to_list name="$LocSunlightSectors" exact="$DAGodLocSector"/>
											</do_if>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="(not @$DAGodLocZone) and $DAGodLocDangerSectors.count">
									<shuffle_list list="$DAGodLocDangerSectors"/>
									<sort_list list="$DAGodLocDangerSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
									<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
										<do_if value="$DAGodLocSector.sunlight ge 1.0">
											<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
												<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
												<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
											</find_zone>
											<do_if value="@$DAGodLocZone">
												<clear_list list="$LocSunlightSectors"/>
												<break/>
											</do_if>
											<do_if value="not $LocSunlightSectors.indexof.{$DAGodLocSector}">
												<append_to_list name="$LocSunlightSectors" exact="$DAGodLocSector"/>
											</do_if>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="(not @$DAGodLocZone) and $LocSunlightSectors.count">
									<!-- 20240709 Position logic -->
									<sort_list list="$LocSunlightSectors.count" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
									<set_value name="$DAGodLocSector" exact="$LocSunlightSectors.{1}"/>
									<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
									<set_value name="$Yaw" min="0deg" max="360deg"/>
									<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
									<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
									<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
									<remove_value name="$SectorCenter"/>
									<remove_value name="$Yaw"/>
									<remove_value name="$Y"/>
									<remove_value name="$PlacementDist"/>
								</do_if>
							</do_if>
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $DAGodLocSafeSectors.count" comment="safe sectors">
								<shuffle_list list="$DAGodLocSafeSectors"/>
								<sort_list list="$DAGodLocSafeSectors" sortbyvalue="loop.element.economy + loop.element.security" sortdescending="true"/>
								<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
									<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
										<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
									</find_zone>
									<do_if value="@$DAGodLocZone">
										<break/>
									</do_if>
								</do_for_each>
							</do_if>
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $DAGodLocDangerSectors.count" comment="danger sectors">
								<shuffle_list list="$DAGodLocDangerSectors"/>
								<sort_list list="$DAGodLocDangerSectors" sortbyvalue="loop.element.economy + loop.element.security" sortdescending="true"/>
								<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
									<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
										<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
										<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
									</find_zone>
									<do_if value="@$DAGodLocZone">
										<break/>
									</do_if>
								</do_for_each>
							</do_if>
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $DAGodLocSafeSectors.count" comment="position based logic">
								<do_if value="$LocCheckSunlight">
									<sort_list list="$DAGodLocSafeSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
									<set_value name="$DAGodLocSector" exact="$DAGodLocSafeSectors.{1}"/>
								</do_if>
								<do_else>
									<sort_list list="$DAGodLocSafeSectors" sortbyvalue="loop.element.economy + loop.element.security" sortdescending="true"/>
									<set_value name="$LocIndex" min="1" max="$DAGodLocSafeSectors.count" profile="decreasing"/>
									<set_value name="$DAGodLocSector" exact="$DAGodLocSafeSectors.{$LocIndex}"/>
									<remove_value name="$LocIndex"/>
								</do_else>
								<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
								<set_value name="$Yaw" min="0deg" max="360deg"/>
								<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
								<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
								<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
								<remove_value name="$SectorCenter"/>
								<remove_value name="$Yaw"/>
								<remove_value name="$Y"/>
								<remove_value name="$PlacementDist"/>
							</do_if>
							<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $DAGodLocDangerSectors.count" comment="position based logic">
								<do_if value="$LocCheckSunlight">
									<sort_list list="$DAGodLocDangerSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
									<set_value name="$DAGodLocSector" exact="$DAGodLocDangerSectors.{1}"/>
								</do_if>
								<do_else>
									<sort_list list="$DAGodLocDangerSectors" sortbyvalue="loop.element.economy + loop.element.security" sortdescending="true"/>
									<set_value name="$LocIndex" min="1" max="$DAGodLocDangerSectors.count" profile="decreasing"/>
									<set_value name="$DAGodLocSector" exact="$DAGodLocDangerSectors.{$LocIndex}"/>
									<remove_value name="$LocIndex"/>
								</do_else>
								<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
								<set_value name="$Yaw" min="0deg" max="360deg"/>
								<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
								<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
								<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
								<remove_value name="$SectorCenter"/>
								<remove_value name="$Yaw"/>
								<remove_value name="$Y"/>
								<remove_value name="$PlacementDist"/>
							</do_if>
							<remove_value name="$DAGodLocSectors"/>
							<remove_value name="$DAGodLocSafeSectors"/>
							<remove_value name="$DAGodLocDangerSectors"/>
							<remove_value name="$LocResourcesNeeded"/>
							<remove_value name="$LocCheckSunlight"/>
						</do_elseif>
						<!-- 20240410 @$DAGodLocFriends.count will be null if option to build in friendly is disabled -->
						<do_if value="not $DAGodLocFaction.isactive">
							<debug_text text="'MOD: DAGod -- EventGodRequestStation -- ERROR:UNHANDLED -- FACTION INACTIVE -- Faction: %s -- Ware: %s -- ModuleCount: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount]" context="true" filter="error"/>
							<!-- TODO: Cancel requests? Since inactive factions are filtered in menu, this should only trigger on factions that go inactive -->
						</do_if>
						<do_elseif value="$DAGodLocFaction.isactive and @$DAGodLocFriends.count and (not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition)))">
							<!-- Option for allowing AI to build in player sector, default false -->
							<do_if value="(not md.$DADynamicVarTable.$DAGodAllowBuildInPlayer) and $DAGodLocFriends.indexof.{faction.player}">
								<remove_from_list name="$DAGodLocFriends" exact="faction.player" multiple="true"/>
							</do_if>
							<!-- Request in ally sector if no owned -->
							<do_if value="$DAGodLocFriends.count" min="1">
								<find_sector name="$DAGodLocSectors" space="player.galaxy" owner="$DAGodLocFriends" contested="false" multiple="true"/>
								<do_if value="$DAGodLocSectors.count" min="1">
									<!-- Request in ally owned sector -->
									<set_value name="$DAGodLocSafeSectors" exact="[]"/>
									<set_value name="$DAGodLocDangerSectors" exact="[]"/>
									<set_value name="$LocCheckSunlight" exact="false"/>
									<do_for_each name="$DAGodLocSector" in="$DAGodLocSectors">
										<find_sector_in_range name="$DAGodEnemySectors" object="$DAGodLocSector" maxdistance="1" owner="$DAGodLocEnemies" multiple="true"/>
										<do_if value="not @$DAGodEnemySectors.count">
											<append_to_list name="$DAGodLocSafeSectors" exact="$DAGodLocSector"/>
										</do_if>
										<do_else>
											<append_to_list name="$DAGodLocDangerSectors" exact="$DAGodLocSector"/>
										</do_else>
										<remove_value name="$DAGodEnemySectors"/>
									</do_for_each>
									<set_value name="$LocResourcesNeeded" exact="[]"/>
									<do_if value="$DAGodLocWare.raceresources.{$DAGodLocFaction.primaryrace}.count" min="1">
										<do_for_each name="$LocWareResource" in="$DAGodLocWare.raceresources.{$DAGodLocFaction.primaryrace}.list">
											<do_if value="$LocWareResource.hastag.{tag.minable}">
												<append_to_list name="$LocResourcesNeeded" exact="$LocWareResource"/>
											</do_if>
										</do_for_each>
									</do_if>
									<do_if value="$DAGodLocWare == ware.energycells">
										<set_value name="$LocCheckSunlight" exact="true"/>
									</do_if>
									<!-- 20240424 Improved resource check to check safe then danger, will proceed to normal logic if no zone found -->
									<do_if value="not @$DAGodLocZone and $LocResourcesNeeded.count" comment="requires minable resources">
										<shuffle_list list="$DAGodLocSafeSectors"/>
										<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
											<do_if value="$DAGodLocSector.resources.count" min="1">
												<do_for_each name="$LocSectorResource" in="$DAGodLocSector.resources.list">
													<do_if value="$LocResourcesNeeded.indexof.{$LocSectorResource}">
														<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
															<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
														</find_zone>
														<do_if value="@$DAGodLocZone">
															<break/>
														</do_if>
													</do_if>
												</do_for_each>
											</do_if>
											<do_if value="@$DAGodLocZone">
												<break/>
											</do_if>
										</do_for_each>
										<do_if value="not @$DAGodLocZone">
											<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
												<do_if value="$DAGodLocSector.resources.count" min="1">
													<do_for_each name="$LocSectorResource" in="$DAGodLocSector.resources.list">
														<do_if value="$LocResourcesNeeded.indexof.{$LocSectorResource}">
															<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
																<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
																<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
															</find_zone>
															<do_if value="@$DAGodLocZone">
																<break/>
															</do_if>
														</do_if>
													</do_for_each>
												</do_if>
												<do_if value="@$DAGodLocZone">
													<break/>
												</do_if>
											</do_for_each>
										</do_if>
									</do_if>
									<!-- 20240424 Added logic for energycell production to check safe then danger, will proceed to normal logic if no zone found -->
									<do_if value="not @$DAGodLocZone and $LocCheckSunlight" comment="energycells">
										<shuffle_list list="$DAGodLocSafeSectors"/>
										<do_if value="$LocCheckSunlight">
											<sort_list list="$DAGodLocSafeSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
										</do_if>
										<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
											<do_if value="$DAGodLocSector.sunlight ge 1.0">
												<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
													<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
												</find_zone>
												<do_if value="@$DAGodLocZone">
													<break/>
												</do_if>
											</do_if>
										</do_for_each>
										<do_if value="not @$DAGodLocZone">
											<sort_list list="$DAGodLocDangerSectors" sortbyvalue="loop.element.sunlight" sortdescending="true"/>
											<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
												<do_if value="$DAGodLocSector.sunlight ge 1.0">
													<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
														<match_child class="class.station" min="0" max="$DAGodLocMaxStations" checkoperational="false"/>
														<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
													</find_zone>
													<do_if value="@$DAGodLocZone">
														<break/>
													</do_if>
												</do_if>
											</do_for_each>
										</do_if>
									</do_if>
									<do_if value="not @$DAGodLocZone" comment="safe sectors">
										<shuffle_list list="$DAGodLocSafeSectors"/>
										<do_all exact="$DAGodLocMaxStations" counter="$A">
											<do_for_each name="$DAGodLocSector" in="$DAGodLocSafeSectors">
												<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
													<match_child class="class.station" min="0" max="$A" checkoperational="false"/>
												</find_zone>
												<do_if value="@$DAGodLocZone">
													<break/>
												</do_if>
											</do_for_each>
											<do_if value="@$DAGodLocZone">
												<break/>
											</do_if>
										</do_all>
									</do_if>
									<do_if value="not @$DAGodLocZone" comment="danger sectors">
										<shuffle_list list="$DAGodLocDangerSectors"/>
										<do_all exact="$DAGodLocMaxStations" counter="$A">
											<do_for_each name="$DAGodLocSector" in="$DAGodLocDangerSectors">
												<find_zone name="$DAGodLocZone" space="$DAGodLocSector" normalzone="true" tempzone="false" multiple="false">
													<match_child class="class.station" min="0" max="$A" checkoperational="false"/>
													<match_child class="[class.gate, class.highwayentrygate, class.highwayexitgate]" negate="true"/>
												</find_zone>
												<do_if value="@$DAGodLocZone">
													<break/>
												</do_if>
											</do_for_each>
											<do_if value="@$DAGodLocZone">
												<break/>
											</do_if>
										</do_all>
									</do_if>
									<do_if value="not @$DAGodLocZone and $DAGodLocSafeSectors.count" comment="position based logic">
										<set_value name="$DAGodLocSector" exact="$DAGodLocSafeSectors.random"/>
										<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
										<set_value name="$Yaw" min="0deg" max="360deg"/>
										<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
										<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
										<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
										<remove_value name="$SectorCenter"/>
										<remove_value name="$Yaw"/>
										<remove_value name="$Y"/>
										<remove_value name="$PlacementDist"/>
									</do_if>
									<do_if value="(not (@$DAGodLocZone or (@$DAGodLocSector and @$DAGodStationPosition))) and $DAGodLocDangerSectors.count" comment="position based logic">
										<set_value name="$DAGodLocSector" exact="$DAGodLocDangerSectors.random"/>
										<set_value name="$SectorCenter" exact="$DAGodLocSector.coreposition"/>
										<set_value name="$Yaw" min="0deg" max="360deg"/>
										<set_value name="$Y" min="$SectorCenter.y - 10km" max="$SectorCenter.y + 10km"/>
										<set_value name="$PlacementDist" min="$DAGodLocSector.coresize / 8" max="$DAGodLocSector.coresize / 2"/>
										<create_position name="$DAGodStationPosition" space="$DAGodLocSector" x="$SectorCenter.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCenter.z + cos($Yaw) * $PlacementDist"/>
										<remove_value name="$SectorCenter"/>
										<remove_value name="$Yaw"/>
										<remove_value name="$Y"/>
										<remove_value name="$PlacementDist"/>
									</do_if>
									<remove_value name="$DAGodLocSectors"/>
									<remove_value name="$DAGodLocSafeSectors"/>
									<remove_value name="$DAGodLocDangerSectors"/>
									<remove_value name="$LocResourcesNeeded"/>
									<remove_value name="$LocCheckSunlight"/>
								</do_if>
							</do_if>
						</do_elseif>
						<remove_value name="$DAGodLocEnemies"/>
						<do_if value="@$DAGodLocZone">
							<!-- We have a zone that meets the criteria -->
							<!-- We know where we want to build station, time to deal with design -->
							<!-- factionlogic_stations Find_Location_And_Build_Station has logic for creating station -->
							<!-- DONE: Test implementation of max distance for station placement -->
							<!-- Changing max to 30km prevented any instances of build storage being outside of zone causing mass traffic errors -->
							<create_factory name="$DAGodLocFactory" modules="$DAGodLocModules" resultbasesequence="$DAGodLocBaseSequence" zone="$DAGodLocZone" race="$DAGodLocFaction.primaryrace" owner="$DAGodLocFaction" originalproduct="$DAGodLocWare">
								<compatibilities>
									<limits production="$DAGodLocModCount"/>
								</compatibilities>
								<select ware="$DAGodLocWare" faction="$DAGodLocFaction"/>
								<safepos max="30km" includeplotbox="true"/>
							</create_factory>
						</do_if>
						<do_elseif value="@$DAGodLocSector and @$DAGodStationPosition">
							<!-- TODO: TEST. Have yet to reach this code after 20 hours of testing -->
							<create_factory name="$DAGodLocFactory" modules="$DAGodLocModules" resultbasesequence="$DAGodLocBaseSequence" sector="$DAGodLocSector" race="$DAGodLocFaction.primaryrace" owner="$DAGodLocFaction" originalproduct="$DAGodLocWare">
								<compatibilities>
									<limits production="$DAGodLocModCount"/>
								</compatibilities>
								<select ware="$DAGodLocWare" faction="$DAGodLocFaction"/>
								<safepos value="$DAGodStationPosition" includeplotbox="true"/>
							</create_factory>
						</do_elseif>
						<do_elseif value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
							<debug_text text="'MOD: DAGod -- EventGodRequestStation -- ERROR:CONTINUE -- NO ZONE or SECTOR+POSITION -- Faction: %s -- Ware: %s -- ModuleCount: %s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount]" context="false" filter="scripts"/>
						</do_elseif>
						<do_if value="@$DAGodLocFactory">
							<do_if value="not md.$DADynamicVarTable.$DAGodStationsStarted.{$DAGodLocFaction}?">
								<set_value name="md.$DADynamicVarTable.$DAGodStationsStarted.{$DAGodLocFaction}" exact="1"/>
							</do_if>
							<do_else>
								<set_value name="md.$DADynamicVarTable.$DAGodStationsStarted.{$DAGodLocFaction}" exact="1" operation="add"/>
							</do_else>
							<signal_cue_instantly cue="md.FinaliseStations.NewStation_GenerateFactory_Signal" param="table[
									$station = $DAGodLocFactory,
									$plannedmodules = $DAGodLocModules,
									$basesequence = $DAGodLocBaseSequence,
									$moduleset = $DAGodLocFactory.modulesets.{1},
									$debugoutput = md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug
								]"/>
							<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
								<do_if value="@$DAGodLocZone">
									<debug_text text="'MOD: DAGod -- EventGodRequestStation -- Created Factory -- Faction: %s -- Ware: %s -- ModuleCount: %s -- Factory: %s(%s) -- Zone(Sector): %s(%s)'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount,$DAGodLocFactory.knownname,$DAGodLocFactory.idcode,$DAGodLocZone.macro,$DAGodLocZone.sector.knownname]" context="false" filter="scripts"/>
								</do_if>
								<do_elseif value="@$DAGodLocSector and @$DAGodStationPosition">
									<debug_text text="'MOD: DAGod -- EventGodRequestStation -- Created Factory -- Faction: %s -- Ware: %s -- ModuleCount: %s -- Factory: %s(%s) -- Sector: %s -- Position: %s,%s,%s'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount,$DAGodLocFactory.knownname,$DAGodLocFactory.idcode,$DAGodLocSector.knownname,$DAGodStationPosition.x,$DAGodStationPosition.y,$DAGodStationPosition.z]" context="false" filter="scripts"/>
								</do_elseif>
							</do_if>
							<!-- 20240917 DA News -->
							<do_if value="@md.$DADynamicVarTable.$DADynamicNewsEnable and ((not @md.$DADynamicVarTable.$DADynamicNewsKnownFactionsOnly) or ($DAGodLocFaction.knowntoplayer))">
								<signal_cue_instantly cue="md.DeadAirDynamicUniverse.EventDynamicNewsNewStationStarted" param="[$DAGodLocFactory,$DAGodLocWare]"/>
							</do_if>
							<!-- 20240328 Updated to handle recovery -->
							<signal_cue_instantly cue="EventGodStationWatcher" param="[$DAGodLocFactory,$DAGodLocFaction,$DAGodLocWare,$DAGodLocModCount]"/>
						</do_if>
						<do_else>
							<!-- ERROR -->
							<!-- Signal EventGodDesignStation if factory fails. Working as intended. -->
							<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
							<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
								<debug_text text="'MOD: DAGod -- EventGodRequestStation -- ERROR:RECOVERED -- Failed creating factory. Recovering. -- Faction: %s -- Ware: %s -- ModuleCount: %s -- Zone(Sector): %s(%s)'.[$DAGodLocFaction.id,$DAGodLocWare.id,$DAGodLocModCount,$DAGodLocZone.macro,$DAGodLocZone.sector.knownname]" context="false" filter="scripts"/>
							</do_if>
							<signal_cue_instantly cue="EventGodDesignStation" param="[$DAGodLocFaction,$DAGodLocWare,$LocDelay,$DAGodLocModCount]"/>
							<cancel_cue cue="EventGodRequestStation"/>
						</do_else>
					</actions>
				</cue>
				<cue name="EventGodExpandStation" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- EventGodExpandStation param = [$LocFaction,$LocWare,$LocQuota,$LocStation] -->
						<set_value name="$LocFaction" exact="event.param.{1}"/>
						<set_value name="$LocWare" exact="event.param.{2}"/>
						<set_value name="$LocQuota" exact="event.param.{3}"/>
						<set_value name="$LocStation" exact="event.param.{4}"/>
						<set_value name="$LocModule" exact="md.$DADynamicVarTable.$DAGodFactionModuleQuotas.{$LocFaction}.{$LocWare}.{1}"/>
						<set_value name="$LocNewModules" exact="[]"/>
						<do_if value="$LocQuota and $LocStation and $LocModule">
							<!-- DONE: Use factionlogic_economy.xml for reference line: 2371 -->
							<set_value name="$LocAllModules" exact="$LocStation.plannedconstruction.sequence" comment="All currently planned modules"/>
							<set_value name="$LocAllProduction" exact="[]" comment="All current and future production module macros"/>
							<set_value name="$LocAllStorage" exact="[]" comment="All current and future storage module macros"/>
							<set_value name="$LocNewDockModules" exact="[]"/>
							<set_value name="$LocNewProductionModules" exact="[]"/>
							<set_value name="$LocNewHabitationModules" exact="[]"/>
							<set_value name="$LocNewStorageModules" exact="[]"/>
							<set_value name="$LocOptimalWorkforce" exact="0"/>
							<set_value name="$LocWorkforceCapacity" exact="0"/>
							<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
								<set_value name="$LocDebugString" exact="'MOD: DAGod EventGodExpandStation Report: %s(%s)'.[$LocStation.knownname,$LocStation.idcode]"/>
							</do_if>
							<!-- Add planned production module macros to all production -->
							<do_all exact="$LocQuota">
								<append_to_list name="$LocNewProductionModules" exact="$LocModule"/>
								<append_to_list name="$LocAllProduction" exact="$LocModule"/>
								<set_value name="$LocOptimalWorkforce" exact="$LocModule.workforce.optimal" operation="add"/>
							</do_all>
							<!-- Go through all currently planned modules to add macros into production and storage. Add optimal workforce numbers. -->
							<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
								<set_value name="$LocDebugString" exact="'\n %s Existing+Planned:'.[$LocAllModules.count]" operation="add"/>
							</do_if>
							<do_if value="$LocAllModules.count" min="1">
								<do_all exact="$LocAllModules.count" counter="$M">
									<do_if value="$LocAllModules.{$M}.macro.isclass.production">
										<append_to_list name="$LocAllProduction" exact="$LocAllModules.{$M}.macro"/>
										<set_value name="$LocOptimalWorkforce" exact="$LocAllModules.{$M}.macro.workforce.optimal" operation="add"/>
									</do_if>
									<do_elseif value="$LocAllModules.{$M}.macro.isclass.storage">
										<append_to_list name="$LocAllStorage" exact="$LocAllModules.{$M}.macro"/>
									</do_elseif>
									<do_elseif value="$LocAllModules.{$M}.macro.isclass.habitation">
										<set_value name="$LocWorkforceCapacity" exact="$LocAllModules.{$M}.macro.workforce.capacity" operation="add"/>
									</do_elseif>
									<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<set_value name="$LocDebugString" exact="' %s,'.[$LocAllModules.{$M}.macro]" operation="add"/>
									</do_if>
								</do_all>
								<!-- Maybe: Docks. Station should already have at least a pier and a s/m dock so adding more isn't necessary. -->
								<!-- Find possible habitation module macros and calculate desired habitation capacity to add -->
								<do_if value="$LocWorkforceCapacity lt $LocOptimalWorkforce">
									<set_value name="$LocHabCapacityNeeded" exact="$LocOptimalWorkforce - $LocWorkforceCapacity"/>
									<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<set_value name="$LocDebugString" exact="'\n Workforce Optimal/Capacity: %s/%s'.[$LocOptimalWorkforce,$LocWorkforceCapacity]" operation="add"/>
									</do_if>
									<get_module_definition macro="$LocViableHabModules" faction="$LocStation.owner" tags="[tag.habitation, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
									<do_if value="$LocViableHabModules.count gt 1">
										<sort_list list="$LocViableHabModules" sortbyvalue="loop.element.workforce.capacity" sortdescending="true"/>
									</do_if>
									<do_for_each name="$LocHab" in="$LocViableHabModules">
										<do_if value="($LocHabCapacityNeeded gt 0) and $LocHab">
											<set_value name="$LocAmountToOrder" exact="[$LocHabCapacityNeeded / $LocHab.workforce.capacity,1].max"/>
											<do_if value="(($LocAmountToOrder * $LocHab.workforce.capacity) lt $LocHabCapacityNeeded) and ((($LocAmountToOrder + 1) * $LocHab.workforce.capacity) ge $LocHabCapacityNeeded)">
												<!-- I want to minimize the number of total modules so there is less likely to be med/small habs now but performance is more important -->
												<set_value name="$LocAmountToOrder" exact="1" operation="add"/>
											</do_if>
											<do_all exact="$LocAmountToOrder">
												<append_to_list name="$LocNewHabitationModules" exact="$LocHab"/>
												<set_value name="$LocHabCapacityNeeded" exact="$LocHab.workforce.capacity" operation="subtract"/>
											</do_all>
											<remove_value name="$LocAmountToOrder"/>
										</do_if>
										<do_elseif value="$LocHabCapacityNeeded le 0">
											<break/>
										</do_elseif>
									</do_for_each>
									<remove_value name="$LocHabCapacityNeeded"/>
									<remove_value name="$LocViableHabModules"/>
								</do_if>
								<!-- Moved storage calculation to after hab calc in case needs are increased -->
								<!-- Find possible storage module macros and calculate desired storage to add -->
								<get_module_definition macro="$LocViableStorageModules" faction="$LocStation.owner" tags="[tag.storage, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
								<get_suitable_storage_modules result="$LocCalcStorageModules" production="$LocAllProduction" storage="$LocAllStorage" macros="$LocViableStorageModules"/>
								<!-- Add desired storage module macros into planned construction and tracking -->
								<do_all exact="$LocCalcStorageModules.count" counter="$S">
									<append_to_list name="$LocNewStorageModules" exact="$LocCalcStorageModules.{$S}"/>
									<append_to_list name="$LocAllStorage" exact="$LocCalcStorageModules.{$S}"/>
								</do_all>
								<!-- START ECO STORAGE LOGIC -->
								<!-- START ECO STORAGE LOGIC -->
								<!-- Include expanded storage logic mimicing eco, will require updating on eco changes -->
								<set_value name="$LocAllStorageProductionModules" exact="[]"/>
								<set_value name="$LocCustomAddedStorage" exact="[]"/>
								<append_to_list name="$LocAllStorageProductionModules" other="$LocAllProduction"/>
								<append_to_list name="$LocAllStorageProductionModules" other="$LocAllStorage"/>
								<!-- $DAPlannedCapacity = Container, Liquid, Solid -->
								<set_value name="$DAPlannedCapacity" exact="[0,0,0]"/>
								<!-- $DAPlannedProduction = Production Modules, Production Volume, Consumption Volume -->
								<set_value name="$DAPlannedProduction" exact="[0,0,0]"/>
								<do_all exact="$LocAllStorageProductionModules.count" counter="$ModuleCounter">
									<do_if value="$LocAllStorageProductionModules.{$ModuleCounter}.isclass.storage">
										<do_if value="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.container" min="1">
											<set_value name="$DAPlannedCapacity.{1}" exact="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.container" operation="add"/>
										</do_if>
										<do_if value="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.liquid" min="1">
											<set_value name="$DAPlannedCapacity.{2}" exact="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.liquid" operation="add"/>
										</do_if>
										<do_if value="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.solid" min="1">
											<set_value name="$DAPlannedCapacity.{3}" exact="$LocAllStorageProductionModules.{$ModuleCounter}.cargo.capacity.solid" operation="add"/>
										</do_if>
									</do_if>
									<do_if value="$LocAllStorageProductionModules.{$ModuleCounter}.isclass.production">
										<set_value name="$DAPlannedProduction.{1}" exact="1" operation="add"/>
										<set_value name="$DAPlannedProduction.{2}" exact="$LocAllStorageProductionModules.{$ModuleCounter}.productionvolume" operation="add"/>
										<set_value name="$DAPlannedProduction.{3}" exact="$LocAllStorageProductionModules.{$ModuleCounter}.consumptionvolume" operation="add"/>
									</do_if>
								</do_all>
								<remove_value name="$LocAllStorageProductionModules"/>
								<set_value name="$DAContainerMods" exact="[]"/>
								<set_value name="$DALiquidMods" exact="[]"/>
								<set_value name="$DASolidMods" exact="[]"/>
								<do_if value="$LocViableStorageModules.count" min="1">
									<do_for_each name="$LocMod" in="$LocViableStorageModules">
										<do_if value="$LocMod.cargo.capacity.container" min="1">
											<do_if value="not $DAContainerMods.indexof.{$LocMod}">
												<append_to_list name="$DAContainerMods" exact="$LocMod"/>
											</do_if>
										</do_if>
										<do_elseif value="$LocMod.cargo.capacity.liquid" min="1">
											<do_if value="not $DALiquidMods.indexof.{$LocMod}">
												<append_to_list name="$DALiquidMods" exact="$LocMod"/>
											</do_if>
										</do_elseif>
										<do_elseif value="$LocMod.cargo.capacity.solid" min="1">
											<do_if value="not $DASolidMods.indexof.{$LocMod}">
												<append_to_list name="$DASolidMods" exact="$LocMod"/>
											</do_if>
										</do_elseif>
									</do_for_each>
								</do_if>
								<!-- Container -->
								<do_if value="($DAPlannedCapacity.{1} gt 0) and ($DAContainerMods.count gt 0)">
									<sort_list list="$DAContainerMods" sortbyvalue="loop.element.cargo.capacity.container" sortdescending="true"/>
									<!-- Container Only = 12 Hours Production storage, 2 Hours Resource storage -->
									<set_value name="$DADesiredStorage" exact="($DAPlannedProduction.{2} * 12) + ($DAPlannedProduction.{3} * 2)"/>
									<do_if value="(($DAPlannedCapacity.{2} gt 0) and ($DALiquidMods.count gt 0)) or (($DAPlannedCapacity.{3} gt 0) and ($DASolidMods.count gt 0))">
										<!-- Not Container Only = 12 Hours Production storage, 2 Hour Resource storage * 0.33 -->
										<set_value name="$DADesiredStorage" exact="($DAPlannedProduction.{2} * 12) + (($DAPlannedProduction.{3} * 2 * 0.33)L)"/>
									</do_if>
									<do_if value="$DAPlannedCapacity.{1} lt $DADesiredStorage">
										<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
											<debug_text text="'MOD: DAGod -- EventGodExpandStation -- Station: %s(%s) in (%s) -- Planned Container: %s -- Desired Container: %s'.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,$DAPlannedCapacity.{1},$DADesiredStorage]" context="false" filter="scripts"/>
										</do_if>
										<do_for_each name="$LocMod" in="$DAContainerMods" counter="$C">
											<set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{1}"/>
											<do_if value="$DACapWanted" min="1">
												<do_if value="($C != $DAContainerMods.count)">
													<set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.container"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.container) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_if>
												<do_elseif value="($C == $DAContainerMods.count)">
													<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container)"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.container) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.container) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_elseif>
											</do_if>
											<do_else>
												<break/>
											</do_else>
										</do_for_each>
										<remove_value name="$DACapWanted"/>
									</do_if>
									<remove_value name="$DADesiredStorage"/>
								</do_if>
								<remove_value name="$DAContainerMods"/>
								<!-- Liquid -->
								<do_if value="($DAPlannedCapacity.{2} gt 0) and ($DALiquidMods.count gt 0)">
									<sort_list list="$DALiquidMods" sortbyvalue="loop.element.cargo.capacity.liquid" sortdescending="true"/>
									<!-- Container already handled above -->
									<!-- Not Container Only = 2 Hour Resource storage * 0.66 -->
									<set_value name="$DADesiredStorage" exact="(($DAPlannedProduction.{3} * 2 * 0.66)L)"/>
									<do_if value="$DAPlannedCapacity.{2} lt $DADesiredStorage">
										<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
											<debug_text text="'MOD: DAGod -- EventGodExpandStation -- Station: %s(%s) in (%s) -- Planned Liquid: %s -- Desired Liquid: %s'.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,$DAPlannedCapacity.{2},$DADesiredStorage]" context="false" filter="scripts"/>
										</do_if>
										<do_for_each name="$LocMod" in="$DALiquidMods" counter="$C">
											<set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{2}"/>
											<do_if value="$DACapWanted" min="1">
												<do_if value="($C != $DALiquidMods.count)">
													<set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.liquid"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.liquid) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_if>
												<do_elseif value="($C == $DALiquidMods.count)">
													<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid)"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.liquid) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.liquid) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_elseif>
											</do_if>
											<do_else>
												<break/>
											</do_else>
										</do_for_each>
										<remove_value name="$DACapWanted"/>
									</do_if>
									<remove_value name="$DADesiredStorage"/>
								</do_if>
								<remove_value name="$DALiquidMods"/>
								<!-- Solid -->
								<do_if value="($DAPlannedCapacity.{3} gt 0) and ($DASolidMods.count gt 0)">
									<sort_list list="$DASolidMods" sortbyvalue="loop.element.cargo.capacity.solid" sortdescending="true"/>
									<!-- Container already handled above -->
									<!-- Not Container Only = 2 Hour Resource storage * 0.66 -->
									<set_value name="$DADesiredStorage" exact="(($DAPlannedProduction.{3} * 2 * 0.66)L)"/>
									<do_if value="$DAPlannedCapacity.{3} lt $DADesiredStorage">
										<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
											<debug_text text="'MOD: DAGod -- EventGodExpandStation -- Station: %s(%s) in (%s) -- Planned Solid: %s -- Desired Solid: %s'.[$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,$DAPlannedCapacity.{3},$DADesiredStorage]" context="false" filter="scripts"/>
										</do_if>
										<do_for_each name="$LocMod" in="$DASolidMods" counter="$C">
											<set_value name="$DACapWanted" exact="$DADesiredStorage - $DAPlannedCapacity.{3}"/>
											<do_if value="$DACapWanted" min="1">
												<do_if value="($C != $DASolidMods.count)">
													<set_value name="$LocWanted" exact="$DACapWanted / $LocMod.cargo.capacity.solid"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.solid) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_if>
												<do_elseif value="($C == $DASolidMods.count)">
													<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid)"/>
													<do_if value="($LocWanted * $LocMod.cargo.capacity.solid) lt $DACapWanted">
														<set_value name="$LocWanted" exact="($DACapWanted / $LocMod.cargo.capacity.solid) + 1"/>
													</do_if>
													<do_if value="$LocWanted" min="1">
														<do_all exact="$LocWanted">
															<append_to_list name="$LocCustomAddedStorage" exact="$LocMod"/>
														</do_all>
													</do_if>
													<remove_value name="$LocWanted"/>
												</do_elseif>
											</do_if>
											<do_else>
												<break/>
											</do_else>
										</do_for_each>
										<remove_value name="$DACapWanted"/>
									</do_if>
									<remove_value name="$DADesiredStorage"/>
								</do_if>
								<remove_value name="$DASolidMods"/>
								<remove_value name="$DAPlannedCapacity"/>
								<remove_value name="$DAPlannedProduction"/>
								<!-- END ECO STORAGE LOGIC -->
								<!-- END ECO STORAGE LOGIC -->
								<do_if value="$LocCustomAddedStorage.count" min="1">
									<!-- Add desired storage module macros into planned construction and tracking -->
									<do_all exact="$LocCustomAddedStorage.count" counter="$S">
										<append_to_list name="$LocNewStorageModules" exact="$LocCustomAddedStorage.{$S}"/>
										<append_to_list name="$LocAllStorage" exact="$LocCustomAddedStorage.{$S}"/>
									</do_all>
								</do_if>
								<remove_value name="$LocCustomAddedStorage"/>
								<!-- Reordering $LocNewModules to: storage, production, hab, dock -->
								<!-- Logic: Storage is needed for both production and hab to function, production is necessary while hab is optional, station already has a dock so expanded capacity is only needed for expanded station -->
								<do_if value="$LocNewStorageModules.count" min="1">
									<append_list_elements name="$LocNewModules" other="$LocNewStorageModules"/>
								</do_if>
								<do_if value="$LocNewProductionModules.count" min="1">
									<append_list_elements name="$LocNewModules" other="$LocNewProductionModules"/>
								</do_if>
								<do_if value="$LocNewHabitationModules.count" min="1">
									<append_list_elements name="$LocNewModules" other="$LocNewHabitationModules"/>
								</do_if>
								<do_if value="$LocNewDockModules.count" min="1">
									<append_list_elements name="$LocNewModules" other="$LocNewDockModules"/>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
									<set_value name="$LocDebugString" exact="'\n %s Added:'.[$LocNewModules.count]" operation="add"/>
									<do_all exact="$LocNewModules.count" counter="$N">
										<set_value name="$LocDebugString" exact="' %s,'.[$LocNewModules.{$N}]" operation="add"/>
									</do_all>
									<debug_text text="$LocDebugString" context="false" filter="scripts"/>
									<remove_value name="$LocDebugString"/>
								</do_if>
								<!-- Find possible connection module macros for construction plan -->
								<get_module_definition macro="$LocConnectionModules" faction="$LocStation.owner" tags="[tag.connection, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
								<do_if value="$LocConnectionModules.count" min="1">
									<do_if value="$LocStation.owner.primaryrace != race.xenon">
										<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules" connectors="$LocConnectionModules" constructionbias="10.0"/>
									</do_if>
									<do_else>
										<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules" connectors="$LocConnectionModules"/>
									</do_else>
								</do_if>
								<do_elseif value="$LocStation">
									<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules"/>
								</do_elseif>
								<do_elseif value="@$LocFaction and @$LocWare and @$LocQuota">
									<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:RECOVERED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="false" filter="scripts"/>
									</do_if>
									<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
									<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_elseif>
								<do_else>
									<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:UNHANDLED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="true" filter="error"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_else>
							</do_if>
							<do_elseif value="@$LocFaction and @$LocWare and @$LocQuota">
								<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
									<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:RECOVERED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="false" filter="scripts"/>
								</do_if>
								<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
								<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
								<cancel_cue cue="EventGodExpandStation"/>
							</do_elseif>
							<do_else>
								<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:UNHANDLED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="true" filter="error"/>
								<cancel_cue cue="EventGodExpandStation"/>
							</do_else>
							<!-- Cleanup -->
							<!--<remove_value name="$LocModule"/>-->
							<!--<remove_value name="$LocNewModules"/>-->
							<remove_value name="$LocNewStorageModules"/>
							<remove_value name="$LocNewProductionModules"/>
							<remove_value name="$LocNewHabitationModules"/>
							<remove_value name="$LocNewDockModules"/>
							<remove_value name="$LocAllModules"/>
							<remove_value name="$LocAllProduction"/>
							<remove_value name="$LocAllStorage"/>
							<remove_value name="$LocViableStorageModules"/>
							<remove_value name="$LocCalcStorageModules"/>
							<remove_value name="$LocConnectionModules"/>
						</do_if>
						<do_elseif value="@$LocFaction and @$LocWare and @$LocQuota">
							<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
								<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:RECOVERED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="false" filter="scripts"/>
							</do_if>
							<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
							<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
							<cancel_cue cue="EventGodExpandStation"/>
						</do_elseif>
						<do_else>
							<debug_text text="'MOD: DAGod -- EventGodExpandStation -- ERROR:UNHANDLED -- $LocStation: %s(%s) -- $LocQuota: %s -- $LocModule: %s -- $LocFaction: %s -- $LocWare: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocQuota,@$LocModule,@$LocFaction,@$LocWare]" context="true" filter="error"/>
							<cancel_cue cue="EventGodExpandStation"/>
						</do_else>
					</actions>
					<cues>
						<cue name="GodExpandStationPlanCreated">
							<conditions>
								<event_object_construction_sequence_created object="$LocStation"/>
							</conditions>
							<actions>
								<do_if value="$LocStation? and @$LocStation and $LocStation.buildstorage? and @$LocStation.buildstorage">
									<add_build_to_expand_station result="$LocBuildTask" buildobject="$LocStation" object="$LocStation.buildstorage" constructionplan="event.param"/>
									<do_if value="not md.$DADynamicVarTable.$DAGodStationsExpanded.{$LocFaction}?">
										<set_value name="md.$DADynamicVarTable.$DAGodStationsExpanded.{$LocFaction}" exact="1"/>
									</do_if>
									<do_else>
										<set_value name="md.$DADynamicVarTable.$DAGodStationsExpanded.{$LocFaction}" exact="1" operation="add"/>
									</do_else>
									<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- GodExpandStationPlanCreated -- God upgrade started -- Faction: %s -- Ware: %s -- Station: %s(%s) - Sector: %s'.[$LocFaction.id,$LocWare.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" context="false" filter="scripts"/>
									</do_if>
									<!-- 20240917 DA News -->
									<do_if value="@md.$DADynamicVarTable.$DADynamicNewsEnable and ((not @md.$DADynamicVarTable.$DADynamicNewsKnownFactionsOnly) or ($LocFaction.knowntoplayer))">
										<signal_cue_instantly cue="md.DeadAirDynamicUniverse.EventDynamicNewsStationExpanded" param="[$LocStation,$LocNewModules,$LocModule]"/>
									</do_if>
									<!-- 20240328 Updated to handle recovery -->
									<signal_cue_instantly cue="EventGodStationWatcher" param="[$LocStation,$LocFaction,$LocWare,$LocQuota]"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_if>
								<do_elseif value="@$LocFaction and @$LocWare and @$LocQuota">
									<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- GodExpandStationPlanCreated -- ERROR:RECOVERED -- %s(%s) or buildstorage problem -- BuildStorage: %s -- Faction: %s -- Ware: %s -- Quota: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocStation.buildstorage.isfunctional,@$LocFaction,@$LocWare,@$LocQuota]" context="false" filter="scripts"/>
									</do_if>
									<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
									<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_elseif>
								<do_else>
									<debug_text text="'MOD: DAGod -- GodExpandStationPlanCreated -- ERROR:UNHANDLED -- %s(%s) or buildstorage problem -- BuildStorage: %s -- Faction: %s -- Ware: %s -- Quota: %s'.[@$LocStation.knownname,@$LocStation.idcode,@$LocStation.buildstorage.isfunctional,@$LocFaction,@$LocWare,@$LocQuota]" context="true" filter="error"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_else>
							</actions>
						</cue>
						<cue name="GodExpandStationDestroyed">
							<conditions>
								<check_any>
									<event_object_destroyed object="$LocStation"/>
									<event_object_destroyed object="$LocStation.buildstorage"/>
								</check_any>
							</conditions>
							<actions>
								<do_if value="@$LocFaction and @$LocWare and @$LocQuota">
									<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
									<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
									<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
										<debug_text text="'MOD: DAGod -- GodExpandStationDestroyed -- Recovered from station or buildstorage destroyed -- Faction: %s -- Ware: %s -- Quota: %s -- Destroyed Object: %s(%s) in %s'.[@$LocFaction,@$LocWare,@$LocQuota,@event.object.knownname,@event.object.idcode,@event.object.sector.knownname]" context="false" filter="scripts"/>
									</do_if>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAGod -- GodExpandStationDestroyed -- ERROR:UNHANDLED -- Unable to recover from station or buildstorage destruction -- Faction: %s -- Ware: %s -- Quota: %s -- Destroyed Object: %s(%s) in %s'.[@$LocFaction,@$LocWare,@$LocQuota,@event.object.knownname,@event.object.idcode,@event.object.sector.knownname]" context="true" filter="error"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_else>
							</actions>
						</cue>
						<cue name="GodExpandStationGameLoaded">
							<conditions>
								<event_game_loaded/>
							</conditions>
							<actions>
								<set_value name="$LocFailed" exact="false"/>
								<do_if value="$LocStation? and $LocStation">
									<do_if value="$LocStation.buildstorage? and $LocStation.buildstorage">
										<do_if value="$LocStation.hasplannedconstruction or $LocStation.buildstorage.hasplannedconstruction">
											<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
												<debug_text text="'MOD: DAGod -- GodExpandStationGameLoaded -- Verified that cue succeeded -- Faction: %s -- Station: %s(%s) - Sector: %s'.[$LocStation.trueowner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_else>
											<set_value name="$LocFailed" exact="true"/>
										</do_else>
									</do_if>
									<do_else>
										<set_value name="$LocFailed" exact="true"/>
									</do_else>
								</do_if>
								<do_else>
									<set_value name="$LocFailed" exact="true"/>
								</do_else>
								<do_if value="$LocFailed and @$LocFaction and @$LocWare and @$LocQuota">
									<set_value name="$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
									<signal_cue_instantly cue="EventGodDesignStation" param="[$LocFaction,$LocWare,$LocDelay,$LocQuota]"/>
									<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
										<debug_text text="'MOD: DAGod -- GodExpandStationDestroyed -- ERROR:RECOVERED -- Recovered from problem with loading -- Faction: %s -- Ware: %s -- Quota: %s'.[$LocFaction,$LocWare,$LocQuota]" context="false" filter="scripts"/>
									</do_if>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_if>
								<do_elseif value="$LocFailed">
									<debug_text text="'MOD: DAGod -- GodExpandStationGameLoaded -- ERROR:UNHANDLED -- Faction: %s -- Station: %s(%s) -- Sector: %s -- Ware: %s -- Quota: %s'.[@$LocStation.trueowner.id,@$LocStation.knownname,@$LocStation.idcode,@$LocStation.sector.knownname,@$LocWare,@$LocQuota]" context="true" filter="error"/>
									<cancel_cue cue="EventGodExpandStation"/>
								</do_elseif>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventGodStationWatcher" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$Station,$DAGodFaction,$DAGodWare,$Quota] -->
						<!-- 20240328 Update to handle list or old for midgame upgrades -->
						<do_if value="typeof event.param == datatype.list">
							<set_value name="this.$DAGodLocStation" exact="event.param.{1}"/>
							<set_value name="this.$DAGodFaction" exact="event.param.{2}"/>
							<set_value name="this.$DAGodWare" exact="event.param.{3}"/>
							<set_value name="this.$DAGodQuota" exact="event.param.{4}"/>
						</do_if>
						<do_else>
							<set_value name="this.$DAGodLocStation" exact="event.param"/>
						</do_else>
					</actions>
					<cues>
						<cue name="GodFactoryDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$DAGodLocStation"/>
							</conditions>
							<actions>
								<!-- 20240328 Signal to request again. Adjust param sent to EventGodStationWatcher to include module count for easy repeat. -->
								<!-- EventGodDesignStation param = [$DAGodFaction,$DAGodWare,$DAGodDelay,null/quota] -->
								<!-- 20240403 Can't add backwards compatibility since ware and quota are impossible to reliably get from just the station -->
								<do_if value="parent.$DAGodFaction? and parent.$DAGodWare? and parent.$DAGodQuota?">
									<set_value name="this.$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
									<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
										<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryDestroyed -- %s(%s) destroyed, Ordering again -- Faction: %s -- Ware: %s -- Quota: %s -- Delay: %s'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode,parent.$DAGodFaction,parent.$DAGodWare,parent.$DAGodQuota,this.$LocDelay]" context="false" filter="scripts"/>
									</do_if>
									<signal_cue_instantly cue="EventGodDesignStation" param="[parent.$DAGodFaction,parent.$DAGodWare,this.$LocDelay,parent.$DAGodQuota]"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryDestroyed -- ERROR:UNHANDLED -- %s(%s) destroyed, Unable to order -- Faction: %s -- Ware: %s -- Quota: %s'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode,@parent.$DAGodFaction,@parent.$DAGodWare,@parent.$DAGodQuota]" context="true" filter="error"/>
								</do_else>
								<cancel_cue cue="EventGodStationWatcher"/>
							</actions>
						</cue>
						<cue name="GodFactoryFinished">
							<conditions>
								<event_build_finished object="parent.$DAGodLocStation.buildstorage"/>
							</conditions>
							<actions>
								<!-- This triggers on first module completion -->
								<!-- 20240328 Track completed stations in group+table -->
								<do_if value="not md.$DADynamicVarTable.$DAGodStationsFinished.{parent.$DAGodLocStation.owner}?">
									<set_value name="md.$DADynamicVarTable.$DAGodStationsFinished.{parent.$DAGodLocStation.owner}" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="md.$DADynamicVarTable.$DAGodStationsFinished.{parent.$DAGodLocStation.owner}" exact="1" operation="add"/>
								</do_else>
								<!-- 20240403 Can't add backwards compatibility since ware and quota are impossible to reliably get from just the station -->
								<do_if value="parent.$DAGodFaction? and parent.$DAGodWare? and parent.$DAGodQuota?">
									<do_if value="not md.$DADynamicVarTable.$DAGodTrackedStations.indexof.{parent.$DAGodLocStation}">
										<add_to_group groupname="md.$DADynamicVarTable.$DAGodTrackedStations" object="parent.$DAGodLocStation"/>
									</do_if>
									<do_elseif value="md.$DADynamicVarTable.$DAGodTrackedStations.indexof.{parent.$DAGodLocStation}">
										<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
											<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryFinished -- %s(%s) Finished and ALREADY IN GROUP -- This Ware: %s -- Previous Ware: %s -- This Quota: %s -- Previous Quota: %s'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode,@parent.$DAGodWare,@md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}.{2},@parent.$DAGodQuota,@md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}.{3}]" context="false" filter="scripts"/>
										</do_if>
									</do_elseif>
									<do_if value="not md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}?">
										<set_value name="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}" exact="[parent.$DAGodFaction,parent.$DAGodWare,parent.$DAGodQuota]"/>
									</do_if>
									<do_elseif value="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}?">
										<do_if value="parent.$DAGodWare == md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}.{2}">
											<set_value name="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}.{3}" exact="parent.$DAGodQuota" operation="add"/>
											<do_if value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
												<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryFinished -- %s(%s) Finished and ALREADY IN TABLE -- Same Ware = HANDLED'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_else>
											<!-- 20240922 TODO Not sure how to handle -->
											<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryFinished -- ERROR:UNHANDLED -- %s(%s) Finished and ALREADY IN TABLE -- DIFFERENT Ware = UNHANDLED -- Current Ware: %s -- Tracked Ware: %s'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode,parent.$DAGodWare,md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}.{2}]" context="true" filter="error"/>
										</do_else>
									</do_elseif>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
									<debug_text text="'MOD: DAGod -- EventGodStationWatcher.GodFactoryFinished -- %s(%s) Finished -- Faction: %s -- Ware: %s -- Quota: %s -- InTrackingGroup: %s -- InTrackingTable: %s'.[parent.$DAGodLocStation.knownname,parent.$DAGodLocStation.idcode,@parent.$DAGodFaction,@parent.$DAGodWare,@parent.$DAGodQuota,md.$DADynamicVarTable.$DAGodTrackedStations.indexof.{parent.$DAGodLocStation},md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{parent.$DAGodLocStation}?]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventGodStationWatcher"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- EventGodStationWatcher.GodFactoryDestroyed should handle stations destroyed before finishing and EventGodStationDestroyed should handle stations destroyed after finishing -->
				<cue name="EventGodStationDestroyed" instantiate="true" namespace="this">
					<conditions>
						<event_object_destroyed group="md.$DADynamicVarTable.$DAGodTrackedStations"/>
						<check_value value="md.$DADynamicVarTable.$DAGodAttemptRecovery"/>
					</conditions>
					<actions>
						<set_value name="this.$LocStation" exact="event.object"/>
						<do_if value="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{this.$LocStation}?">
							<set_value name="this.$LocFaction" exact="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{$LocStation}.{1}"/>
							<set_value name="this.$LocWare" exact="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{$LocStation}.{2}"/>
							<set_value name="this.$LocQuota" exact="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{$LocStation}.{3}"/>
							<do_if value="(typeof this.$LocFaction == datatype.faction) and (typeof this.$LocWare == datatype.ware) and this.$LocQuota">
								<set_value name="this.$LocDelay" min="1500s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s" max="1800s * (md.$DADynamicVarTable.$DAGodStationRequestInterval)s"/>
								<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
									<debug_text text="'MOD: DAGod -- EventGodStationDestroyed -- %s(%s) destroyed, Ordering again -- Faction: %s -- Ware: %s -- Quota: %s -- Delay: %s'.[this.$LocStation.knownname,this.$LocStation.idcode,this.$LocFaction,this.$LocWare,this.$LocQuota,this.$LocDelay]" context="false" filter="scripts"/>
								</do_if>
								<signal_cue_instantly cue="EventGodDesignStation" param="[this.$LocFaction,this.$LocWare,this.$LocDelay,this.$LocQuota]"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DAGod -- EventGodStationDestroyed -- ERROR:UNHANDLED -- %s(%s) Incorrect datatype -- Faction: %s -- Ware: %s -- Quota: %s'.[this.$LocStation.knownname,this.$LocStation.idcode,(typeof this.$LocFaction == datatype.faction),(typeof this.$LocWare == datatype.ware),this.$LocQuota]" context="true" filter="error"/>
							</do_else>
							<remove_from_group group="md.$DADynamicVarTable.$DAGodTrackedStations" object="this.$LocStation"/>
							<remove_value name="md.$DADynamicVarTable.$DAGodTrackedStationsInfo.{this.$LocStation}"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAGod -- EventGodStationDestroyed -- ERROR:UNHANDLED -- Tracked Station Info Missing: %s(%s) in %s'.[this.$LocStation.knownname,this.$LocStation.idcode,this.$LocStation.sector.knownname]" context="true" filter="error"/>
						</do_else>
					</actions>
				</cue>
				<cue name="EventGodSpreadKeyStationChecks" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<create_group groupname="$LocStationList"/>
						<add_to_group groupname="$LocStationList" group="event.param"/>
					</actions>
					<cues>
						<cue name="GodProcessStationsLoop">
							<delay exact="5s"/>
							<actions>
								<do_if value="$LocStationList.count" min="1">
									<set_value name="$LocStation" exact="$LocStationList.{1}"/>
									<signal_cue_instantly cue="EventGodCheckKeyStation" param="$LocStation"/>
									<remove_from_group group="$LocStationList" object="$LocStation"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<remove_value name="$LocStation"/>
									<remove_value name="$LocStationList"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventGodCheckKeyStation" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<set_value name="$LocStation" exact="event.param"/>
						<set_value name="$LocOwner" exact="$LocStation.trueowner"/>
						<do_if value="$LocStation.exists and $LocStation.hasstorage and (not md.$DADynamicVarTable.$DAGodStationsUpgraded.indexof.{$LocStation})">
							<do_if value="$LocStation.cargo.free.all le ($LocStation.cargo.capacity.all * 0.25)">
								<set_value name="$LocSuccess" exact="false"/>
								<get_module_definition macro="$ViableStorageModules" faction="$LocOwner" tags="[tag.storage, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
								<do_if value="$ViableStorageModules.count" min="1">
									<sort_list list="$ViableStorageModules" sortbyvalue="loop.element.cargo.capacity.container" sortdescending="true"/>
									<set_value name="$SelectedStorageModule" exact="$ViableStorageModules.{1}"/>
								</do_if>
								<remove_value name="$ViableStorageModules"/>
								<get_module_definition macro="$ViableAdditionalPierModules" faction="$LocOwner" tags="[tag.pier, tag.add, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
								<do_if value="$ViableAdditionalPierModules.count" min="1">
									<sort_list list="$ViableAdditionalPierModules" sortbyvalue="loop.element.numpierdocks" sortdescending="true"/>
									<set_value name="$SelectedPierModule" exact="$ViableAdditionalPierModules.{1}"/>
								</do_if>
								<remove_value name="$ViableAdditionalPierModules"/>
								<do_if value="$LocStation.isshipyard">
									<get_module_definition macro="$ViableBuildModules" faction="$LocOwner" tags="[tag.build, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
									<do_if value="$ViableBuildModules.count" min="1">
										<do_if value="$LocStation.buildmodules.count" min="1">
											<do_for_each name="$LocBuildModule" in="$LocStation.buildmodules">
												<do_if value="$LocBuildModule.canbuildclass.{class.ship_l}">
													<set_value name="$SelectedBuildModule" exact="$LocBuildModule.macro"/>
												</do_if>
												<do_elseif value="$LocBuildModule.canbuildclass.{class.ship_xl}">
													<!-- Maybe in the future -->
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="(not ($SelectedBuildModule? and $SelectedBuildModule)) and md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">">
											<debug_text text="'MOD: DAGod -- EventGodCheckKeyStation -- Shipyard without valid buildmodule -- Faction: %s -- Station: %s(%s) -- Sector: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<remove_value name="$ViableBuildModules"/>
									<!-- 20240724 Suppress invalid -->
									<do_if value="@$SelectedStorageModule and @$SelectedPierModule and @$SelectedBuildModule">
										<set_value name="$LocSuccess" exact="true"/>
										<set_value name="$LocNewModules" exact="[]"/>
										<do_all exact="2">
											<append_to_list name="$LocNewModules" exact="$SelectedPierModule"/>
											<append_to_list name="$LocNewModules" exact="$SelectedStorageModule"/>
											<append_to_list name="$LocNewModules" exact="$SelectedBuildModule"/>
										</do_all>
									</do_if>
									<do_elseif value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- EventGodCheckKeyStation -- Shipyard without all modules -- Faction: %s -- Station: %s(%s) -- Sector: %s -- $SelectedStorageModule: %s -- $SelectedPierModule: %s -- $SelectedBuildModule: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,@$SelectedStorageModule,@$SelectedPierModule,@$SelectedBuildModule]" context="false" filter="scripts"/>
									</do_elseif>
								</do_if>
								<do_elseif value="$LocStation.iswharf">
									<do_if value="@$SelectedStorageModule and @$SelectedPierModule">
										<set_value name="$LocSuccess" exact="true"/>
										<set_value name="$LocNewModules" exact="[]"/>
										<do_all exact="2">
											<append_to_list name="$LocNewModules" exact="$SelectedPierModule"/>
											<append_to_list name="$LocNewModules" exact="$SelectedStorageModule"/>
										</do_all>
									</do_if>
									<do_elseif value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- EventGodCheckKeyStation -- Wharf without all modules -- Faction: %s -- Station: %s(%s) -- Sector: %s -- $SelectedStorageModule: %s -- $SelectedPierModule: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,@$SelectedStorageModule,@$SelectedPierModule]" context="false" filter="scripts"/>
									</do_elseif>
								</do_elseif>
								<do_elseif value="$LocStation.isequipmentdock">
									<do_if value="@$SelectedStorageModule">
										<set_value name="$LocSuccess" exact="true"/>
										<set_value name="$LocNewModules" exact="[]"/>
										<do_all exact="2">
											<append_to_list name="$LocNewModules" exact="$SelectedStorageModule"/>
										</do_all>
									</do_if>
									<do_elseif value="md.$DADynamicVarTable.$DAGodXtremelyDetailedDebug">
										<debug_text text="'MOD: DAGod -- EventGodCheckKeyStation -- EQDock without all modules -- Faction: %s -- Station: %s(%s) -- Sector: %s -- $SelectedStorageModule: %s -- $SelectedPierModule: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname,@$SelectedStorageModule,@$SelectedPierModule]" context="false" filter="scripts"/>
									</do_elseif>
								</do_elseif>
								<do_if value="$LocSuccess and $LocNewModules? and $LocNewModules.count">
									<!-- Find possible connection module macros for construction plan -->
									<get_module_definition macro="$LocConnectionModules" faction="$LocOwner" tags="[tag.connection, tag.module]" set="$LocStation.modulesets.{1}" multiple="true"/>
									<do_if value="$LocConnectionModules.count" min="1">
										<do_if value="$LocStation.owner.primaryrace != race.xenon">
											<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules" connectors="$LocConnectionModules" constructionbias="10.0"/>
										</do_if>
										<do_else>
											<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules" connectors="$LocConnectionModules"/>
										</do_else>
									</do_if>
									<do_else>
										<create_construction_sequence station="$LocStation" base="$LocStation.plannedconstruction.sequence" macros="$LocNewModules"/>
									</do_else>
								</do_if>
								<do_else>
									<cancel_cue cue="EventGodCheckKeyStation"/>
								</do_else>
							</do_if>
							<do_else>
								<cancel_cue cue="EventGodCheckKeyStation"/>
							</do_else>
						</do_if>
						<do_else>
							<cancel_cue cue="EventGodCheckKeyStation"/>
						</do_else>
					</actions>
					<cues>
						<cue name="GodUpgradeKeyStationPlanCreated">
							<conditions>
								<event_object_construction_sequence_created object="$LocStation"/>
							</conditions>
							<actions>
								<do_if value="$LocStation? and @$LocStation and $LocStation.buildstorage? and @$LocStation.buildstorage">
									<add_build_to_expand_station result="$BuildTask" buildobject="$LocStation" object="$LocStation.buildstorage" constructionplan="event.param"/>
									<add_to_group groupname="md.$DADynamicVarTable.$DAGodStationsUpgraded" object="$LocStation"/>
									<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
										<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationPlanCreated -- Upgrading key station -- Faction: %s -- Station: %s(%s) - Sector: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" context="false" filter="scripts"/>
									</do_if>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationPlanCreated -- ERROR:UNHANDLED -- Problem with station or build storage -- Faction: %s -- Station: %s(%s) -- BuildStorage: %s -- Sector: %s'.[@$LocOwner.id,@$LocStation.knownname,@$LocStation.idcode,@$LocStation.buildstorage.isfunctional,@$LocStation.sector.knownname]" context="true" filter="error"/>
								</do_else>
								<cancel_cue cue="EventGodCheckKeyStation"/>
							</actions>
						</cue>
						<cue name="GodUpgradeKeyStationDestroyed">
							<conditions>
								<check_any>
									<event_object_destroyed object="$LocStation"/>
									<event_object_destroyed object="$LocStation.buildstorage"/>
								</check_any>
							</conditions>
							<actions>
								<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
									<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationDestroyed -- Station or buildstorage destroyed -- Faction: %s -- Station: %s(%s) - Sector: %s'.[@$LocOwner.id,@event.object.knownname,@event.object.idcode,@event.object.sector.knownname]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventGodCheckKeyStation"/>
							</actions>
						</cue>
						<cue name="GodUpgradeKeyStationGameLoaded">
							<conditions>
								<event_game_loaded/>
							</conditions>
							<actions>
								<do_if value="$LocStation? and $LocStation">
									<do_if value="$LocStation.buildstorage? and $LocStation.buildstorage">
										<do_if value="$LocStation.hasplannedconstruction or $LocStation.buildstorage.hasplannedconstruction">
											<do_if value="md.$DADynamicVarTable.$DAGodDetailedDebug">
												<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationGameLoaded -- Verified that cue succeeded -- Faction: %s -- Station: %s(%s) - Sector: %s'.[$LocOwner.id,$LocStation.knownname,$LocStation.idcode,$LocStation.sector.knownname]" context="false" filter="scripts"/>
											</do_if>
										</do_if>
										<do_else>
											<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationGameLoaded -- ERROR:UNHANDLED -- No Planned Construction after loading -- Faction: %s -- Station: %s(%s) - Sector: %s'.[@$LocOwner.id,@$LocStation.knownname,@$LocStation.idcode,@$LocStation.sector.knownname]" context="false" filter="error"/>
											<cancel_cue cue="EventGodCheckKeyStation"/>
										</do_else>
									</do_if>
									<do_else>
										<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationGameLoaded -- ERROR:UNHANDLED -- Station has no buildstorage -- Faction: %s -- Station: %s(%s) - Sector: %s'.[@$LocOwner.id,@$LocStation.knownname,@$LocStation.idcode,@$LocStation.sector.knownname]" context="false" filter="error"/>
										<cancel_cue cue="EventGodCheckKeyStation"/>
									</do_else>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAGod -- GodUpgradeKeyStationGameLoaded -- ERROR:UNHANDLED -- Station was destroyed/lost -- Faction: %s'.[@$LocOwner.id]" context="false" filter="error"/>
									<cancel_cue cue="EventGodCheckKeyStation"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- God // Functional Libraries -->
				<library name="LibraryGodGetFactions">
					<actions>
						<!-- Use $DADVT.$DAGodExcludedFactions -->
						<get_factions_by_tag tag="tag.claimspace" result="$DAGodLocClaimspaceList"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DAGodLocPeacefulList"/>
						<get_factions_by_tag tag="tag.visitor" result="$DAGodLocVisitorList"/>
						<get_factions_by_tag tag="tag.hidden" result="$DAGodLocHiddenList"/>
						<set_value name="$DAGodLocFactionList" exact="[]"/>
						<remove_from_list name="$DAGodLocClaimspaceList" list="$DAGodLocPeacefulList" multiple="true"/>
						<remove_from_list name="$DAGodLocClaimspaceList" list="$DAGodLocVisitorList" multiple="true"/>
						<remove_from_list name="$DAGodLocClaimspaceList" list="$DAGodLocHiddenList" multiple="true"/>
						<remove_from_list name="$DAGodLocClaimspaceList" list="$DADVT.$DAGodExcludedFactions" multiple="true"/>
						<append_list_elements name="$DAGodLocFactionList" other="$DAGodLocClaimspaceList"/>
						<set_value name="$LocGodDebugString" exact="'MOD: DAGod -- Supported Factions Report\n'"/>
						<do_for_each name="$DAGodLocFaction" in="$DAGodLocFactionList">
							<do_if value="not $DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}?">
								<set_value name="$DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}" exact="table[]"/>
								<set_value name="$DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.$Enabled" exact="false"/>
								<set_value name="$LocGodDebugString" exact="'%s,'.[$DAGodLocFaction.id]" operation="add"/>
							</do_if>
						</do_for_each>
						<do_if value="$DADVT.$DAGodDetailedDebug or @$LocDebug">
							<debug_text text="$LocGodDebugString" context="false" filter="scripts"/>
						</do_if>
						<remove_value name="$LocGodDebugString"/>
						<!-- Cleanup -->
						<remove_value name="$DAGodLocClaimspaceList"/>
						<remove_value name="$DAGodLocPeacefulList"/>
						<remove_value name="$DAGodLocVisitorList"/>
						<remove_value name="$DAGodLocHiddenList"/>
						<remove_value name="$DAGodLocFactionList"/>
					</actions>
				</library>
				<library name="LibraryGodSetDefaultQuota">
					<actions>
						<!-- Use $DADVT.$DAGodDefaultModuleQuotas -->
						<!-- Vanilla Wares -->
						<set_value name="$DADVT.$DAGodDefaultModuleQuotas" exact="table[{ware.advancedcomposites} = 2, {ware.advancedelectronics} = 10, {ware.antimattercells} = 3, {ware.antimatterconverters} = 6,
							{ware.claytronics} = 20, {ware.dronecomponents} = 5, {ware.energycells} = 10, {ware.engineparts} = 11, {ware.fieldcoils} = 3, {ware.graphene} = 10, {ware.hullparts} = 30, {ware.microchips} = 17,
							{ware.missilecomponents} = 14, {ware.plasmaconductors} = 13, {ware.quantumtubes} = 17, {ware.refinedmetals} = 21, {ware.teladianium} = 23, {ware.scanningarrays} = 10, {ware.shieldcomponents} = 9,
							{ware.siliconwafers} = 15, {ware.smartchips} = 25, {ware.superfluidcoolant} = 8, {ware.turretcomponents} = 5, {ware.water} = 4, {ware.weaponcomponents} = 9,
							{ware.foodrations} = 15, {ware.sojahusk} = 28, {ware.nostropoil} = 14,
							{ware.meat} = 4, {ware.wheat} = 4, {ware.majasnails} = 8, {ware.sojabeans} = 15, {ware.sunriseflowers} = 11, {ware.swampplant} = 0, {ware.medicalsupplies} = 21, {ware.spices} = 5,
							{ware.spacefuel} = 0, {ware.majadust} = 0, {ware.spaceweed} = 0]"/>
						<!-- Split -->
						<do_if value="faction.split?">
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.cheltmeat}" exact="37"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.scruffinfruits}" exact="16"/>
						</do_if>
						<do_if value="faction.terran?">
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.computronicsubstrate}" exact="15"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.metallicmicrolattice}" exact="31"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.proteinpaste}" exact="3"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.siliconcarbide}" exact="17"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.terranmre}" exact="14"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.stimulants}" exact="0"/>
						</do_if>
						<do_if value="faction.boron?">
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.bofu}" exact="23"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.bogas}" exact="3"/>
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.plankton}" exact="13"/>
						</do_if>
						<do_if value="true" comment="EasyDiffAddMarker">
							<!-- Example code for diff add to change value
								<set_value name="$DADVT.$DAGodDefaultModuleQuotas.{ware.advancedcomposites}" exact="4"/>
							-->
						</do_if>
					</actions>
				</library>
				<library name="LibraryGodGetWares">
					<actions>
						<!-- Use $DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction} -->
						<!-- DONE: Rework to handle factions that aren't currently active...how -->
						<!-- DONE: Fix teladi getting refined metals... egosoft has entries for teladi race factions in modules.xml for refinedmetals even though they don't use it. Diff'd -->
						<do_if value="$DADVT.$DAGodFactionModuleQuotas.keys.list.count" min="1">
							<set_value name="$DAGodLocFactionsList" exact="[]"/>
							<append_list_elements name="$DAGodLocFactionsList" other="$DADVT.$DAGodFactionModuleQuotas.keys.list"/>
							<sort_list list="$DAGodLocFactionsList" sortbyvalue="loop.element.id"/>
							<do_for_each name="$DAGodLocFaction" in="$DAGodLocFactionsList">
								<set_value name="$LocGodDebugString" exact="'MOD: DAGod // Station Quota Report // %s Ware/Quota: '.[$DAGodLocFaction.id]"/>
								<!-- DONE: Fixed my factions not working with race+faction with modules.xml changes -->
								<get_ware_definition result="$DAGodLocWares" faction="$DAGodLocFaction" flags="economy" tags="tag.container"/>
								<do_if value="$DAGodLocWares.count" min="1">
									<sort_list list="$DAGodLocWares" sortbyvalue="loop.element.id"/>
									<do_for_each name="$DAGodLocWare" in="$DAGodLocWares">
										<do_if value="$DADVT.$DAGodDefaultModuleQuotas.keys.list.indexof.{$DAGodLocWare} and (not $DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}?)">
											<get_module_definition macro="$DAGodLocModuleMacro" tags="[tag.production, tag.module]" faction="$DAGodLocFaction" race="$DAGodLocFaction.primaryrace" ware="$DAGodLocWare"/>
											<do_if value="$DAGodLocModuleMacro">
												<set_value name="$DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}" exact="[$DAGodLocModuleMacro,$DADVT.$DAGodDefaultModuleQuotas.{$DAGodLocWare}]"/>
												<set_value name="$LocGodDebugString" exact="'%s/%s/%s, '.[$DAGodLocWare.id,$DAGodLocModuleMacro,$DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}.{2}]" operation="add"/>
											</do_if>
											<do_else>
												<set_value name="$LocGodDebugString" exact="'%s/NULL/%s, '.[$DAGodLocWare.id,@$DADVT.$DAGodFactionModuleQuotas.{$DAGodLocFaction}.{$DAGodLocWare}.{2}]" operation="add"/>
											</do_else>
											<remove_value name="$DAGodLocModuleMacro"/>
										</do_if>
									</do_for_each>
								</do_if>
								<do_if value="$DADVT.$DAGodDetailedDebug or @$LocDebug">
									<debug_text text="$LocGodDebugString" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="$LocGodDebugString"/>
								<remove_value name="$DAGodLocWares"/>
							</do_for_each>
							<remove_value name="$DAGodLocFactionsList"/>
						</do_if>
						<do_else>
							<!-- ERROR -->
						</do_else>
					</actions>
				</library>
				<library name="LibraryGodFactionOverrides">
					<actions>
						<!-- 20240424 Adjusting numbers based on tracked shipyard/wharf usage of wares -->
						<do_if value="not $DADVT.$DAGodFactionsTriggered.indexof.{faction.paranid}">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.advancedelectronics}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.antimattercells}.{2}" exact="2"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.antimatterconverters}.{2}" exact="9"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.claytronics}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.dronecomponents}.{2}" exact="4"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.energycells}.{2}" exact="17"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.engineparts}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.graphene}.{2}" exact="9"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.hullparts}.{2}" exact="29"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.majasnails}.{2}" exact="8"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.medicalsupplies}.{2}" exact="26"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.microchips}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.missilecomponents}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.quantumtubes}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.refinedmetals}.{2}" exact="20"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.scanningarrays}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.shieldcomponents}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.sojabeans}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.sojahusk}.{2}" exact="28"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.spices}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.water}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.paranid}.{ware.weaponcomponents}.{2}" exact="11"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodFactionsTriggered.indexof.{faction.holyorder}">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.antimattercells}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.antimatterconverters}.{2}" exact="8"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.claytronics}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.dronecomponents}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.energycells}.{2}" exact="13"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.engineparts}.{2}" exact="14"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.fieldcoils}.{2}" exact="2"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.graphene}.{2}" exact="14"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.hullparts}.{2}" exact="29"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.majasnails}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.medicalsupplies}.{2}" exact="41"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.microchips}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.missilecomponents}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.plasmaconductors}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.refinedmetals}.{2}" exact="23"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.scanningarrays}.{2}" exact="8"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.shieldcomponents}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.siliconwafers}.{2}" exact="23"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.smartchips}.{2}" exact="27"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.sojabeans}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.sojahusk}.{2}" exact="25"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.spices}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.superfluidcoolant}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.water}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.holyorder}.{ware.weaponcomponents}.{2}" exact="10"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodFactionsTriggered.indexof.{faction.teladi}">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.advancedcomposites}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.advancedelectronics}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.antimattercells}.{2}" exact="5"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.antimatterconverters}.{2}" exact="10"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.claytronics}.{2}" exact="12"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.energycells}.{2}" exact="20"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.engineparts}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.fieldcoils}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.graphene}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.hullparts}.{2}" exact="34"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.medicalsupplies}.{2}" exact="42"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.microchips}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.missilecomponents}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.nostropoil}.{2}" exact="14"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.plasmaconductors}.{2}" exact="26"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.quantumtubes}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.scanningarrays}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.shieldcomponents}.{2}" exact="20"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.siliconwafers}.{2}" exact="24"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.smartchips}.{2}" exact="31"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.spices}.{2}" exact="12"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.sunriseflowers}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.superfluidcoolant}.{2}" exact="16"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.teladianium}.{2}" exact="23"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.turretcomponents}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.water}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.teladi}.{ware.weaponcomponents}.{2}" exact="15"/>
						</do_if>
						<do_if value="faction.split? and (not $DADVT.$DAGodFactionsTriggered.indexof.{faction.split})">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.advancedcomposites}.{2}" exact="1"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.advancedelectronics}.{2}" exact="5"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.antimattercells}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.antimatterconverters}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.claytronics}.{2}" exact="25"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.dronecomponents}.{2}" exact="2"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.engineparts}.{2}" exact="17"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.fieldcoils}.{2}" exact="0"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.graphene}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.hullparts}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.medicalsupplies}.{2}" exact="29"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.microchips}.{2}" exact="20"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.missilecomponents}.{2}" exact="0"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.plasmaconductors}.{2}" exact="9"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.quantumtubes}.{2}" exact="20"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.refinedmetals}.{2}" exact="17"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.scanningarrays}.{2}" exact="4"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.shieldcomponents}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.siliconwafers}.{2}" exact="19"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.smartchips}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.spices}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.superfluidcoolant}.{2}" exact="9"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.turretcomponents}.{2}" exact="2"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.water}.{2}" exact="14"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.weaponcomponents}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.cheltmeat}.{2}" exact="37"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.split}.{ware.scruffinfruits}.{2}" exact="16"/>
						</do_if>
						<do_if value="faction.terran? and (not $DADVT.$DAGodFactionsTriggered.indexof.{faction.terran})">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.terran}.{ware.energycells}.{2}" exact="64"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.terran}.{ware.medicalsupplies}.{2}" exact="21"/>
						</do_if>
						<do_if value="faction.pioneers? and (not $DADVT.$DAGodFactionsTriggered.indexof.{faction.pioneers})">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.energycells}.{2}" exact="96"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.medicalsupplies}.{2}" exact="26"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.computronicsubstrate}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.metallicmicrolattice}.{2}" exact="31"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.proteinpaste}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.siliconcarbide}.{2}" exact="13"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.stimulants}.{2}" exact="2"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.pioneers}.{ware.terranmre}.{2}" exact="16"/>
						</do_if>
						<do_if value="faction.boron? and (not $DADVT.$DAGodFactionsTriggered.indexof.{faction.boron})">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.advancedelectronics}.{2}" exact="8"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.antimattercells}.{2}" exact="6"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.antimatterconverters}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.claytronics}.{2}" exact="24"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.dronecomponents}.{2}" exact="3"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.energycells}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.engineparts}.{2}" exact="13"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.fieldcoils}.{2}" exact="9"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.graphene}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.hullparts}.{2}" exact="10"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.medicalsupplies}.{2}" exact="18"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.microchips}.{2}" exact="19"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.missilecomponents}.{2}" exact="5"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.plasmaconductors}.{2}" exact="23"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.quantumtubes}.{2}" exact="19"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.refinedmetals}.{2}" exact="7"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.scanningarrays}.{2}" exact="5"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.shieldcomponents}.{2}" exact="15"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.smartchips}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.superfluidcoolant}.{2}" exact="11"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.turretcomponents}.{2}" exact="4"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.water}.{2}" exact="5"/>
							<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.weaponcomponents}.{2}" exact="11"/>
						</do_if>
						<!-- TODO: Other factions -->
						<do_if value="true" comment="EasyDiffAddMarker">
							<!-- Example code for diff add to change value. The index check is to prevent errors from factions that have already been triggered.
								<do_if value="not $DADVT.$DAGodFactionsTriggered.indexof.{faction.boron}">
									<set_value name="$DADVT.$DAGodFactionModuleQuotas.{faction.boron}.{ware.water}.{2}" exact="20"/>
								</do_if>
							-->
						</do_if>
					</actions>
				</library>
				<library name="LibraryGodCheckForEco">
					<actions>
						<do_if value="$DADVT.$DAGodMaxModuleSetting? and $DADVT.$DAGodMaxModuleSetting gt 10">
							<set_value name="$DADVT.$DAGodMaxModuleWarning" exact="true"/>
							<do_if value="md.$DAEco? and md.$DAEco">
								<!-- Proper station plot default setting should exist -->
								<set_value name="$DADVT.$DAGodMaxModuleWarning" exact="false"/>
							</do_if>
							<do_if value="true" comment="EasyDiffAddMarker">
							</do_if>
						</do_if>
					</actions>
				</library>
				<!-- God // Variable Check Libraries -->
				<library name="LibraryCheckGodVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAGodEnable? or (not ((typeof $DADVT.$DAGodEnable == datatype.integer) and (($DADVT.$DAGodEnable == 1) or ($DADVT.$DAGodEnable == 0))))">
							<set_value name="$DADVT.$DAGodEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodFactionModuleQuotas? or ($DADVT.$DAGodFactionModuleQuotas == null)">
							<set_value name="$DADVT.$DAGodFactionModuleQuotas" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodExcludedFactions? or ($DADVT.$DAGodExcludedFactions == null)">
							<set_value name="$DADVT.$DAGodExcludedFactions" exact="[faction.buccaneers,faction.civilian,faction.criminal,faction.hatikvah,faction.khaak,faction.player,faction.smuggler,faction.visitor,faction.xenon]"/>
							<do_if value="faction.loanshark?">
								<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.loanshark"/>
							</do_if>
							<do_if value="faction.scavenger?">
								<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.scavenger"/>
							</do_if>
							<do_if value="faction.court?">
								<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.court"/>
							</do_if>
							<do_if value="faction.fallensplit?">
								<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.fallensplit"/>
							</do_if>
							<do_if value="faction.yaki?">
								<append_to_list name="$DADVT.$DAGodExcludedFactions" exact="faction.yaki"/>
							</do_if>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodDefaultModuleQuotas? or ($DADVT.$DAGodDefaultModuleQuotas == null)">
							<set_value name="$DADVT.$DAGodDefaultModuleQuotas" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodFactionsTriggered? or ($DADVT.$DAGodFactionsTriggered == null)">
							<set_value name="$DADVT.$DAGodFactionsTriggered" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationsStarted? or ($DADVT.$DAGodStationsStarted == null)">
							<set_value name="$DADVT.$DAGodStationsStarted" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationsExpanded? or ($DADVT.$DAGodStationsExpanded == null)">
							<set_value name="$DADVT.$DAGodStationsExpanded" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationsFinished? or ($DADVT.$DAGodStationsFinished == null)">
							<set_value name="$DADVT.$DAGodStationsFinished" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodAllowBuildInPlayer? or (not ((typeof $DADVT.$DAGodAllowBuildInPlayer == datatype.integer) and (($DADVT.$DAGodAllowBuildInPlayer == 1) or ($DADVT.$DAGodAllowBuildInPlayer == 0))))">
							<set_value name="$DADVT.$DAGodAllowBuildInPlayer" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodAllowBuildInFriendly? or (not ((typeof $DADVT.$DAGodAllowBuildInFriendly == datatype.integer) and (($DADVT.$DAGodAllowBuildInFriendly == 1) or ($DADVT.$DAGodAllowBuildInFriendly == 0))))">
							<set_value name="$DADVT.$DAGodAllowBuildInFriendly" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodAttemptRecovery? or (not ((typeof $DADVT.$DAGodAttemptRecovery == datatype.integer) and (($DADVT.$DAGodAttemptRecovery == 1) or ($DADVT.$DAGodAttemptRecovery == 0))))">
							<set_value name="$DADVT.$DAGodAttemptRecovery" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationUpgradeEnable? or (not ((typeof $DADVT.$DAGodStationUpgradeEnable == datatype.integer) and (($DADVT.$DAGodStationUpgradeEnable == 1) or ($DADVT.$DAGodStationUpgradeEnable == 0))))">
							<set_value name="$DADVT.$DAGodStationUpgradeEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationsUpgraded? or ($DADVT.$DAGodStationsUpgraded == null)">
							<create_group groupname="$DADVT.$DAGodStationsUpgraded"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodMaxModuleSetting? or (not ($DADVT.$DAGodMaxModuleSetting ge 10))">
							<set_value name="$DADVT.$DAGodMaxModuleSetting" exact="25"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodMaxModuleWarning? or (not ((typeof $DADVT.$DAGodMaxModuleWarning == datatype.integer) and (($DADVT.$DAGodMaxModuleWarning == 1) or ($DADVT.$DAGodMaxModuleWarning == 0))))">
							<set_value name="$DADVT.$DAGodMaxModuleWarning" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodTrackedStations? or ($DADVT.$DAGodTrackedStations == null)">
							<create_group groupname="$DADVT.$DAGodTrackedStations"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodTrackedStationsInfo? or ($DADVT.$DAGodTrackedStationsInfo == null)">
							<set_value name="$DADVT.$DAGodTrackedStationsInfo" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodModuleOrderTable? or ($DADVT.$DAGodModuleOrderTable == null)">
							<set_value name="$DADVT.$DAGodModuleOrderTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodStationRequestInterval? or (not ($DADVT.$DAGodStationRequestInterval gt 0))">
							<set_value name="$DADVT.$DAGodStationRequestInterval" exact="1"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodDetailedDebug? or (not ((typeof $DADVT.$DAGodDetailedDebug == datatype.integer) and (($DADVT.$DAGodDetailedDebug == 1) or ($DADVT.$DAGodDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAGodDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGodXtremelyDetailedDebug? or (not ((typeof $DADVT.$DAGodXtremelyDetailedDebug == datatype.integer) and (($DADVT.$DAGodXtremelyDetailedDebug == 1) or ($DADVT.$DAGodXtremelyDetailedDebug == 0))))">
							<set_value name="$DADVT.$DAGodXtremelyDetailedDebug" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAGod -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- God // God // God // God // God -->
				<!-- BP // BP // BP // BP // BP -->
				<!-- BP // Update on load cues -->
				<cue name="UpdateOnLoadBP" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DABPEnable"/>
						<check_any>
							<check_value value="not $UpdateOnLoadBPTimer?"/>
							<check_value value="$UpdateOnLoadBPTimer? and (player.age gt $UpdateOnLoadBPTimer)"/>
						</check_any>
					</conditions>
					<actions>
						<set_value name="$UpdateOnLoadBPTimer" exact="player.age + 5s"/>
						<signal_cue_instantly cue="EventBPUpdateLibrary"/>
					</actions>
				</cue>
				<!-- BP // Timer Cues -->
				<!-- BP // Event cues -->
				<cue name="EventBPUpdateLibrary" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<include_actions ref="LibraryBPCheckTable"/>
					</actions>
				</cue>
				<cue name="EventBPPlayerScannedShip" instantiate="true" namespace="this">
					<conditions>
						<event_scan_finished scanner="global.$PlayerControlledGroup"/>
						<check_value value="md.$DADynamicVarTable.$DABPEnable"/>
						<check_value value="event.param.isclass.ship"/>
						<check_value value="not event.param.iswreck"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<set_value name="$LocObject" exact="event.param"/>
						<do_if value="not $DADVT.$DABPAlreadyScanned.indexof.{$LocObject}">
							<add_to_group groupname="$DADVT.$DABPAlreadyScanned" object="$LocObject"/>
							<do_if value="$LocObject.macro?">
								<set_value name="$LocMacro" exact="$LocObject.macro"/>
								<do_if value="$LocMacro.ware?">
									<set_value name="$LocWare" exact="$LocMacro.ware"/>
									<do_if value="$LocWare? and $LocWare and (typeof $LocWare == datatype.ware)">
										<set_value name="$LocScanLevel" exact="1"/>
										<do_if value="@player.hasscanner and (@player.scanlevel gt 0)">
											<set_value name="$LocScanLevel" exact="player.scanlevel"/>
										</do_if>
										<do_if value="(not player.blueprints.{$LocWare}.any.exists) and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
											<do_if value="not $DADVT.$DABPTracking.{$LocWare}?">
												<include_actions ref="LibraryBPCheckUnknown"/>
											</do_if>
											<do_if value="$DADVT.$DABPTracking.{$LocWare}? and $LocScanLevel?">
												<signal_cue_instantly cue="EventBPAddProgress" param="[$LocWare,$LocMacro,$LocScanLevel]"/>
											</do_if>
										</do_if>
										<do_if value="$LocObject and $LocScanLevel?">
											<signal_cue_instantly cue="EventBPCheckComponents" param="[$LocObject,$LocScanLevel]"/>
										</do_if>
										<remove_value name="$LocScanLevel"/>
									</do_if>
									<remove_value name="$LocWare"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DABP -- EventBPPlayerScannedShip -- ERROR -- No Ware -- $LocObject: %s -- $LocMacro: %s -- $LocWare: %s'.[@$LocObject.knownname,@$LocMacro.id,@$LocMacro.ware]" context="false" filter="error"/>
								</do_else>
								<remove_value name="$LocMacro"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DABP -- EventBPPlayerScannedShip -- ERROR -- No Macro -- $LocObject: %s -- $LocMacro: %s'.[@$LocObject.knownname,@$LocObject.macro.id]" context="false" filter="error"/>
							</do_else>
						</do_if>
						<remove_value name="$LocObject"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<cue name="EventBPPlayerAssetScannedShip" instantiate="true" namespace="this">
					<conditions>
						<event_object_signalled object="player.entity" param="'policeassetscannedship'"/>
						<check_value value="md.$DADynamicVarTable.$DABPEnable"/>
						<check_value value="event.param2.isclass.ship"/>
						<check_value value="not event.param2.iswreck"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<set_value name="$LocObject" exact="event.param2"/>
						<do_if value="not $DADVT.$DABPAlreadyScanned.indexof.{$LocObject}">
							<add_to_group groupname="$DADVT.$DABPAlreadyScanned" object="$LocObject"/>
							<do_if value="$LocObject.macro?">
								<set_value name="$LocMacro" exact="$LocObject.macro"/>
								<do_if value="$LocMacro.ware?">
									<set_value name="$LocWare" exact="$LocMacro.ware"/>
									<do_if value="$LocWare? and $LocWare and (typeof $LocWare == datatype.ware)">
										<set_value name="$LocScanLevel" exact="1"/>
										<do_if value="(not player.blueprints.{$LocWare}.any.exists) and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
											<do_if value="not $DADVT.$DABPTracking.{$LocWare}?">
												<include_actions ref="LibraryBPCheckUnknown"/>
											</do_if>
											<do_if value="$DADVT.$DABPTracking.{$LocWare}? and $LocScanLevel?">
												<signal_cue_instantly cue="EventBPAddProgress" param="[$LocWare,$LocMacro,$LocScanLevel]"/>
											</do_if>
										</do_if>
										<do_if value="$LocObject and $LocScanLevel?">
											<signal_cue_instantly cue="EventBPCheckComponents" param="[$LocObject,$LocScanLevel]"/>
										</do_if>
										<remove_value name="$LocScanLevel"/>
									</do_if>
									<remove_value name="$LocWare"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DABP -- EventBPPlayerAssetScannedShip -- ERROR -- No Ware -- $LocObject: %s -- $LocMacro: %s -- $LocWare: %s'.[@$LocObject.knownname,@$LocMacro.id,@$LocMacro.ware]" context="false" filter="error"/>
								</do_else>
								<remove_value name="$LocMacro"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DABP -- EventBPPlayerAssetScannedShip -- ERROR -- No Macro -- $LocObject: %s -- $LocMacro: %s'.[@$LocObject.knownname,@$LocObject.macro.id]" context="false" filter="error"/>
							</do_else>
						</do_if>
						<remove_value name="$LocObject"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<cue name="EventBPPlayerDiscoveredObject" instantiate="true" namespace="this">
					<conditions>
						<event_player_discovered_object/>
						<check_value value="md.$DADynamicVarTable.$DABPEnable"/>
						<check_value value="not event.param.iswreck"/>
						<check_value value="not event.param.isclass.ship"/>
						<check_value value="event.param2 gt 0"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<set_value name="$LocObject" exact="event.param"/>
						<do_if value="$LocObject.macro?">
							<set_value name="$LocMacro" exact="$LocObject.macro"/>
							<do_if value="$LocMacro.ware?">
								<set_value name="$LocWare" exact="$LocMacro.ware"/>
								<do_if value="$LocWare? and $LocWare and (typeof $LocWare == datatype.ware)">
									<set_value name="$LocScanLevel" exact="event.param2"/>
									<do_if value="(not player.blueprints.{$LocWare}.any.exists) and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
										<do_if value="not $DADVT.$DABPTracking.{$LocWare}?">
											<include_actions ref="LibraryBPCheckUnknown"/>
										</do_if>
										<do_if value="$DADVT.$DABPTracking.{$LocWare}? and $LocScanLevel?">
											<signal_cue_instantly cue="EventBPAddProgress" param="[$LocWare,$LocMacro,$LocScanLevel]"/>
										</do_if>
									</do_if>
									<do_if value="$LocObject and $LocScanLevel?">
										<signal_cue_instantly cue="EventBPCheckComponents" param="[$LocObject,$LocScanLevel]"/>
									</do_if>
									<remove_value name="$LocScanLevel"/>
								</do_if>
								<remove_value name="$LocWare"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DABP -- EventBPPlayerDiscoveredObject -- ERROR -- No Ware -- $LocObject: %s -- $LocMacro: %s -- $LocWare: %s'.[@$LocObject.knownname,@$LocMacro.id,@$LocMacro.ware]" context="false" filter="error"/>
							</do_else>
							<remove_value name="$LocMacro"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DABP -- EventBPPlayerDiscoveredObject -- ERROR -- No Macro -- $LocObject: %s -- $LocMacro: %s'.[@$LocObject.knownname,@$LocObject.macro.id]" context="false" filter="error"/>
						</do_else>
						<remove_value name="$LocObject"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<cue name="EventBPCheckComponents" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<check_value value="event.param.{1}.exists"/>
						<check_value value="event.param.{2} gt 0"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<!-- event.param == [$Object,$ScanLevel] -->
						<set_value name="$LocParent" exact="event.param.{1}"/>
						<set_value name="$LocScanLevel" exact="event.param.{2}"/>
						<set_value name="$LocAlreadyGainedCredit" exact="[]"/>
						<find_object_component groupname="$LocComponentGroup" class="[class.engine, class.turret, class.shieldgenerator, class.weapon]" object="$LocParent" multiple="true"/>
						<do_if value="$LocComponentGroup.count" min="1">
							<do_for_each name="$LocComponent" in="$LocComponentGroup">
								<do_if value="$LocComponent.macro? and (not $LocAlreadyGainedCredit.indexof.{$LocComponent.macro})">
									<set_value name="$LocMacro" exact="$LocComponent.macro"/>
									<append_to_list name="$LocAlreadyGainedCredit" exact="$LocMacro"/>
									<do_if value="$LocMacro.ware?">
										<set_value name="$LocWare" exact="$LocMacro.ware"/>
										<do_if value="$LocWare? and $LocWare and (typeof $LocWare == datatype.ware)">
											<do_if value="(not player.blueprints.{$LocWare}.any.exists) and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
												<do_if value="not $DADVT.$DABPTracking.{$LocWare}?">
													<include_actions ref="LibraryBPCheckUnknown"/>
												</do_if>
												<do_if value="$DADVT.$DABPTracking.{$LocWare}? and $LocScanLevel?">
													<signal_cue_instantly cue="EventBPAddProgress" param="[$LocWare,$LocMacro,$LocScanLevel]"/>
												</do_if>
											</do_if>
										</do_if>
										<remove_value name="$LocWare"/>
									</do_if>
									<remove_value name="$LocMacro"/>
								</do_if>
							</do_for_each>
						</do_if>
						<remove_value name="$LocParent"/>
						<remove_value name="$LocScanLevel"/>
						<remove_value name="$LocAlreadyGainedCredit"/>
						<remove_value name="$LocComponentGroup"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<cue name="EventBPAdded" instantiate="true" namespace="this">
					<conditions>
						<event_player_blueprint_added/>
						<check_value value="typeof event.param2 == datatype.ware"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<set_value name="$LocWare" exact="event.param2"/>
						<do_if value="$LocWare.objectmacro">
							<set_value name="$LocMacro" exact="$LocWare.objectmacro"/>
							<do_if value="$LocMacro? and $LocMacro">
								<do_if value="$DADVT.$DABPClassRequirements.{$LocMacro.class}?">
									<do_if value="$DADVT.$DABPTracking.{$LocWare}? and ($DADVT.$DABPTracking.{$LocWare}.{1} != $DADVT.$DABPClassRequirements.{$LocMacro.class})">
										<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[$DADVT.$DABPClassRequirements.{$LocMacro.class},$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
									</do_if>
									<do_elseif value="not $DADVT.$DABPTracking.{$LocWare}?">
										<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[$DADVT.$DABPClassRequirements.{$LocMacro.class},$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
									</do_elseif>
								</do_if>
							</do_if>
						</do_if>
						<remove_value name="$LocWare"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<cue name="EventBPAddProgress" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<check_value value="typeof event.param.{1} == datatype.ware"/>
						<check_value value="typeof event.param.{2} == datatype.macro"/>
						<check_value value="event.param.{3} gt 0"/>
					</conditions>
					<actions>
						<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						<!-- event.param == [$Ware,$Macro,$Increase] -->
						<!-- Ware is already checked for $DADVT.$DABPTracking.{$LocWare}?, not already have bp, and not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint]} -->
						<set_value name="$LocWare" exact="event.param.{1}"/>
						<set_value name="$LocMacro" exact="event.param.{2}"/>
						<set_value name="$LocIncrease" exact="event.param.{3}"/>
						<set_value name="$DADVT.$DABPTracking.{$LocWare}.{1}" exact="$LocIncrease" operation="add"/>
						<do_if value="$DADVT.$DABPClassRequirements.{$LocMacro.class}?">
							<do_if value="$DADVT.$DABPTracking.{$LocWare}.{2} != $DADVT.$DABPClassRequirements.{$LocMacro.class}" comment="Oh the joys of allowing player to alter amounts">
								<set_value name="$DADVT.$DABPTracking.{$LocWare}.{2}" exact="$DADVT.$DABPClassRequirements.{$LocMacro.class}"/>
							</do_if>
							<do_if value="$DADVT.$DABPTracking.{$LocWare}.{1} ge $DADVT.$DABPTracking.{$LocWare}.{2}">
								<add_blueprints macros="$LocMacro"/>
								<do_if value="$DADVT.$DABPDebugEnable">
									<debug_text text="'MOD: DABP -- EventBPAddProgress -- Awarded blueprint -- Ware: %s -- Macro: %s -- Progress: %s -- Goal: %s'.[$LocWare.id,$LocMacro.id,$DADVT.$DABPTracking.{$LocWare}.{1},$DADVT.$DABPTracking.{$LocWare}.{2}]" context="false" filter="scripts"/>
								</do_if>
							</do_if>
						</do_if>
						<remove_value name="$LocWare"/>
						<remove_value name="$LocMacro"/>
						<remove_value name="$LocIncrease"/>
						<remove_value name="$DADVT"/>
					</actions>
				</cue>
				<!-- BP // Functional Libraries -->
				<library name="LibraryBPCheckUnknown">
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<!-- All cues that call library have:	$LocWare?
																$LocMacro?
																$LocWare
																(typeof $LocWare == datatype.ware)
								They have checked for:	(not $DADVT.$DABPTracking.{$LocWare}?)
														(not player.blueprints.{$LocWare}.any.exists)
														(not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint]})
						-->
						<do_if value="$LocMacro">
							<do_if value="$DADVT.$DABPClassRequirements.{$LocMacro.class}?">
								<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[0,$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
							</do_if>
							<do_elseif value="not $DADVT.$DABPClassRequirements.{$LocMacro.class}?">
								<set_value name="$DADVT.$DABPClassRequirements.{$LocMacro.class}" exact="$DADVT.$DABPUnkownClassRequirement"/>
								<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[0,$DADVT.$DABPUnkownClassRequirement]"/>
								<do_if value="$DADVT.$DABPDebugEnable">
									<debug_text text="'MOD: DABP -- LibraryBPCheckUnknown -- Added new class entry -- Class: %s -- Requirement: %s'.[$LocMacro.class,$DADVT.$DABPClassRequirements.{$LocMacro.class}]" context="false" filter="scripts"/>
								</do_if>
							</do_elseif>
						</do_if>
					</actions>
				</library>
				<library name="LibraryBPCheckTable">
					<actions>
						<do_if value="not $DADVT?">
							<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
						</do_if>
						<include_actions ref="LibraryCheckBPVariables"/>
						<do_if value="$DADVT.$DABPTracking? and $DADVT.$DABPClassRequirements?">
							<set_value name="$LocAllWares" exact="lookup.ware.list"/>
							<do_for_each name="$LocWare" in="$LocAllWares">
								<do_if value="$LocWare.objectmacro? and @$LocWare.objectmacro and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
									<set_value name="$LocMacro" exact="$LocWare.objectmacro"/>
									<do_if value="not $DADVT.$DABPClassRequirements.{$LocMacro.class}?" comment="unknown class">
										<set_value name="$DADVT.$DABPClassRequirements.{$LocMacro.class}" exact="$DADVT.$DABPUnkownClassRequirement"/>
										<do_if value="$DADVT.$DABPDebugEnable">
											<debug_text text="'MOD: DABP -- LibraryBPCheckTable -- Added new class entry -- Class: %s -- Requirement: %s'.[$LocMacro.class,$DADVT.$DABPClassRequirements.{$LocMacro.class}]" context="false" filter="scripts"/>
										</do_if>
									</do_if>
									<do_if value="player.blueprints.{$LocWare}.any.exists">
										<do_if value="$DADVT.$DABPTracking.{$LocWare}?">
											<do_if value="$DADVT.$DABPTracking.{$LocWare}.{2} != $DADVT.$DABPClassRequirements.{$LocMacro.class}">
												<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[$DADVT.$DABPClassRequirements.{$LocMacro.class},$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
											</do_if>
											<do_elseif value="$DADVT.$DABPTracking.{$LocWare}.{1} != $DADVT.$DABPClassRequirements.{$LocMacro.class}">
												<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[$DADVT.$DABPClassRequirements.{$LocMacro.class},$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
											</do_elseif>
										</do_if>
										<do_elseif value="not $DADVT.$DABPTracking.{$LocWare}?">
											<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[$DADVT.$DABPClassRequirements.{$LocMacro.class},$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
										</do_elseif>
									</do_if>
									<do_elseif value="(not player.blueprints.{$LocWare}.any.exists)">
										<do_if value="not $DADVT.$DABPTracking.{$LocWare}?">
											<set_value name="$DADVT.$DABPTracking.{$LocWare}" exact="[0,$DADVT.$DABPClassRequirements.{$LocMacro.class}]"/>
										</do_if>
										<do_elseif value="$DADVT.$DABPTracking.{$LocWare}?">
											<do_if value="$DADVT.$DABPTracking.{$LocWare}.{2} != $DADVT.$DABPClassRequirements.{$LocMacro.class}">
												<set_value name="$DADVT.$DABPTracking.{$LocWare}.{2}" exact="$DADVT.$DABPClassRequirements.{$LocMacro.class}"/>
											</do_if>
											<do_if value="$DADVT.$DABPTracking.{$LocWare}.{1} ge $DADVT.$DABPTracking.{$LocWare}.{2}">
												<add_blueprints macros="$LocMacro"/>
												<do_if value="$DADVT.$DABPDebugEnable">
													<debug_text text="'MOD: DABP -- LibraryBPCheckTable -- Awarded blueprint -- Ware: %s -- Macro: %s -- Progress: %s -- Goal: %s'.[$LocWare.id,$LocMacro.id,$DADVT.$DABPTracking.{$LocWare}.{1},$DADVT.$DABPTracking.{$LocWare}.{2}]" context="false" filter="scripts"/>
												</do_if>
											</do_if>
										</do_elseif>
									</do_elseif>
									<remove_value name="$LocMacro"/>
								</do_if>
								<do_elseif value="(not ($LocWare.objectmacro? and @$LocWare.objectmacro)) and (not $LocWare.hasanytag.{[tag.noplayerblueprint,tag.noblueprint,tag.inventory,tag.tradeonly,tag.crafting,tag.missiononly,tag.economy,tag.research,tag.workunit]})">
									<do_if value="$DADVT.$DABPDebugEnable * 100">
										<debug_text text="'MOD: DABP -- LibraryBPCheckTable -- Ware without objectmacro -- LocWare: %s -- objectmacro: %s'.[@$LocWare.id,@$LocWare.objectmacro.id]" context="false" filter="scripts"/>
									</do_if>
								</do_elseif>
							</do_for_each>
							<remove_value name="$LocAllWares"/>
						</do_if>
					</actions>
				</library>
				<!-- BP // Variable Check Libraries -->
				<library name="LibraryCheckBPVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DABPEnable? or (not ((typeof $DADVT.$DABPEnable == datatype.integer) and (($DADVT.$DABPEnable == 1) or ($DADVT.$DABPEnable == 0))))">
							<set_value name="$DADVT.$DABPEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DABPTracking? or ($DADVT.$DABPTracking == null)">
							<set_value name="$DADVT.$DABPTracking" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DABPClassRequirements? or ($DADVT.$DABPClassRequirements == null)">
							<set_value name="$DADVT.$DABPClassRequirements" exact="table[{class.pier} = 20, {class.dockarea} = 20,
								{class.production} = 20, {class.storage} = 20, {class.defencemodule} = 20, {class.buildmodule} = 20, {class.connectionmodule} = 20, {class.habitation} = 20, {class.welfaremodule} = 20, {class.processingmodule} = 20,
								{class.ship_xs} = 25, {class.ship_s} = 25, {class.ship_m} = 30, {class.ship_l} = 35, {class.ship_xl} = 35,
								{class.turret} = 100, {class.missileturret} = 100, {class.missilelauncher} = 100, {class.engine} = 100, {class.shieldgenerator} = 100, {class.weapon} = 100,
								{class.satellite} = 20, {class.missile} = 20, {class.countermeasure} = 20]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DABPUnkownClassRequirement? or (not ($DADVT.$DABPUnkownClassRequirement gt 0))">
							<set_value name="$DADVT.$DABPUnkownClassRequirement" exact="20"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DABPAlreadyScanned? or ($DADVT.$DABPAlreadyScanned == null)">
							<create_group groupname="$DADVT.$DABPAlreadyScanned"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DABPDebugEnable? or (not ((typeof $DADVT.$DABPDebugEnable == datatype.integer) and (($DADVT.$DABPDebugEnable == 1) or ($DADVT.$DABPDebugEnable == 0))))">
							<set_value name="$DADVT.$DABPDebugEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DABP -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Trader Profit // Trader Profit // Trader Profit // Trader Profit // Trader Profit -->
				<!-- Trader Profit // Timer Cues -->
				<cue name="TimerTPCheckKeys" instantiate="true" checkinterval="30min" checktime="player.age + 30min">
					<conditions>
						<check_value value="$DAGVT.$DATPEnable"/>
						<check_value value="$DAGVT.$DATPTraderTable?"/>
						<check_value value="$DAGVT.$DATPTraderTable.keys.count"/>
					</conditions>
					<actions>
						<set_value name="$LocTPCheckObjects" exact="[]"/>
						<find_station_by_true_owner name="$LocTPCheckObjects" faction="faction.player" space="player.galaxy" multiple="true"/>
						<find_ship_by_true_owner name="$LocTPPlayerShips" faction="faction.player" space="player.galaxy" multiple="true"/>
						<append_list_elements name="$LocTPCheckObjects" other="$LocTPPlayerShips"/>
						<do_if value="$LocTPCheckObjects.count" min="1">
							<do_for_each name="$Key" in="$DAGVT.$DATPTraderTable.keys.list">
								<do_if value="not $LocTPCheckObjects.indexof.{$Key}">
									<remove_value name="$DAGVT.$DATPTraderTable.{$Key}"/>
								</do_if>
							</do_for_each>
						</do_if>
						<remove_value name="$LocTPCheckObjects"/>
						<remove_value name="$LocTPPlayerShips"/>
					</actions>
				</cue>
				<!-- Trader Profit // Event cues -->
				<cue name="EventTPTrackProfit" instantiate="true" namespace="this">
					<conditions>
						<event_player_trade_completed/>
						<check_value value="global.$DAVarTable.$DATPEnable"/>
						<check_value value="not event.param.iswareexchange"/>
						<check_value value="not event.param.iscrewexchange"/>
						<check_value value="event.param.unitprice" min="1ct"/>
					</conditions>
					<actions>
						<do_if value="not $DAGVT?">
							<set_value name="$DAGVT" exact="global.$DAVarTable"/>
						</do_if>
						<set_value name="$Trade" exact="event.param"/>
						<set_value name="$Buyer" exact="$Trade.buyer"/>
						<set_value name="$Seller" exact="$Trade.seller"/>
						<set_value name="$Price" exact="$Trade.unitprice * $Trade.transferredamount"/>
						<do_if value="$Buyer.isoperational and $Buyer.trueowner == faction.player and $Buyer.isclass.ship and $Buyer.defaultorder?">
							<do_if value="((['TradeRoutine','TradeRoutine_Basic','TradeRoutine_Advanced','Middleman','MiningRoutine','MiningRoutine_Advanced','MiningRoutine_Expert','MiningRoutine_Basic'].indexof.{@$Buyer.defaultorder.id}) or ((@$Buyer.defaultorder.id == 'Assist') and (['TradeRoutine','TradeRoutine_Basic','TradeRoutine_Advanced','Middleman','MiningRoutine','MiningRoutine_Advanced','MiningRoutine_Expert','MiningRoutine_Basic'].indexof.{@$Buyer.commander.defaultorder.id})))">
								<do_if value="$DAGVT.$DATPTraderTable.{$Buyer}?">
									<set_value name="$DAGVT.$DATPTraderTable.{$Buyer}.{1}" exact="$Price" operation="subtract"/>
								</do_if>
								<do_elseif value="$DAGVT.$DATPTraderTable?">
									<set_value name="$DAGVT.$DATPTraderTable.{$Buyer}" exact="[$Price * -1,player.age]"/>
								</do_elseif>
							</do_if>
						</do_if>
						<do_elseif value="$Buyer.isoperational and $Buyer.trueowner == faction.player and $Buyer.isclass.station">
							<do_if value="$DAGVT.$DATPTraderTable.{$Buyer}?">
								<set_value name="$DAGVT.$DATPTraderTable.{$Buyer}.{1}" exact="$Price" operation="subtract"/>
							</do_if>
							<do_elseif value="$DAGVT.$DATPTraderTable?">
								<set_value name="$DAGVT.$DATPTraderTable.{$Buyer}" exact="[$Price * -1,player.age]"/>
							</do_elseif>
						</do_elseif>
						<do_if value="$Seller.isoperational and $Seller.trueowner == faction.player and $Seller.isclass.ship and $Seller.defaultorder?">
							<do_if value="((['TradeRoutine','TradeRoutine_Basic','TradeRoutine_Advanced','Middleman','MiningRoutine','MiningRoutine_Advanced','MiningRoutine_Expert','MiningRoutine_Basic'].indexof.{@$Seller.defaultorder.id}) or ((@$Seller.defaultorder.id == 'Assist') and (['TradeRoutine','TradeRoutine_Basic','TradeRoutine_Advanced','Middleman','MiningRoutine','MiningRoutine_Advanced','MiningRoutine_Expert','MiningRoutine_Basic'].indexof.{@$Seller.commander.defaultorder.id})))">
								<do_if value="$DAGVT.$DATPTraderTable.{$Seller}?">
									<set_value name="$DAGVT.$DATPTraderTable.{$Seller}.{1}" exact="$Price" operation="add"/>
								</do_if>
								<do_elseif value="$DAGVT.$DATPTraderTable?">
									<set_value name="$DAGVT.$DATPTraderTable.{$Seller}" exact="[$Price,player.age]"/>
								</do_elseif>
							</do_if>
						</do_if>
						<do_elseif value="$Seller.isoperational and $Seller.trueowner == faction.player and $Seller.isclass.station">
							<do_if value="$DAGVT.$DATPTraderTable.{$Seller}?">
								<set_value name="$DAGVT.$DATPTraderTable.{$Seller}.{1}" exact="$Price" operation="add"/>
							</do_if>
							<do_elseif value="$DAGVT.$DATPTraderTable?">
								<set_value name="$DAGVT.$DATPTraderTable.{$Seller}" exact="[$Price,player.age]"/>
							</do_elseif>
						</do_elseif>
						<remove_value name="$Trade"/>
						<remove_value name="$Buyer"/>
						<remove_value name="$Seller"/>
						<remove_value name="$Price"/>
					</actions>
				</cue>
				<cue name="EventTPRemoveKilled" instantiate="true" namespace="this">
					<conditions>
						<event_player_owned_destroyed/>
						<check_value value="global.$DAVarTable.$DATPEnable"/>
						<check_value value="event.param.isclass.defensible"/>
						<check_value value="(not event.param.ismasstraffic) and (not event.param.isunit) and (not event.param.isdeployable) and (not event.param.isclass.ship_xs)"/>
						<check_value value="event.param3 != killmethod.collected"/>
						<check_value value="event.param3 != killmethod.removed" comment="spacesuit is removed"/>
					</conditions>
					<actions>
						<do_if value="global.$DAVarTable.$DATPTraderTable.{event.param}?">
							<remove_value name="global.$DAVarTable.$DATPTraderTable.{event.param}"/>
						</do_if>
					</actions>
				</cue>
				<!-- Trader Profit // Variable Check Libraries -->
				<library name="LibraryCheckTPVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DAGVT.$DATPEnable? or (not ((typeof $DAGVT.$DATPEnable == datatype.integer) and (($DAGVT.$DATPEnable == 1) or ($DAGVT.$DATPEnable == 0))))">
							<set_value name="$DAGVT.$DATPEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAGVT.$DATPTraderTable? or ($DAGVT.$DATPTraderTable == null)">
							<set_value name="$DAGVT.$DATPTraderTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DATP -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
				<!-- Misc -->
				<library name="LibraryCheckMiscVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAJobsVanillaSpawnedJobIds? or ($DADVT.$DAJobsVanillaSpawnedJobIds == null)">
							<set_value name="$DADVT.$DAJobsVanillaSpawnedJobIds" exact="['hatikvah_resourcescout_sm_deepspace_single','hatikvah_free_miner_ml_liquid_deepspace_single','hatikvah_free_miner_l_solid_deepspace_largegroup',
								'scaleplate_plunderer_l_cluster','scaleplate_plunderer_l_cluster_reduced','scaleplate_scavenger_m_cluster','scaleplate_plunderer_m_cluster','scaleplate_smuggler_s','scaleplate_scavenger_sm_deepspace',
								'buc_patrol_m_hidden','buc_patrol_s_hidden','buc_patrol_s_hidden_antisat','buc_plunderer_m_hidden_op','buc_plunderer_m_hidden','buc_guerilla_m_cluster','buc_guerilla_infiltrator_s_cluster',
								'scaleplate_scavenger_m_cluster_bor_core','scaleplate_scavenger_s_cluster_bor_core','scaleplate_plunderer_l_cluster_bor_outer','scaleplate_scavenger_m_cluster_bor_outer','khaak_fighter_s_deepspace_single',
								'khaak_fighter_s_deepspace_group','hatikvah_plunderer_l_cluster','hatikvah_scavenger_m_cluster']"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsDisabledVanillaSpawnedJobIds? or ($DADVT.$DAJobsDisabledVanillaSpawnedJobIds == null)">
							<set_value name="$DADVT.$DAJobsDisabledVanillaSpawnedJobIds" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAMisc -- Number of missing variables set: %s.'.[$MissingVarCount]" context="true" filter="error"/>
							<do_if value="$TotalMissingVar?">
								<set_value name="$TotalMissingVar" exact="$MissingVarCount" operation="add"/>
							</do_if>
						</do_if>
						<remove_value name="$MissingVarCount"/>
					</actions>
				</library>
			</cues>
			<!-- TODO: Maybe play the game eventually, idk -->
		</cue>
	</cues>
</mdscript>
