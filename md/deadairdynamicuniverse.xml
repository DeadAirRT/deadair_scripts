<?xml version="1.0" encoding="utf-8"?>
<mdscript name="DeadAirDynamicUniverse" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
	<cues>
		<cue name="Init">
			<actions>
				<!-- TODO: Dynamic War Flavor Text, Jobs Expeditions News, Jobs SST ErrorCheck -->
				<!-- DONE: Dynamic War ErrorCheck, Dynamic News ErrorCheck, Evolution ErrorCheck, Fill ErrorCheck, Jobs Expeditions ErrorCheck + News, Jobs SST ErrorCheck -->
				<!-- DONE: XML diffs, Add Wares etc -->
				<!-- DONE: Should do all menus at same time for reordering -->
				<!-- TODO: Rework variable names and potentially put in table to prevent namespace problems  // $CueName.$Variable? -->
				<!-- DONE: Remove values from $DADVT that are not used in menu entries -->
				<!-- TODO: Combine reused portions of code like adding EQ mods -->
				<!-- DONE: JobsEXP deactivate jobs when $DADVT.$DAJobsEXPEnable is false -->
				<!-- DONE: JobsSST check ships if they need to be moved or deactivated -->
				<!-- DONE: Allow setting number of fleets for each job? -->
				<!-- DONE: Move all notifications / logbook entries to Dynamic News -->
				<!-- DONE: Dynamic War set up $DADVT.$DADynamicWarFactionChanceTable at start // Set initial value prior to reaching value check in EventDynamicWarEventSelector -->
				<!-- TODO: Filter factions from dynamic wars event that would result in no change -->
				<!-- DONE: Make jobs activatable from DA Jobs // vanilla military is too boring and actually performs bad due to fighter spam -->
				<!-- DONE: $DADVT.$DAJobsSSTJobSizeQuotas -->
				<!-- TODO: Evolution script to expand xenon shipyards with more modules -->
				<!-- MAYBE: Integrate Tater lifetime profit? Optimize option for NPC traders? -->
				<!-- Table Variables even though I suck at tables -->
				<set_value name="md.$DADynamicVarTable" exact="table[]"/>
				<!-- Shortcut entries -->
				<set_value name="$DADVT" exact="md.$DADynamicVarTable"/>
				<!-- Variables below are needed for menu stuff. Minimize usage of global/md variables -->
				<!-- Debug -->
				<set_value name="$DADVT.$DADynamicDebug" exact="true"/>
				<!-- Submod - All values used in menus -->
				<set_value name="$DADVT.$DADynamicWarEnable" exact="true"/>
				<set_value name="$DADVT.$DADynamicNewsEnable" exact="true"/>
				<set_value name="$DADVT.$DAEvolutionEnable" exact="true"/>
				<set_value name="$DADVT.$DAFillEnable" exact="true"/>
				<set_value name="$DADVT.$DAJobsEXPEnable" exact="true"/>
				<set_value name="$DADVT.$DAJobsSSTEnable" exact="true"/>
				<set_value name="$DADVT.$DAGateEnable" exact="true"/>
				<!-- Dynamic War -->
				<set_value name="$DADVT.$DADynamicWarFavorsEnable" exact="true"/>
				<set_value name="$DADVT.$DADynamicWarDisabledFactions" exact="[faction.buccaneers, faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
				<do_if value="faction.boron?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.boron"/>
				</do_if>
				<do_if value="faction.loanshark?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.loanshark"/>
				</do_if>
				<do_if value="faction.scavenger?">
					<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.scavenger"/>
				</do_if>
				<set_value name="$DADVT.$DADynamicWarPermaExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
				<set_value name="$DADVT.$DADynamicWarFactionChanceTable" exact="table[]"/>
				<create_list name="$DADynamicWarLockedRelationFactions"/>
				<create_list name="$DADynamicWarInactiveFactions"/>
				<set_value name="$DADVT.$DADynamicWarEventWeights" exact="[1,16,32,32,16,1,0]"/>
				<set_value name="$DADVT.$DADynamicWarInterval" exact="30"/>
				<set_value name="$DADynamicWarLastEventTime" exact="0"/>
				<set_value name="$DADVT.$DADynamicWarFavors" exact="table[]"/>
				<set_value name="$DADVT.$DADynamicWarDetailedDebug" exact="true"/>
				<set_value name="$DADVT.$DADynamicWarPrimaryRaceModifier" exact="0.25"/>
				<set_value name="$DADVT.$DADynamicWarCurrentRelationsModifier" exact="0.5"/>
				<set_value name="$DADVT.$DADynamicWarCollectiveRelationsModifier" exact="0.25"/>
				<set_value name="$DADVT.$DADynamicWarFlavorEnable" exact="false"/>
				<set_value name="$DADVT.$DADynamicWarRelationsFixEnable" exact="true"/>
				<set_value name="$DADVT.$DADynamicWarRelationsAILimit" exact="0.32"/>
				<set_value name="$DADVT.$DADynamicWarPossibleFactionsPerEvent" exact="4"/>
				<!-- Dynamic News -->
				<set_value name="$DADVT.$DADynamicNewsTable" exact="table[]"/>
				<find_sector groupname="$DADynamicNewsAllSectors" multiple="true"/>
				<find_station groupname="$DADynamicNewsStations" multiple="true">
					<match_any>
						<match shipyard="true"/>
						<match wharf="true"/>
						<match tradestation="true"/>
						<match equipmentdock="true"/>
						<match defencestation="true"/>
						<match factionheadquarters="true"/>
					</match_any>
				</find_station>
				<set_value name="$DADynamicNewsQueuedReports" exact="table[]"/>
				<set_value name="$DADynamicNewsLastReportTime" exact="0"/>
				<set_value name="$DADVT.$DADynamicNewsInterval" exact="10"/>
				<set_value name="$DADVT.$DADynamicNewsDetailedDebug" exact="true"/>
				<set_value name="$DADVT.$DADynamicNewsEnableNotifications" exact="true"/>
				<set_value name="$DADVT.$DADynamicNewsEnableLogbook" exact="true"/>
				<set_value name="$DADVT.$DADynamicNewsEnableNewsStorage" exact="true"/>
				<!-- Evolution -->
				<set_value name="$DADVT.$DAEvolutionInterval" exact="120"/>
				<set_value name="$DADVT.$DAEvolutionMaxLevel" exact="5"/>
				<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="0"/>
				<create_list name="$DAEvolutionCurrentEQMods"/>
				<set_value name="$DAEvolutionLastUpgradeTime" exact="0"/>
				<set_value name="$DADVT.$DAEvolutionEnableJobs" exact="true"/>
				<set_value name="$DADVT.$DAEvolutionMaxXenonJobs" exact="10"/>
				<set_value name="$DADVT.$DAEvolutionXenonFleetSize" exact="2"/>
				<set_value name="$DADVT.$DAEvolutionXenonFleetSizeName" exact="'daevoxen_medium'"/>
				<create_group groupname="$DADVT.$DAEvolutionXenonShipGroup"/>
				<create_group groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers"/>
				<create_list name="$DADVT.$DAEvolutionXenonShipTempList"/>
				<set_value name="$DAEvolutionXenonFleetJobs" exact="['xenon_carrier_patrol_daevoxen_small','xenon_destroyer_patrol_daevoxen_small','xenon_carrier_patrol_daevoxen_medium','xenon_destroyer_patrol_daevoxen_medium','xenon_carrier_patrol_daevoxen_large','xenon_destroyer_patrol_daevoxen_large']"/>
				<set_value name="$DADVT.$DAEvolutionDetailedDebug" exact="true"/>
				<set_value name="$DADVT.$DAEvolutionTotalShipsBuilt" exact="0"/>
				<set_value name="$DADVT.$DAEvolutionEnableUpgradeStations" exact="true"/>
				<set_value name="$DADVT.$DAEvolutionEnableFastOrder" exact="true"/>
				<!-- Fill -->
				<set_value name="$DADVT.$DAFillShipModsEnable" exact="true"/>
				<set_value name="$DAFillDelayAlpha" exact="2s"/>
				<set_value name="$DADVT.$DAFillCheckInterval" exact="60"/>
				<set_value name="$DAFillLastCheckTime" exact="0"/>
				<set_value name="$DADVT.$DAFillMaxTSWarePercent" exact="90.0"/>
				<set_value name="$DADVT.$DAFillMaxTSWarePercentAfter" exact="75.0"/>
				<set_value name="$DADVT.$DAFillMinTSWarePercent" exact="5.0"/>
				<set_value name="$DADVT.$DAFillMinTSWarePercentAfter" exact="10.0"/>
				<set_value name="$DADVT.$DAFillMinSYWarePercent" exact="5.0"/>
				<set_value name="$DADVT.$DAFillMinSYWarePercentAfter" exact="10.0"/>
				<set_value name="$DADVT.$DAFillDetailedDebug" exact="true"/>
				<!-- Jobs - Expeditions -->
				<set_value name="$DADVT.$DAJobsEXPFactions" exact="[faction.argon, faction.antigone, faction.paranid, faction.holyorder, faction.teladi, faction.split, faction.terran, faction.xenon]"/>
				<create_list name="$DAJobsEXPExcludedFactions"/>
				<set_value name="$DAJobsEXPTags" exact="[tag.daexpedition]"/>
				<set_value name="$DAJobsEXPEnemiesTable" exact="table[]"/>
				<set_value name="$DAJobsEXPAlliesTable" exact="table[]"/>
				<create_list name="$DAJobsEXPErrorFactions"/>
				<create_group groupname="$DAJobsEXPActiveExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPReadyExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPPreparingExpeditionFleets"/>
				<create_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol"/>
				<set_value name="$DADVT.$DAJobsEXPDetailedDebug" exact="true"/>
				<set_value name="$DAJobsEXPExpeditionJobs" exact="[]"/>
				<!-- Jobs - SmartSectorTags -->
				<set_value name="$DAJobsSSTCriticalSectors" exact="table[]"/>
				<set_value name="$DAJobsSSTCoreSectors" exact="table[]"/>
				<set_value name="$DAJobsSSTBorderSectors" exact="table[]"/>
				<set_value name="$DAJobsSSTContestedSectors" exact="table[]"/>
				<create_list name="$DAJobsSSTClaimspaceFactions"/>
				<create_list name="$DAJobsSSTAllSectorList"/>
				<set_value name="$DAJobsSSTJobsActivated" exact="table[]"/>
				<set_value name="$DADVT.$DAJobsSSTDetailedDebug" exact="true"/>
				<set_value name="$DADVT.$DAJobsSSTXtremelyDetailedDebug" exact="true"/>
				<set_value name="$DAJobsSSTPrerequisitesComplete" exact="true"/>
				<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas" exact="table[]"/>
				<!-- Gate -->
				<set_value name="$DADVT.$DAGateTrackedGates" exact="[]"/>
				<set_value name="$DADVT.$DAGateZoneMacros" exact="[macro.ZoneDAG3_Cluster_28_Sector001_macro,macro.ZoneDAG6_Cluster_41_Sector001_macro,macro.ZoneDAG3_Cluster_46_Sector001_macro,macro.ZoneDAG6_Cluster_08_Sector001_macro,macro.ZoneDAG5_Cluster_15_Sector001_macro,macro.ZoneDAG2_Cluster_43_Sector001_macro,macro.ZoneDAG6_Cluster_19_Sector001_macro,macro.ZoneDAG3_Cluster_09_Sector001_macro]"/>
				<do_if value="faction.split?">
					<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG5_Cluster_405_Sector001_macro,macro.ZoneDAG2_Cluster_418_Sector001_macro]"/>
				</do_if>
				<do_if value="faction.terran?">
					<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG1_Cluster_112_Sector001_macro,macro.ZoneDAG1_Cluster_112_Sector002_macro]"/>
				</do_if>
				<set_value name="$DADVT.$DAGateDetailedDebug" exact="true"/>
			</actions>
			<cues>
				<!-- New / Load Save Variable Verification -->
				<cue name="VerifyVariablesExist" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
					</conditions>
					<actions>
						<do_if value="not md.$DADynamicVarTable?">
							<set_value name="md.$DADynamicVarTable" exact="table[]"/>
							<debug_text text="'MOD: DADynamicUniverse -- %s -- Critical -- md.$DADynamicVarTable was missing. Will result in reset of all settings.'.[player.age]" context="false" filter="error"/>
						</do_if>
						<include_actions ref="LibraryCheckDynamicWarVariables"/>
						<include_actions ref="LibraryCheckDynamicNewsVariables"/>
						<include_actions ref="LibraryCheckEvolutionVariables"/>
						<include_actions ref="LibraryCheckFillVariables"/>
						<include_actions ref="LibraryCheckJobsEXPVariables"/>
						<include_actions ref="LibraryCheckJobsSSTVariables"/>
						<include_actions ref="LibraryCheckGateVariables"/>
					</actions>
				</cue>
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic War -->
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<cue name="TimerDynamicWarEvents" instantiate="true" checkinterval="5min" checktime="30min" comment="Timer 00/30 default">
					<conditions>
						<check_value value="player.age ge ($DADynamicWarLastEventTime + ($DADVT.$DADynamicWarInterval)min)"/>
						<check_value value="$DADVT.$DADynamicWarEnable"/>
					</conditions>
					<actions>
						<set_value name="$DADynamicWarLastEventTime" exact="player.age"/>
						<signal_cue_instantly cue="EventDynamicWarEventSelector"/>
					</actions>
				</cue>
				<cue name="TimerDynamicWarFavorsCue" instantiate="true" checkinterval="30min" checktime="30min" comment="Timer 00/30">
					<conditions>
						<check_value value="$DADVT.$DADynamicWarFavorsEnable"/>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventDynamicWarFavors"/>
					</actions>
				</cue>
				<cue name="TimerDynamicWarRelationsFix" instantiate="true" checkinterval="30min" checktime="1min" comment="Timer 01/31">
					<conditions>
						<check_value value="$DADVT.$DADynamicWarRelationsFixEnable"/>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventDynamicWarRelationsFix"/>
					</actions>
				</cue>
				<!-- Dynamic War -->
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<cue name="EventDynamicWarEventSelector" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- We will start by choosing an event -->
						<set_value name="$DADynamicWarLocWarEvent" exact="'Nothing'"/>
						<set_value name="$DADynamicWarLocEventFaction" exact="null"/>
						<set_value name="$DADynamicWarLocEventFactionTwo" exact="null"/>
						<set_value name="$DADynamicWarLocEnoughFactionsFound" exact="null"/>
						<!-- $DADVT.$DADynamicWarEventWeights {1} Bestie {2} BigBoost {3} Small Boost {4} Small Blow {5} Big Blow {6} Nemesis {7} Nothing -->
						<do_any>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Besties'" weight="$DADVT.$DADynamicWarEventWeights.{1}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'BigBoost'" weight="$DADVT.$DADynamicWarEventWeights.{2}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'SmallBoost'" weight="$DADVT.$DADynamicWarEventWeights.{3}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'SmallBlow'" weight="$DADVT.$DADynamicWarEventWeights.{4}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'BigBlow'" weight="$DADVT.$DADynamicWarEventWeights.{5}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Nemesis'" weight="$DADVT.$DADynamicWarEventWeights.{6}"/>
							<set_value name="$DADynamicWarLocWarEvent" exact="'Nothing'" weight="$DADVT.$DADynamicWarEventWeights.{7}"/>
						</do_any>
						<debug_text text="'MOD: DADynamicWar -- %s -- Event Chosen: %s'.[player.age,$DADynamicWarLocWarEvent]" context="false" filter="scripts" chance="$DADVT.$DADynamicWarDetailedDebug * 100"/>
						<!-- If nothing then we don't need to do any more processing -->
						<do_if value="$DADynamicWarLocWarEvent != 'Nothing'">
							<!-- We will now use the LibraryDynamicWarFindFactions library to get $DADynamicWarClaimspaceList -->
							<include_actions ref="LibraryDynamicWarFindFactions"/>
							<!-- This is to keep ALL the factions whose chance needs to be updated from $DADynamicWarClaimspaceList since it will be trimmed further down -->
							<set_value name="$DADynamicWarClaimspaceListFull" exact="[]"/>
							<append_list_elements name="$DADynamicWarClaimspaceListFull" other="$DADynamicWarClaimspaceList"/>
							<!-- Choose the highest chance faction, we will have plenty of RNG introduced in second faction selection -->
							<shuffle_list list="$DADynamicWarClaimspaceList"/>
							<do_for_each name="$DADynamicWarLocPossibleFactionOne" in="$DADynamicWarClaimspaceList" reverse="true">
								<!-- 20231227 Set initial value if not found in table -->
								<do_if value="not $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne}?">
									<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne}" exact="4"/>
								</do_if>
								<do_if value="$DADynamicWarLocEventFaction">
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne} gt $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}">
										<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne"/>
									</do_if>
									<do_elseif value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocPossibleFactionOne} == $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}">
										<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne" chance="50"/>
									</do_elseif>
									<do_else>
										<!-- Lower chance has to wait until $DADynamicWarLocEventFactionTwo -->
									</do_else>
								</do_if>
								<do_else>
									<set_value name="$DADynamicWarLocEventFaction" exact="$DADynamicWarLocPossibleFactionOne"/>
								</do_else>
							</do_for_each>
							<remove_value name="$DADynamicWarLocPossibleFactionOne"/>
							<!-- At this point we should have $DADynamicWarLocEventFaction so lets print it out for debug -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'MOD: DADynamicWar -- %s -- Faction selected: %s -- Chance: %s'.[player.age,$DADynamicWarLocEventFaction,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}]" context="false" filter="scripts"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- Event: %s -- $DADynamicWarLocEventFaction: %s -- Chance: %s'.[player.age,$DADynamicWarLocWarEvent,$DADynamicWarLocEventFaction,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarLocEventFaction}]" output="false" append="true"/>
							</do_if>
							<!-- Remove the selected faction from $DADynamicWarClaimspaceList -->
							<remove_from_list name="$DADynamicWarClaimspaceList" exact="$DADynamicWarLocEventFaction" multiple="true"/>
							<!-- Shuffle then Sort highest accumulated chance to lowest -->
							<shuffle_list list="$DADynamicWarClaimspaceList"/>
							<sort_list list="$DADynamicWarClaimspaceList" sortbyvalue="$DADVT.$DADynamicWarFactionChanceTable.{loop.element}" sortdescending="true"/>
							<!-- 20231227 Since I allow user to adjust count, adjusting code so it works with as little as two active factions -->
							<!-- Reduce to four highest options and cleanup -->
							<!-- DONE: Allow option to change number of factions selected since it has potential performance impact -->
							<do_if value="($DADynamicWarClaimspaceList.count gt $DADVT.$DADynamicWarPossibleFactionsPerEvent)">
								<resize_list list="$DADynamicWarClaimspaceList" count="$DADVT.$DADynamicWarPossibleFactionsPerEvent"/>
							</do_if>
							<do_if value="$DADynamicWarClaimspaceList.count ge 1">
								<!-- Lets print out the results for debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'%s -- Trimmed $DADynamicWarClaimspaceList -- Possible factions: %s'.[player.age,$DADynamicWarClaimspaceList.count]"/>
									<do_all exact="$DADynamicWarClaimspaceList.count" counter="$X">
										<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'\n  %s: %s -- Chance: %s'.[$X,$DADynamicWarClaimspaceList.{$X}.knownname,$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceList.{$X}}]" operation="add"/>
									</do_all>
									<debug_text text="'MOD: DADynamicWar -- %s'.[$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
									<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
									<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
									<remove_value name="$X"/>
								</do_if>
								<set_value name="$DADynamicWarLocEnoughFactionsFound" exact="true"/>
							</do_if>
							<do_elseif value="$DADVT.$DADynamicWarDetailedDebug">
								<!-- DONE: Code an escape from script -->
								<debug_text text="'MOD: DADynamicWar -- %s -- Not enough factions found to perform Dynamic War Script.'.[player.age]" context="false" filter="error"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- ERROR -- Not enough factions found to perform Dynamic War Script.'.[player.age]" output="false" append="true"/>
							</do_elseif>
							<do_if value="$DADynamicWarLocEnoughFactionsFound">
								<!-- Time to calculate all the other factors -->
								<!-- DONE: Change to a table for the values -->
								<set_value name="$DADynamicWarPossibleFactionTable" exact="table[]"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarClaimspaceList">
									<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight, {4} = Weight Start, {5} = Weight End -->
									<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}" exact="[1,1,0,0,0]"/>
								</do_for_each>
								<!-- Start with Mil Strength -->
								<!-- TODO: Adjust the way factors are implemented since it leads to very similar values // MilStrengthFactor is almost always min or max -->
								<include_actions ref="LibraryDynamicWarCalculateMilStrengthFactor"/>
								<!-- We have $DADynamicWarPossibleFactionTable.{$Faction}.{1} values for each $DADynamicWarClaimspaceList -->
								<include_actions ref="LibraryDynamicWarCalculateMisc"/>
								<!-- We have $DADynamicWarPossibleFactionTable.{$Faction}.{2} values for each $DADynamicWarClaimspaceList -->
								<!-- We can use $DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceList.{$Counter}} for chance -->
								<!-- Select $DADynamicWarFactionTwo -->
								<!-- Assign by non weighted random just to prevent possible errors if new code fails -->
								<set_value name="$DADynamicWarLocEventFactionTwo" exact="$DADynamicWarClaimspaceList.random"/>
								<!-- Start Debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'MOD: DADynamicWar -- %s -- FactionTwo Report'.[player.age]"/>
								</do_if>
								<!-- 20231228 New code portion -->
								<!-- DONE:	Once values are part of a table with faction as key, do_for_each key calculate values and add result to a variable, set value min 1 max total in variable, choose faction based on the randomized number
											Allows unknown number of factions to be processed and avoids the old disgusting code
											Table format: Key = Faction, ValueType = List, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight, {4} = Weight Start, {5} = Weight End
											Test if min float max float will result in a float or not, if not then round the min value and max values to int
								-->
								<!-- MAYBE: Weight each section? Chance * 50 + MilStrengthFactor * 50 + MiscFactor * 25? -->
								<set_value name="$DADynamicWarLocTotalWeight" exact="0.0"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E" comment="Not sure why I like using $E today, must be tired">
									<do_if value="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}?">
										<set_value name="$DADynamicWarLocMilStrengthValue" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{1}"/>
										<set_value name="$DADynamicWarLocMiscValue" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{2}"/>
										<set_value name="$DADynamicWarLocChanceValue" exact="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarPossibleFaction}"/>
										<set_value name="$DADynamicWarLocWeightValue" exact="(($DADynamicWarLocChanceValue)f * ($DADynamicWarLocMilStrengthValue) * ($DADynamicWarLocMiscValue) * 100.0)"/>
										<set_value name="$DADynamicWarLocExperimentalWeightValue" exact="(($DADynamicWarLocChanceValue * 50.0) + ($DADynamicWarLocMilStrengthValue * 50.0) + ($DADynamicWarLocMiscValue * 25.0))"/>
										<do_if value="$DADVT.$DADynamicWarDetailedDebug">
											<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  %s: %s -- Chance: %s -- MilStrength: %s -- MiscFactor: %s -- Weight: %s -- ExperimentalWeight: %s'.[$E,$DADynamicWarPossibleFaction,$DADynamicWarLocChanceValue,$DADynamicWarLocMilStrengthValue,$DADynamicWarLocMiscValue,$DADynamicWarLocWeightValue,$DADynamicWarLocExperimentalWeightValue]" operation="add"/>
										</do_if>
										<do_if value="$DADynamicWarLocWeightValue gt 0">
											<set_value name="$DADynamicWarLocTotalWeight" exact="$DADynamicWarLocWeightValue" operation="add"/>
											<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}" exact="$DADynamicWarLocWeightValue"/>
										</do_if>
										<do_elseif value="($DADynamicWarLocWeightValue == null) or ($DADynamicWarLocWeightValue le 0)">
											<remove_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}"/>
										</do_elseif>
									</do_if>
								</do_for_each>
								<!-- Now to handle setting up the ranges and select faction -->
								<set_value name="$DADynamicWarLocCurrentRange" exact="[0.0,0.0]"/>
								<set_value name="$DADynamicWarLocSelectedWeightValue" min="1.0" max="$DADynamicWarLocTotalWeight" comment="Technically selected faction but have no clue who it is"/>
								<do_for_each name="$DADynamicWarPossibleFaction" in="$DADynamicWarPossibleFactionTable.keys.list" counter="$E">
									<set_value name="$DADynamicWarLocSelectedFaction" exact="false"/>
									<!-- Will give exact value between two ranges to lower for less computation -->
									<do_if value="$E == 1">
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{4}" exact="1.0"/>
										<set_value name="$DADynamicWarLocCurrentRange" exact="[1,$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}]"/>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{5}" exact="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{4}" exact="$DADynamicWarLocCurrentRange.{2}"/>
										<set_value name="$DADynamicWarLocCurrentRange" exact="[$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocCurrentRange.{2} + $DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{3}]"/>
										<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarPossibleFaction}.{5}" exact="$DADynamicWarLocCurrentRange.{2}"/>
									</do_else>
									<!-- Figure out if faction was selected and break out if so -->
									<do_if value="($E == 1) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2})">
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_if>
									<do_elseif value="($E != 1) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2})">
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<do_elseif value="($E == $DADynamicWarPossibleFactionTable.keys.count) and ($DADynamicWarLocSelectedWeightValue ge $DADynamicWarLocCurrentRange.{1}) and ($DADynamicWarLocSelectedWeightValue le $DADynamicWarLocCurrentRange.{2}) and (not $DADynamicWarLocSelectedFaction)">
										<!-- The most valid calculation required -->
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<do_elseif value="($E == $DADynamicWarPossibleFactionTable.keys.count) and (not $DADynamicWarLocSelectedFaction)">
										<!-- Error // Will set last faction as selected but send error to debug // could escape the script since pity selection isn't ideal, but hopefully this doesn't error instead -->
										<debug_text text="'MOD: DADynamicWar -- %s -- ERROR SELECTING FACTIONTWO\n  %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[player.age,$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" context="false" filter="error"/>
										<set_value name="$DADynamicWarLocSelectedFaction" exact="true"/>
									</do_elseif>
									<!-- Debug -->
									<do_if value="$DADVT.$DADynamicWarDetailedDebug and (not $DADynamicWarLocSelectedFaction)">
										<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  %s: %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[$E,$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" operation="add"/>
									</do_if>
									<!-- Selected? -->
									<do_if value="$DADynamicWarLocSelectedFaction">
										<do_if value="$DADVT.$DADynamicWarDetailedDebug">
											<set_value name="$DADynamicWarLocFactionSelectionDebug" exact="'\n  FACTIONTWO SELECTED: %s -- WeightStart: %s -- WeightEnd: %s -- SelectedWeight: %s'.[$DADynamicWarPossibleFaction,$DADynamicWarLocCurrentRange.{1},$DADynamicWarLocCurrentRange.{2},$DADynamicWarLocSelectedWeightValue]" operation="add"/>
										</do_if>
										<set_value name="$DADynamicWarLocEventFactionTwo" exact="$DADynamicWarPossibleFaction"/>
										<break/>
									</do_if>
								</do_for_each>
								<!-- Print out result for debug -->
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<debug_text text="'%s'.[$DADynamicWarLocFactionSelectionDebug]" context="false" filter="scripts"/>
									<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s'.[$DADynamicWarLocFactionSelectionDebug]" output="false" append="true"/>
								</do_if>
								<!-- Cleanup -->
								<remove_value name="$DADynamicWarPossibleFactionTable"/>
								<remove_value name="$DADynamicWarLocFactionSelectionDebug"/>
								<remove_value name="$DADynamicWarLocMilStrengthValue"/>
								<remove_value name="$DADynamicWarLocMiscValue"/>
								<remove_value name="$DADynamicWarLocChanceValue"/>
								<remove_value name="$DADynamicWarLocWeightValue"/>
								<remove_value name="$DADynamicWarLocExperimentalWeightValue"/>
								<remove_value name="$DADynamicWarLocTotalWeight"/>
								<remove_value name="$DADynamicWarLocCurrentRange"/>
								<remove_value name="$DADynamicWarLocSelectedWeightValue"/>
								<remove_value name="$DADynamicWarLocSelectedFaction"/>
								<!-- 20231229 Past midnight, This shit isn't ugly anymore at least to my tired ass -->
								<!-- Update chance factor -->
								<!-- We have $DADynamicWarLocEventFaction, $DADynamicWarLocEventFactionTwo, and $DADynamicWarClaimspaceListFull -->
								<include_actions ref="LibraryDynamicWarUpdateChance"/>
								<!-- Remove $DADynamicWarClaimspaceListFull since it's purpose is completed -->
								<remove_value name="$DADynamicWarClaimspaceListFull"/>
								<!-- Execute the relation changes -->
								<!-- We have a selected faction for $DADynamicWarLocEventFaction and $DADynamicWarLocEventFactionTwo -->
								<!-- Wouldn't hurt to add an extra error check here -->
								<do_if value="$DADynamicWarLocEventFaction and $DADynamicWarLocEventFactionTwo">
									<include_actions ref="LibraryDynamicWarEventExecute"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DADynamicWar -- %s -- Error Occured ($DADynamicWarLocEventFaction or $DADynamicWarLocEventFactionTwo missing): %s -- %s'.[player.age,$DADynamicWarLocEventFaction,$DADynamicWarLocEventFactionTwo]" context="false" filter="error"/>
								</do_else>
							</do_if>
							<do_elseif value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'MOD: DADynamicWar -- %s -- Aborted Script. Not enough factions.'.[player.age]" context="false" filter="error"/>
								<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- ERROR -- Aborted Script. Not enough factions.'.[player.age]" output="false" append="true"/>
							</do_elseif>
							<remove_value name="$DADynamicWarLocEnoughFactionsFound"/>
						</do_if>
						<do_elseif value="($DADynamicWarLocWarEvent == 'Nothing') and $DADVT.$DADynamicWarDetailedDebug">
							<debug_to_file name="'EventDynamicWarEventSelector'" directory="'DynamicWar'" text="'%s -- Event: %s'.[player.age,$DADynamicWarLocWarEvent]" output="false" append="true"/>
						</do_elseif>
						<!-- Clean up since this round is done -->
						<remove_value name="$DADynamicWarLocWarEvent"/>
						<remove_value name="$DADynamicWarLocEventFaction"/>
						<remove_value name="$DADynamicWarLocEventFactionTwo"/>
						<remove_value name="$DADynamicWarPossibleFactionMilStrengthList"/>
						<remove_value name="$DADynamicWarPossibleFactionMiscModifierList"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarFavors" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- Check player friendly factions -->
						<set_value name="$DADynFavFactionList" exact="[]"/>
						<set_value name="$DADynFavEconomicList" exact="[]"/>
						<set_value name="$DADynFavVisitorList" exact="[]"/>
						<set_value name="$DADynFavExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor, faction.xenon]"/>
						<set_value name="$DADynFavTerranFactions" exact="[faction.terran, faction.pioneers, faction.yaki]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DADynFavFactionList"/>
						<get_factions_by_tag tag="tag.economic" result="$DADynFavEconomicList"/>
						<get_factions_by_tag tag="tag.visitor" result="$DADynFavVisitorList"/>
						<remove_from_list name="$DADynFavEconomicList" list="$DADynFavFactionList" multiple="true"/>
						<remove_from_list name="$DADynFavTerranFactions" list="$DADynFavFactionList" multiple="true"/>
						<append_list_elements name="$DADynFavFactionList" other="$DADynFavEconomicList"/>
						<append_list_elements name="$DADynFavFactionList" other="$DADynFavTerranFactions"/>
						<remove_from_list name="$DADynFavFactionList" list="$DADynFavVisitorList" multiple="true"/>
						<remove_from_list name="$DADynFavFactionList" list="$DADynFavExcludedFactions" multiple="true"/>
						<do_all exact="$DADynFavFactionList.count" counter="$B" reverse="true">
							<do_if value="($DADynFavFactionList.{$B} == null) or ($DADynFavFactionList.{$B}.isactive != true)">
								<remove_value name="$DADynFavFactionList.{$B}"/>
							</do_if>
						</do_all>
						<sort_list list="$DADynFavFactionList" sortbyvalue="loop.element.knownname"/>
						<!-- Add +1 favor if above threshold up to 3 favors per -->
						<do_for_each name="$DADynFavFavorFaction" in="$DADynFavFactionList">
							<do_if value="($DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}?) and ($DADynFavFavorFaction != faction.player)">
								<!-- Update our entry -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="[$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction} + 1,3].min"/>
								</do_if>
							</do_if>
							<do_elseif value="($DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}?) and (@$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction} == null) and ($DADynFavFavorFaction != faction.player)">
								<!-- We have the top level table, but not the specific entry -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="0"/>
								</do_else>
							</do_elseif>
							<do_elseif value="($DADynFavFavorFaction != faction.player)">
								<!-- We have nothing sadface -->
								<do_if value="$DADynFavFavorFaction.relationto.{faction.player} gt 0.1">
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="1"/>
								</do_if>
								<do_else>
									<set_value name="$DADVT.$DADynamicWarFavors.{$DADynFavFavorFaction}" exact="0"/>
								</do_else>
							</do_elseif>
						</do_for_each>
						<set_value name="$DADVT.$DADynamicWarFavors.{faction.player}" exact="0"/>
						<remove_value name="$DADynFavFavorFaction"/>
						<remove_value name="$DADynFavFactionList"/>
						<remove_value name="$DADynFavEconomicList"/>
						<remove_value name="$DADynFavVisitorList"/>
						<remove_value name="$DADynFavExcludedFactions"/>
						<remove_value name="$DADynFavTerranFactions"/>
					</actions>
				</cue>
				<cue name="EventDynamicWarRelationsFix" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- 1.0 = 30		0.32 = 25		0.1 = 20		0.032 = 15		0.01 = 10		0.0032 = 5 -->
						<!-- Hard coded excluded factions -->
						<set_value name="$DARelFixLocExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
						<!-- Find claimspace factions -->
						<set_value name="$DARelFixLocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DARelFixLocClaimspaceList"/>
						<!-- Find peaceful factions -->
						<set_value name="$DARelFixLocPeacefulList" exact="[]"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DARelFixLocPeacefulList"/>
						<!-- Find visitor factions -->
						<set_value name="$DARelFixLocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$DARelFixLocVisitorList"/>
						<!-- Remove excluded, peaceful, and visitors from claimspace list -->
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocExcludedFactions" multiple="true"/>
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocPeacefulList" multiple="true"/>
						<remove_from_list name="$DARelFixLocClaimspaceList" list="$DARelFixLocVisitorList" multiple="true"/>
						<!-- Maximum AI:AI relations should be $DADVT.$DADynamicWarRelationsAILimit due to jobs -->
						<do_all exact="$DARelFixLocClaimspaceList.count" counter="$a">
							<set_value name="$DARelFixLocFactionOne" exact="$DARelFixLocClaimspaceList.{$a}"/>
							<do_all exact="$DARelFixLocClaimspaceList.count" counter="$b">
								<set_value name="$DARelFixLocFactionTwo" exact="$DARelFixLocClaimspaceList.{$b}"/>
								<!-- 20231227 Ignoring if faction is police faction of the other -->
								<do_if value="($DARelFixLocFactionOne != $DARelFixLocFactionTwo) and ($DARelFixLocFactionOne.relationto.{$DARelFixLocFactionTwo} gt $DADVT.$DADynamicWarRelationsAILimit) and ($DARelFixLocFactionOne.policefaction != $DARelFixLocFactionTwo) and ($DARelFixLocFactionTwo.policefaction != $DARelFixLocFactionOne)">
									<set_faction_relation faction="$DARelFixLocFactionOne" otherfaction="$DARelFixLocFactionTwo" value="$DADVT.$DADynamicWarRelationsAILimit"/>
									<set_faction_relation faction="$DARelFixLocFactionTwo" otherfaction="$DARelFixLocFactionOne" value="$DADVT.$DADynamicWarRelationsAILimit"/>
									<debug_text text="'MOD: DeadAirDynamicWars -- Fixed relations between %s and %s. New relation is %s.'.[$DARelFixLocFactionOne.knownname,$DARelFixLocFactionTwo.knownname,$DARelFixLocFactionOne.relation.{$DARelFixLocFactionOne.relationto.{$DARelFixLocFactionTwo}}.uivalue]" context="false" filter="scripts"/>
								</do_if>
							</do_all>
						</do_all>
						<!-- Match Ministry Relations to Teladi -->
						<do_all exact="$DARelFixLocClaimspaceList.count" counter="$c">
							<set_value name="$DARelFixLocOtherFaction" exact="$DARelFixLocClaimspaceList.{$c}"/>
							<do_if value="(faction.teladi.relationto.{$DARelFixLocOtherFaction} != faction.ministry.relationto.{$DARelFixLocOtherFaction}) and ($DARelFixLocOtherFaction != faction.teladi) and ($DARelFixLocOtherFaction != faction.ministry)">
								<set_faction_relation faction="faction.ministry" otherfaction="$DARelFixLocOtherFaction" value="faction.teladi.relationto.{$DARelFixLocOtherFaction}"/>
								<set_faction_relation faction="$DARelFixLocOtherFaction" otherfaction="faction.ministry" value="faction.teladi.relationto.{$DARelFixLocOtherFaction}"/>
								<debug_text text="'MOD: DeadAirDynamicWars -- Fixed relations between %s and %s. New relation is %s.'.[faction.ministry.knownname,$DARelFixLocOtherFaction.knownname,faction.ministry.relation.{faction.ministry.relationto.{$DARelFixLocOtherFaction}}.uivalue]" context="false" filter="scripts"/>
							</do_if>
						</do_all>
						<remove_value name="$DARelFixLocFactionOne"/>
						<remove_value name="$DARelFixLocFactionTwo"/>
						<remove_value name="$DARelFixLocOtherFaction"/>
						<remove_value name="$DARelFixLocExcludedFactions"/>
						<remove_value name="$DARelFixLocClaimspaceList"/>
						<remove_value name="$DARelFixLocPeacefulList"/>
						<remove_value name="$DARelFixLocVisitorList"/>
					</actions>
				</cue>
				<!-- Dynamic War -->
				<!-- Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries -->
				<library name="LibraryDynamicWarFindFactions">
					<actions>
						<!-- 20231215 Reworking this whole shit show -->
						<!-- 20231215 Set Variables // Gather lists // Update shared // Remove unwanted // Cleanup // End Result: $DADynamicWarClaimspaceList, $DADynamicWarExcludedList, updated $DADynamicWarLockedRelationFactions -->
						<!-- $DADVT.$DADynamicWarDisabledFactions is adjustable // $DADVT.$DADynamicWarPermaExcludedFactions is hard coded override // $DADynamicWarClaimspaceList and $DADynamicWarExcludedList are used in calculations -->
						<!-- Set Variables -->
						<set_value name="$DADynamicWarClaimspaceList" exact="[]"/>
						<set_value name="$DADynamicWarExcludedList" exact="[]"/>
						<set_value name="$DADynamicWarLocPeacefulList" exact="[]"/>
						<set_value name="$DADynamicWarLocVisitorList" exact="[]"/>
						<set_value name="$DADynamicWarLocUnprocessedList" exact="[]"/>
						<!-- Use: $DADVT.$DADynamicWarDisabledFactions -->
						<!-- Use: $DADVT.$DADynamicWarPermaExcludedFactions -->
						<get_factions_by_tag tag="tag.claimspace" result="$DADynamicWarClaimspaceList"/>
						<get_factions_by_tag tag="tag.peaceful" result="$DADynamicWarLocPeacefulList"/>
						<get_factions_by_tag tag="tag.visitor" result="$DADynamicWarLocVisitorList"/>
						<!-- Print out an unprocessed list for debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'$DADynamicWarClaimspaceList Unprocessed:'"/>
							<do_all exact="$DADynamicWarClaimspaceList.count" counter="$Z">
								<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="$DADynamicWarLocClaimspaceListDebug + ' ' + $Z + ' ' + $DADynamicWarClaimspaceList.{$Z}.knownname + '--'"/>
							</do_all>
							<debug_text text="'MOD: DADynamicWar -- %s -- %s '.[player.age,$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="' '" output="false" append="true"/>
							<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
							<remove_value name="$Z"/>
						</do_if>
						<!-- Update locked relations or inactive factions // will not catch factions that do not claimspace -->
						<do_for_each name="$DADynamicWarLocFaction" in="$DADynamicWarClaimspaceList" reverse="true">
							<do_if value="$DADynamicWarLocFaction == null">
								<remove_from_list name="$DADynamicWarClaimspaceList" exact="$DADynamicWarLocFaction" multiple="true"/>
							</do_if>
							<do_else>
								<do_if value="($DADynamicWarLocFaction.isrelationlocked) and (not $DADynamicWarLockedRelationFactions.indexof.{$DADynamicWarLocFaction})">
									<append_to_list name="$DADynamicWarLockedRelationFactions" exact="$DADynamicWarLocFaction"/>
								</do_if>
								<do_elseif value="(not $DADynamicWarLocFaction.isrelationlocked) and ($DADynamicWarLockedRelationFactions.indexof.{$DADynamicWarLocFaction})">
									<remove_from_list name="$DADynamicWarLockedRelationFactions" exact="$DADynamicWarLocFaction" multiple="true"/>
								</do_elseif>
								<do_if value="(not $DADynamicWarLocFaction.isactive) and (not $DADynamicWarInactiveFactions.indexof.{$DADynamicWarLocFaction})">
									<append_to_list name="$DADynamicWarInactiveFactions" exact="$DADynamicWarLocFaction"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocFaction.isactive) and ($DADynamicWarInactiveFactions.indexof.{$DADynamicWarLocFaction})">
									<remove_from_list name="$DADynamicWarInactiveFactions" exact="$DADynamicWarLocFaction" multiple="true"/>
								</do_elseif>
							</do_else>
						</do_for_each>
						<!-- Remove excluded/locked/peaceful/visitor lists then check isactive // This does not affect menu options -->
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADVT.$DADynamicWarDisabledFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADVT.$DADynamicWarPermaExcludedFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLockedRelationFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarInactiveFactions" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLocPeacefulList" multiple="true"/>
						<remove_from_list name="$DADynamicWarClaimspaceList" list="$DADynamicWarLocVisitorList" multiple="true"/>
						<!-- Removed disabled/permaexcluded/locked relations/inactive factions/peaceful/visitors -->
						<!-- If player decides to remove buccaneers from disabled list that is on them -->
						<!-- $DADynamicWarClaimspaceList should only contain valid factions -->
						<!-- Combine lists of unwanted for $DADynamicWarExcludedList -->
						<!-- Add into a temp, do_for_each on temp, add to $DADynamicWarExcludedList -->
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADVT.$DADynamicWarDisabledFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADVT.$DADynamicWarPermaExcludedFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLockedRelationFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarInactiveFactions"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLocPeacefulList"/>
						<append_list_elements name="$DADynamicWarLocUnprocessedList" other="$DADynamicWarLocVisitorList"/>
						<do_for_each name="$DADynamicWarLocFaction" in="$DADynamicWarLocUnprocessedList">
							<do_if value="not $DADynamicWarExcludedList.indexof.{$DADynamicWarLocFaction}">
								<append_to_list name="$DADynamicWarExcludedList" exact="$DADynamicWarLocFaction"/>
							</do_if>
						</do_for_each>
						<!-- Remove unneeded lists -->
						<remove_value name="$DADynamicWarLocPeacefulList"/>
						<remove_value name="$DADynamicWarLocVisitorList"/>
						<remove_value name="$DADynamicWarLocUnprocessedList"/>
						<!-- $DADynamicWarClaimspaceList // $DADynamicWarExcludedList are usable in later portion of dynamic wars -->
						<!-- Print out a processed list for debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="'$DADynamicWarClaimspaceList Processed:'"/>
							<do_all exact="$DADynamicWarClaimspaceList.count" counter="$Z">
								<set_value name="$DADynamicWarLocClaimspaceListDebug" exact="$DADynamicWarLocClaimspaceListDebug + ' ' + $Z + ' ' + $DADynamicWarClaimspaceList.{$Z}.knownname + '--'"/>
							</do_all>
							<debug_text text="'MOD: DADynamicWar -- %s -- %s '.[player.age,$DADynamicWarLocClaimspaceListDebug]" context="false" filter="scripts"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="$DADynamicWarLocClaimspaceListDebug" output="false" append="true"/>
							<debug_to_file name="'DynamicWarEventSelector'" directory="'DynamicWar'" text="' '" output="false" append="true"/>
							<remove_value name="$DADynamicWarLocClaimspaceListDebug"/>
							<remove_value name="$Z"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateMilStrengthFactor">
					<actions>
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocWarEvent?">
							<!-- We need to calculate the first factions strength -->
							<!-- 20231215 Improving calulation to consider ship sizes -->
							<set_value name="$DADynamicWarLocEventFactionMilStrength" exact="0"/>
							<find_ship_by_true_owner name="$DADynamicWarLocEventFactionMilShips" space="player.galaxy" multiple="true" faction="$DADynamicWarLocEventFaction" masstraffic="false" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight"/>
							<do_for_each name="$DADynamicWarLocShip" in="$DADynamicWarLocEventFactionMilShips">
								<set_value name="$DADynamicWarLocEventFactionMilStrength" exact="$DADynamicWarLocShip.threatscore" operation="add"/>
							</do_for_each>
							<find_sector name="$DADynamicWarLocEventFactionSectors" space="player.galaxy" multiple="true" owner="$DADynamicWarLocEventFaction"/>
							<!-- begin forming debug message -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'MOD: DADynamicWar -- %s -- MilStrengthFactor Report'.[player.age]"/>
								<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'\n  Event Faction: %s -- ShipCount: %s -- MilStrength: %s -- SectorCount: %s'.[$DADynamicWarLocEventFaction,$DADynamicWarLocEventFactionMilShips.count,$DADynamicWarLocEventFactionMilStrength,$DADynamicWarLocEventFactionSectors.count]" operation="add"/>
							</do_if>
							<!-- 20231228 Reducing repeated code like a madman -->
							<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight Start, {4} = Weight End -->
							<do_for_each name="$DADynamicWarLocPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E">
								<set_value name="$DADynamicWarLocPossibleFactionMilStrength" exact="0"/>
								<find_ship_by_true_owner name="$DADynamicWarLocPossibleFactionMilShips" space="player.galaxy" multiple="true" faction="$DADynamicWarLocPossibleFaction" masstraffic="false" class="[class.ship_xl, class.ship_l, class.ship_m, class.ship_s]" primarypurpose="purpose.fight"/>
								<do_for_each name="$DADynamicWarLocShip" in="$DADynamicWarLocPossibleFactionMilShips">
									<set_value name="$DADynamicWarLocPossibleFactionMilStrength" exact="$DADynamicWarLocShip.threatscore" operation="add"/>
								</do_for_each>
								<find_sector name="$DADynamicWarLocPossibleFactionSectors" space="player.galaxy" multiple="true" owner="$DADynamicWarLocPossibleFaction"/>
								<do_if value="($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost')">
									<!-- If possible faction is weaker, they will have a higher chance -->
									<!-- Factions want to be friends with weaker -->
									<set_value name="$DADynamicWarLocMilComparisonValue" exact="($DADynamicWarLocEventFactionMilStrength)f / [($DADynamicWarLocPossibleFactionMilStrength)f,1.0].max"/>
									<set_value name="$DADynamicWarLocSectorComparisonValue" exact="($DADynamicWarLocEventFactionSectors.count)f / [($DADynamicWarLocPossibleFactionSectors.count)f,1.0].max"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis')">
									<!-- If possible faction is stronger, they will have a higher chance -->
									<!-- Factions want to be enemies with stronger -->
									<set_value name="$DADynamicWarLocMilComparisonValue" exact="($DADynamicWarLocPossibleFactionMilStrength)f / [($DADynamicWarLocEventFactionMilStrength)f,1.0].max"/>
									<set_value name="$DADynamicWarLocSectorComparisonValue" exact="($DADynamicWarLocPossibleFactionSectors.count)f / [($DADynamicWarLocEventFactionSectors.count)f,1.0].max"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocMilStrengthFinal" exact="[[($DADynamicWarLocMilComparisonValue * $DADynamicWarLocSectorComparisonValue)f,0.25].max,1.75].min"/>
								<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarLocPossibleFaction}.{1}" exact="$DADynamicWarLocMilStrengthFinal"/>
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocMilStrengthDebug" exact="'\n  %s: %s -- ShipCount: %s -- MilStrength: %s -- SectorCount: %s -- MilComparisonValue: %s -- SectorComparisonValue: %s -- MilStrengthFactor: %s'.[$E,$DADynamicWarLocPossibleFaction,$DADynamicWarLocPossibleFactionMilShips.count,$DADynamicWarLocPossibleFactionMilStrength,$DADynamicWarLocPossibleFactionSectors.count,$DADynamicWarLocMilComparisonValue,$DADynamicWarLocSectorComparisonValue,$DADynamicWarLocMilStrengthFinal]" operation="add"/>
								</do_if>
								<remove_value name="$DADynamicWarLocPossibleFactionMilShips"/>
								<remove_value name="$DADynamicWarLocPossibleFactionSectors"/>
								<remove_value name="$DADynamicWarLocPossibleFactionMilStrength"/>
								<remove_value name="$DADynamicWarLocMilComparisonValue"/>
								<remove_value name="$DADynamicWarLocSectorComparisonValue"/>
								<remove_value name="$DADynamicWarLocMilStrengthFinal"/>
							</do_for_each>
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'%s'.[$DADynamicWarLocMilStrengthDebug]" context="false" filter="scripts"/>
								<debug_to_file name="'LibraryDynamicWarCalculateMilStrengthFactor'" directory="'DynamicWar'" text="$DADynamicWarLocMilStrengthDebug" output="false" append="true"/>
							</do_if>
							<!-- Clean up -->
							<remove_value name="$DADynamicWarLocEventFactionMilShips"/>
							<remove_value name="$DADynamicWarLocEventFactionSectors"/>
							<remove_value name="$DADynamicWarLocEventFactionMilStrength"/>
							<remove_value name="$DADynamicWarLocMilStrengthDebug"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateMisc">
					<actions>
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocWarEvent?">
							<!-- 20231215 Reduced repeated code // added factor to shared table for options menu -->
							<!-- The following are min: 1.0 - $Factor // max: 1.0 + $Factor -->
							<set_value name="$DADynamicWarLocPrimaryRaceMinModifier" exact="1.0 - $DADVT.$DADynamicWarPrimaryRaceModifier"/>
							<set_value name="$DADynamicWarLocPrimaryRaceMaxModifier" exact="1.0 + $DADVT.$DADynamicWarPrimaryRaceModifier"/>
							<set_value name="$DADynamicWarLocCurrentRelationsMinFactor" exact="1.0 - $DADVT.$DADynamicWarCurrentRelationsModifier"/>
							<set_value name="$DADynamicWarLocCurrentRelationsMaxFactor" exact="1.0 + $DADVT.$DADynamicWarCurrentRelationsModifier"/>
							<set_value name="$DADynamicWarLocCollectiveRelationsMinModifier" exact="1.0 - $DADVT.$DADynamicWarCollectiveRelationsModifier"/>
							<set_value name="$DADynamicWarLocCollectiveRelationsMaxModifier" exact="1.0 + $DADVT.$DADynamicWarCollectiveRelationsModifier"/>
							<!-- begin forming debug message -->
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<set_value name="$DADynamicWarLocMiscDebug" exact="'MOD: DADynamicWar -- %s -- MiscFactor Report'.[player.age]"/>
							</do_if>
							<!-- 20231215 Enough cleanup for now -->
							<!-- 20231228 Reducing repeated code like a madman // not as pretty as MilStrengthFactor -->
							<!-- Key = Faction, {1} = MilStrengthFactor, {2} = MiscFactor, {3} = Weight Start, {4} = Weight End -->
							<do_for_each name="$DADynamicWarLocPossibleFaction" in="$DADynamicWarClaimspaceList" counter="$E">
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="1.0"/>
								<!-- Compare .primaryrace -->
								<set_value name="$DADynamicWarLocRaceValue" exact="1.0" comment="1 means no change"/>
								<do_if value="($DADynamicWarLocEventFaction.primaryrace == $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMaxModifier"/>
								</do_if>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace != $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMinModifier"/>
								</do_elseif>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace != $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMaxModifier"/>
								</do_elseif>
								<do_elseif value="($DADynamicWarLocEventFaction.primaryrace == $DADynamicWarLocPossibleFaction.primaryrace) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocRaceValue" exact="$DADynamicWarLocPrimaryRaceMinModifier"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocRaceValue"/>
								<!-- Compare current relations -->
								<set_value name="$DADynamicWarLocRelationValue" exact="1.0" comment="1 means no change"/>
								<do_if value="($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost')">
									<set_value name="$DADynamicWarLocRelationValue" exact="[[($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} + 1.0), $DADynamicWarLocCurrentRelationsMinFactor].max,$DADynamicWarLocCurrentRelationsMaxFactor].min"/>
									<!-- Reduce chance of selecting faction when no change actually occurs -->
									<do_if value="($DADVT.$DADynamicWarRelationsFixEnable) and ($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} ge $DADVT.$DADynamicWarRelationsAILimit)">
										<set_value name="$DADynamicWarLocRelationValue" exact="0.05"/>
									</do_if>
								</do_if>
								<do_elseif value="($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis')">
									<set_value name="$DADynamicWarLocRelationValue" exact="[[(-1.0 * $DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} + 1.0), $DADynamicWarLocCurrentRelationsMinFactor].max,$DADynamicWarLocCurrentRelationsMaxFactor].min"/>
									<!-- Reduce chance of selecting faction when no change actually occurs -->
									<do_if value="($DADVT.$DADynamicWarRelationsFixEnable) and ($DADynamicWarLocEventFaction.relationto.{$DADynamicWarLocPossibleFaction} le -1.0)">
										<set_value name="$DADynamicWarLocRelationValue" exact="0.05"/>
									</do_if>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocRelationValue"/>
								<!-- Compare friends and enemies -->
								<!-- Ints are fine for common friends enemies -->
								<set_value name="$DADynamicWarLocCommonEnemies" exact="0"/>
								<set_value name="$DADynamicWarLocCommonFriends" exact="0"/>
								<!-- Only count close friends and actual enemies -->
								<get_factions_by_relation relation="killmilitary" faction="$DADynamicWarLocEventFaction" result="$DADynamicWarLocEventFactionEnemiesList"/>
								<get_factions_by_relation relation="killmilitary" faction="$DADynamicWarLocPossibleFaction" result="$DADynamicWarLocPossibleFactionEnemiesList"/>
								<get_factions_by_relation relation="member" faction="$DADynamicWarLocEventFaction" result="$DADynamicWarLocEventFactionFriendsList"/>
								<get_factions_by_relation relation="member" faction="$DADynamicWarLocPossibleFaction" result="$DADynamicWarLocPossibleFactionFriendsList"/>
								<!-- Remove $DADynamicWarExcludedList because if they aren't subject to this mod, they don't matter -->
								<!-- $DADynamicWarExcludedList includes perma excluded, user selected excluded, visitor, non claimspace, inactive factions, and locked relation factions -->
								<remove_from_list name="$DADynamicWarLocEventFactionEnemiesList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocPossibleFactionEnemiesList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocEventFactionFriendsList" list="$DADynamicWarExcludedList" multiple="true"/>
								<remove_from_list name="$DADynamicWarLocPossibleFactionFriendsList" list="$DADynamicWarExcludedList" multiple="true"/>
								<!-- count common enemies factor-->
								<do_for_each name="$DADynamicWarLocEnemyFaction" in="$DADynamicWarLocEventFactionEnemiesList">
									<do_if value="$DADynamicWarLocPossibleFactionEnemiesList.indexof.{$DADynamicWarLocEnemyFaction}">
										<set_value name="$DADynamicWarLocCommonEnemies" exact="1" operation="add"/>
									</do_if>
									<do_if value="$DADynamicWarLocPossibleFactionFriendsList.indexof.{$DADynamicWarLocEnemyFaction}">
										<set_value name="$DADynamicWarLocCommonEnemies" exact="1" operation="subtract"/>
									</do_if>
								</do_for_each>
								<!-- count common friends factor-->
								<do_for_each name="$DADynamicWarLocFriendFaction" in="$DADynamicWarLocEventFactionFriendsList">
									<do_if value="$DADynamicWarLocPossibleFactionFriendsList.indexof.{$DADynamicWarLocFriendFaction}">
										<set_value name="$DADynamicWarLocCommonFriends" exact="1" operation="add"/>
									</do_if>
									<do_if value="$DADynamicWarLocPossibleFactionEnemiesList.indexof.{$DADynamicWarLocFriendFaction}">
										<set_value name="$DADynamicWarLocCommonFriends" exact="1" operation="subtract"/>
									</do_if>
								</do_for_each>
								<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								<do_if value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) gt 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
								</do_if>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) == 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) lt 0) and (($DADynamicWarLocWarEvent == 'BigBoost') or ($DADynamicWarLocWarEvent == 'Besties') or ($DADynamicWarLocWarEvent == 'SmallBoost'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMinModifier"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) gt 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMinModifier"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) == 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="1.0" comment="1 means no change"/>
								</do_elseif>
								<do_elseif value="(($DADynamicWarLocCommonFriends + $DADynamicWarLocCommonEnemies) lt 0) and (($DADynamicWarLocWarEvent == 'SmallBlow') or ($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis'))">
									<set_value name="$DADynamicWarLocCollectiveRelationValue" exact="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
								</do_elseif>
								<set_value name="$DADynamicWarLocPossibleFactionMiscModifier" exact="$DADynamicWarLocPossibleFactionMiscModifier * $DADynamicWarLocCollectiveRelationValue"/>
								<!-- Final value section -->
								<set_value name="$DADynamicWarPossibleFactionTable.{$DADynamicWarLocPossibleFaction}.{2}" exact="$DADynamicWarLocPossibleFactionMiscModifier"/>
								<do_if value="$DADVT.$DADynamicWarDetailedDebug">
									<set_value name="$DADynamicWarLocMiscDebug" exact="'\n  %s: %s -- RaceValue: %s -- RelationValue: %s -- CommonEnemies: %s -- CommonFriends: %s -- CollectiveRelationValue: %s -- MiscModifier: %s'.[$E,$DADynamicWarLocPossibleFaction,$DADynamicWarLocRaceValue,$DADynamicWarLocRelationValue,$DADynamicWarLocCommonEnemies,$DADynamicWarLocCommonFriends,$DADynamicWarLocCollectiveRelationValue,$DADynamicWarLocPossibleFactionMiscModifier]" operation="add"/>
								</do_if>
								<remove_value name="$DADynamicWarLocPossibleFactionMiscModifier"/>
								<remove_value name="$DADynamicWarLocRaceValue"/>
								<remove_value name="$DADynamicWarLocRelationValue"/>
								<remove_value name="$DADynamicWarLocCommonEnemies"/>
								<remove_value name="$DADynamicWarLocCommonFriends"/>
								<remove_value name="$DADynamicWarLocCollectiveRelationValue"/>
							</do_for_each>
							<do_if value="$DADVT.$DADynamicWarDetailedDebug">
								<debug_text text="'%s'.[$DADynamicWarLocMiscDebug]" context="false" filter="scripts"/>
								<debug_to_file name="'LibraryDynamicWarCalculateMisc'" directory="'DynamicWar'" text="$DADynamicWarLocMiscDebug" output="false" append="true"/>
							</do_if>
							<!-- Cleanup -->
							<remove_value name="$DADynamicWarLocPrimaryRaceMinModifier"/>
							<remove_value name="$DADynamicWarLocPrimaryRaceMaxModifier"/>
							<remove_value name="$DADynamicWarLocCurrentRelationsMinFactor"/>
							<remove_value name="$DADynamicWarLocCurrentRelationsMaxFactor"/>
							<remove_value name="$DADynamicWarLocCollectiveRelationsMinModifier"/>
							<remove_value name="$DADynamicWarLocCollectiveRelationsMaxModifier"/>
							<remove_value name="$DADynamicWarLocMiscDebug"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarUpdateChance">
					<actions>
						<!-- use $DADynamicWarClaimspaceListFull from above -->
						<!-- update chance only after factions have been selected -->
						<do_if value="$DADynamicWarLocEventFaction? and $DADynamicWarLocEventFactionTwo?">
							<do_all exact="$DADynamicWarClaimspaceListFull.count" counter="$M">
								<!-- If faction was selected, they will have their chance lowered by 9 with a minimum of 1 -->
								<!-- 20231227 Reducing impact of accumulated chance value to 1-10 // Start value is 4 -->
								<do_if value="($DADynamicWarClaimspaceListFull.{$M} == $DADynamicWarLocEventFaction) or ($DADynamicWarClaimspaceListFull.{$M} == $DADynamicWarLocEventFactionTwo)">
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}?">
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="[$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}} - 9, 1].max"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="1"/>
									</do_else>
								</do_if>
								<!-- If faction wasn't selected, they will have their chance increased by 1 up to a max of 10 -->
								<do_else>
									<do_if value="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}?">
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="[$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}} + 1, 10].min"/>
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicWarFactionChanceTable.{$DADynamicWarClaimspaceListFull.{$M}}" exact="5"/>
									</do_else>
								</do_else>
							</do_all>
						</do_if>
						<!-- Nothing is expected back, this is only for updating the accumlating chance -->
					</actions>
				</library>
				<library name="LibraryDynamicWarEventExecute">
					<actions>
						<set_value name="$DADynamicWarFactionOne" exact="$DADynamicWarLocEventFaction"/>
						<set_value name="$DADynamicWarFactionTwo" exact="$DADynamicWarLocEventFactionTwo"/>
						<set_value name="$DADynamicWarOldRelation" exact="$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}"/>
						<do_if value="$DADynamicWarLocWarEvent == 'BigBoost' or $DADynamicWarLocWarEvent == 'SmallBoost' or $DADynamicWarLocWarEvent == 'SmallBlow' or $DADynamicWarLocWarEvent == 'BigBlow'">
							<do_if value="$DADynamicWarLocWarEvent == 'BigBoost'">
								<set_value name="$DADynamicWarUIRelationChange" exact="15"/>
							</do_if>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBoost'">
								<set_value name="$DADynamicWarUIRelationChange" exact="5"/>
							</do_elseif>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBlow'">
								<set_value name="$DADynamicWarUIRelationChange" exact="-5"/>
							</do_elseif>
							<do_elseif value="$DADynamicWarLocWarEvent == 'BigBlow'">
								<set_value name="$DADynamicWarUIRelationChange" exact="-15"/>
							</do_elseif>
							<!-- Requires $DADynamicWarFactionOne, $DADynamicWarFactionTwo, and $DADynamicWarUIRelationChange -->
							<!-- Returns $DADynamicWarNewAbsoluteRepValue and $DADynamicWarAbsoluteRepValueChange -->
							<include_actions ref="LibraryDynamicWarCalculateUiValueRepChange"/>
							<!-- 20231227 Changing to use $DADynamicWarNewAbsoluteRepValue -->
							<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="$DADynamicWarNewAbsoluteRepValue"/>
						</do_if>
						<do_elseif value="$DADynamicWarLocWarEvent == 'Nemesis'">
							<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="-1.0"/>
						</do_elseif>
						<do_elseif value="$DADynamicWarLocWarEvent == 'Besties'">
							<set_faction_relation faction="$DADynamicWarFactionOne" otherfaction="$DADynamicWarFactionTwo" value="$DADVT.$DADynamicWarRelationsAILimit"/>
						</do_elseif>
						<do_else>
							<!-- This should never be reached -->
							<debug_text text="'MOD: DADynamicWar -- %s -- Unhandled error in LibraryDynamicWarEventExecute.'.[player.age]" context="false" filter="error"/>
						</do_else>
						<!-- 20231227 Ensure factions have the same relation -->
						<set_value name="$DADynamicWarNewRelation" exact="$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}"/>
						<set_faction_relation faction="$DADynamicWarFactionTwo" otherfaction="$DADynamicWarFactionOne" value="$DADynamicWarNewRelation"/>
						<!-- Debug -->
						<do_if value="$DADVT.$DADynamicWarDetailedDebug">
							<do_if value="$DADynamicWarNewAbsoluteRepValue?">
								<debug_text text="'MOD: DADynamicWar -- %s -- Executed Relation Change -- $DADynamicWarLocWarEvent: %s -- $DADynamicWarFactionOne: %s -- $DADynamicWarFactionTwo: %s \n  Old Relation: %s -- $DADynamicWarNewRelation: %s -- $DADynamicWarNewAbsoluteRepValue: %s -- Old + $DADynamicWarAbsoluteRepValueChange: %s'.[player.age,$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation,$DADynamicWarNewAbsoluteRepValue,$DADynamicWarOldRelation + $DADynamicWarAbsoluteRepValueChange]" context="false" filter="scripts"/>
							</do_if>
							<debug_to_file name="'LibraryDynamicWarEventExecute'" directory="'DynamicWar'" text="'%s -- Event: %s -- %s and %s -- Relation Before: %s -- Relation After: %s'.[player.age,$DADynamicWarLocWarEvent,$DADynamicWarFactionOne,$DADynamicWarFactionTwo,$DADynamicWarOldRelation,$DADynamicWarNewRelation]" output="false" append="true"/>
						</do_if>
						<!-- 20231227 Cleanup values not used in LibraryDynamicWarEventNotification -->
						<remove_value name="$DADynamicWarUIRelationChange"/>
						<remove_value name="$DADynamicWarNewAbsoluteRepValue"/>
						<remove_value name="$DADynamicWarAbsoluteRepValueChange"/>
						<!-- Relation is set, now for notification -->
						<!-- We use $DADynamicWarLocWarEvent, $DADynamicWarFactionOne, $DADynamicWarFactionTwo, $DADynamicWarOldRelation, and $DADynamicWarNewRelation-->
						<include_actions ref="LibraryDynamicWarEventNotification"/>
						<!-- 20231219 Cleanup moved into cue where var is set -->
						<remove_value name="$DADynamicWarFactionOne"/>
						<remove_value name="$DADynamicWarFactionTwo"/>
						<remove_value name="$DADynamicWarOldRelation"/>
						<remove_value name="$DADynamicWarNewRelation"/>
					</actions>
				</library>
				<library name="LibraryDynamicWarCalculateUiValueRepChange">
					<actions>
						<!-- Vanilla	1.0 = 30		0.32 = 25		0.1 = 20		0.032 = 15		0.01 = 10		0.0032 = 5 -->
						<!-- Calculated	1.0 = 30		0.316 = 25		0.1 = 20		0.0316 = 15		0.01 = 10		0.00316 = 5 -->
						<!-- Requires $DADynamicWarFactionOne, $DADynamicWarFactionTwo, and $DADynamicWarUIRelationChange -->
						<!-- Returns $DADynamicWarNewAbsoluteRepValue and $DADynamicWarAbsoluteRepValueChange -->
						<!-- 20231215 Added in shortcut if new ui value is a declared number in the charts and removed rounding -->
						<!-- DONE: I never accounted for relations ranges making it here that are outside of the range allowed in game -->
						<do_if value="$DADynamicWarUIRelationChange != 0">
							<set_value name="$DADynamicWarLocOldUIRepValue" exact="$DADynamicWarFactionOne.relation.{$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}}.uivalue"/>
							<set_value name="$DADynamicWarLocOldAbsoluteRepValue" exact="$DADynamicWarFactionOne.relationto.{$DADynamicWarFactionTwo}"/>
							<set_value name="$DADynamicWarLocNewUIRepValue" exact="[[$DADynamicWarLocOldUIRepValue + $DADynamicWarUIRelationChange,-30].max,30].min"/>
							<set_value name="$DADynamicWarLocUIRepDefinedList" exact="[30,25,20,15,10,5,0,-5,-10,-15,-20,-25,-30]"/>
							<set_value name="$DADynamicWarLocAbsRepDefinedList" exact="[1.0,0.32,0.1,0.032,0.01,0.0032,0,-0.0032,-0.01,-0.032,-0.1,-0.32,-1.0]"/>
							<do_if value="$DADynamicWarLocUIRepDefinedList.indexof.{$DADynamicWarLocNewUIRepValue}">
								<set_value name="$DADynamicWarLocRepIndex" exact="$DADynamicWarLocUIRepDefinedList.indexof.{$DADynamicWarLocNewUIRepValue}"/>
								<set_value name="$DADynamicWarNewAbsoluteRepValue" exact="$DADynamicWarLocAbsRepDefinedList.{$DADynamicWarLocRepIndex}"/>
								<set_value name="$DADynamicWarAbsoluteRepValueChange" exact="$DADynamicWarNewAbsoluteRepValue - $DADynamicWarLocOldAbsoluteRepValue"/>
							</do_if>
							<do_else>
								<do_if value="($DADynamicWarLocNewUIRepValue le 5) and ($DADynamicWarLocNewUIRepValue ge -5)">
									<set_value name="$DADynamicWarNewAbsoluteRepValue" exact="$DADynamicWarLocNewUIRepValue * 0.00064"/>
								</do_if>
								<do_else>
									<!-- =(10^(SQRT((S2+T2)^2)/10)/1000)*IF(S2+T2<0,-1,1) -->
									<set_value name="$DADynamicWarNewAbsoluteRepValue" exact="[[(10.0^(sqrt(($DADynamicWarLocNewUIRepValue)LF ^ 2.0)/10.0) / 1000.0) * (if ($DADynamicWarLocNewUIRepValue lt 0.0) then -1.0 else 1.0),-1.0].max,1.0].min"/>
								</do_else>
								<!-- 20231227 Added a check to prevent faction relation from raising above AI:AI limit // changing hard coded limit to a variable in case I decide to make it an option -->
								<do_if value="($DADynamicWarNewAbsoluteRepValue gt $DADVT.$DADynamicWarRelationsAILimit) and ($DADynamicWarFactionOne != faction.player) and ($DADynamicWarFactionTwo != faction.player)">
									<set_value name="$DADynamicWarNewAbsoluteRepValue" exact="$DADVT.$DADynamicWarRelationsAILimit"/>
								</do_if>
								<set_value name="$DADynamicWarAbsoluteRepValueChange" exact="$DADynamicWarNewAbsoluteRepValue - $DADynamicWarLocOldAbsoluteRepValue"/>
							</do_else>
							<remove_value name="$DADynamicWarLocOldUIRepValue"/>
							<remove_value name="$DADynamicWarLocOldAbsoluteRepValue"/>
							<remove_value name="$DADynamicWarLocNewUIRepValue"/>
							<remove_value name="$DADynamicWarLocUIRepDefinedList"/>
							<remove_value name="$DADynamicWarLocAbsRepDefinedList"/>
							<remove_value name="$DADynamicWarLocRepIndex"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryDynamicWarEventNotification">
					<actions>
						<!-- We use $DADynamicWarLocWarEvent, $DADynamicWarFactionOne, $DADynamicWarFactionTwo, $DADynamicWarOldRelation, and $DADynamicWarNewRelation-->
						<set_value name="$DADynamicWarLocFactionOneName" exact="$DADynamicWarFactionOne.knownname"/>
						<set_value name="$DADynamicWarLocFactionTwoName" exact="$DADynamicWarFactionTwo.knownname"/>
						<set_value name="$DADynamicWarLocOldRelationUIValue" exact="$DADynamicWarFactionOne.relation.{$DADynamicWarOldRelation}.uivalue"/>
						<set_value name="$DADynamicWarLocNewRelationUIValue" exact="$DADynamicWarFactionOne.relation.{$DADynamicWarNewRelation}.uivalue"/>
						<set_value name="$DADynamicWarLocRelationUIChange" exact="$DADynamicWarLocNewRelationUIValue - $DADynamicWarLocOldRelationUIValue"/>
						<set_value name="$DADynamicWarLocLogbookReason" exact="null"/>
						<set_value name="$DADynamicWarLocLogbook" exact="['','','']"/>
						<set_value name="$DADynamicWarLocNotification" exact="['','','','']"/>
						<!-- TODO: Flavor text town -->
						<!-- 
							LOGBOOK
								Title = $DADynamicWarLocLogbook.{1} // Faction = $DADynamicWarLocLogbook.{2} // Text = $DADynamicWarLocLogbook.{3}
								$DADynamicWarLocLogbook.{1}	=	{DA Dynamic War} // DONE: Add t-file entry for dynamic war
								$DADynamicWarLocLogbook.{2}	=	$DADynamicWarLocFactionOneName + $DADynamicWarLocFactionTwoName
								$DADynamicWarLocLogbook.{3}	=	Reputation Gain/Loss: $DADynamicWarLocRelationUIChange \n
																Current Reputation: $DADynamicWarLocNewRelationUIValue \n
																Reason: $DADynamicWarLocLogbookReason
							END LOGBOOK
						-->
						<!-- 
							NOTIFICATION // Max 4 Rows
								$DADynamicWarLocNotification.{1}	=	{DA Dynamic War}
								$DADynamicWarLocNotification.{2}	=	$DADynamicWarLocFactionOneName + $DADynamicWarLocFactionTwoName
								$DADynamicWarLocNotification.{3}	=	Reputation Gain/Loss: $DADynamicWarLocRelationUIChange
								$DADynamicWarLocNotification.{4}	=	Current Reputation: $DADynamicWarLocNewRelationUIValue
							END NOTIFICATION
						-->
						<!-- {1001,120}(:) // {1015,14}(Reputation gained) // {1015,15}(Reputation lost) // {1015,250}(Current reputation) // {1015,251}(Reason) -->
						<!-- {1} and {2} -->
						<set_value name="$DADynamicWarLocLogbook.{1}" exact="{33232474,101}"/>
						<set_value name="$DADynamicWarLocLogbook.{2}" exact="'%s &amp; %s'.[$DADynamicWarLocFactionOneName,$DADynamicWarLocFactionTwoName]"/>
						<set_value name="$DADynamicWarLocNotification.{1}" exact="{33232474,101}"/>
						<set_value name="$DADynamicWarLocNotification.{2}" exact="'%s &amp; %s'.[$DADynamicWarLocFactionOneName,$DADynamicWarLocFactionTwoName]"/>
						<!-- {3} -->
						<do_if value="$DADynamicWarLocRelationUIChange ge 0">
							<set_value name="$DADynamicWarLocLogbook.{3}" exact="{1015,14} + {1001,120} + ' '"/>
							<set_value name="$DADynamicWarLocNotification.{3}" exact="{1015,14} + {1001,120} + ' '"/>
						</do_if>
						<do_else>
							<set_value name="$DADynamicWarLocLogbook.{3}" exact="{1015,15} + {1001,120} + ' '"/>
							<set_value name="$DADynamicWarLocNotification.{3}" exact="{1015,15} + {1001,120} + ' '"/>
						</do_else>
						<set_value name="$DADynamicWarLocLogbook.{3}" exact="$DADynamicWarLocRelationUIChange" operation="add"/>
						<set_value name="$DADynamicWarLocNotification.{3}" exact="$DADynamicWarLocRelationUIChange" operation="add"/>
						<set_value name="$DADynamicWarLocLogbook.{3}" exact="'\n' + {1015,250} + {1001,120} + ' ' + $DADynamicWarLocNewRelationUIValue" operation="add"/>
						<set_value name="$DADynamicWarLocLogbook.{3}" exact="'\n' + {1015,251} + {1001,120} + ' '" operation="add"/>
						<include_actions ref="LIbraryDynamicWarEventNotificationReason" comment="This was only separated into a library for readability"/>
						<set_value name="$DADynamicWarLocLogbook.{3}" exact="$DADynamicWarLocLogbookReason" operation="add"/>
						<!-- {4} -->
						<set_value name="$DADynamicWarLocNotification.{4}" exact="{1015,250} + {1001,120} + ' ' + $DADynamicWarLocNewRelationUIValue"/>
						<!-- Output Notification -->
						<show_notification text="'%s: %s\n%s\n%s'.[$DADynamicWarLocNotification.{1},$DADynamicWarLocNotification.{2},$DADynamicWarLocNotification.{3},$DADynamicWarLocNotification.{4}]"/>
						<!-- Output Logbook Entry -->
						<write_to_logbook category="news" title="$DADynamicWarLocLogbook.{1}" faction="$DADynamicWarLocLogbook.{2}" text="$DADynamicWarLocLogbook.{3}" highlighted="true"/>
						<do_if value="$DADVT.$DADynamicNewsEnableNewsStorage">
							<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$DADynamicWarLocNotification.{2},'%s ; %s'.[$DADynamicWarLocNotification.{3},$DADynamicWarLocNotification.{4}]]"/>
						</do_if>
						<remove_value name="$DADynamicWarLocFactionOneName"/>
						<remove_value name="$DADynamicWarLocFactionTwoName"/>
						<remove_value name="$DADynamicWarLocOldRelationUIValue"/>
						<remove_value name="$DADynamicWarLocNewRelationUIValue"/>
						<remove_value name="$DADynamicWarLocRelationUIChange"/>
						<remove_value name="$DADynamicWarLocLogbookReason"/>
						<remove_value name="$DADynamicWarLocLogbook"/>
						<remove_value name="$DADynamicWarLocNotification"/>
					</actions>
				</library>
				<library name="LIbraryDynamicWarEventNotificationReason">
					<actions>
						<!-- Sublibrary of LibraryDynamicWarEventNotification // Namespace shared -->
						<do_if value="not $DADVT.$DADynamicWarFlavorEnable">
							<set_value name="$DADynamicWarLocLogbookReason" exact="$DADynamicWarLocWarEvent"/>
						</do_if>
						<do_elseif value="$DADVT.$DADynamicWarFlavorEnable">
							<do_if value="$DADynamicWarLocWarEvent == 'BigBoost' or ($DADynamicWarLocWarEvent == 'Besties')">
								<do_if value="($DADynamicWarOldRelation ge 0) and ($DADynamicWarNewRelation gt 0)">
									<!-- positive or 0 to higher positive -->
								</do_if>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation ge 0)">
									<!-- negative to positive or 0 -->
								</do_elseif>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- negative to higher negative NOT 0 -->
								</do_elseif>
							</do_if>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBoost'">
								<do_if value="($DADynamicWarOldRelation ge 0) and ($DADynamicWarNewRelation gt 0)">
									<!-- positive or 0 to higher positive -->
								</do_if>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation ge 0)">
									<!-- negative to positive or 0 -->
								</do_elseif>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- negative to higher negative NOT 0 -->
								</do_elseif>
							</do_elseif>
							<do_elseif value="$DADynamicWarLocWarEvent == 'SmallBlow'">
								<do_if value="($DADynamicWarOldRelation gt 0) and ($DADynamicWarNewRelation ge 0)">
									<!-- positive to lower positive or 0 -->
								</do_if>
								<do_elseif value="($DADynamicWarOldRelation ge 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- positive or 0 to negative NOT 0 -->
								</do_elseif>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- negative NOT 0 to lower negative -->
								</do_elseif>
							</do_elseif>
							<do_elseif value="($DADynamicWarLocWarEvent == 'BigBlow') or ($DADynamicWarLocWarEvent == 'Nemesis')">
								<do_if value="($DADynamicWarOldRelation gt 0) and ($DADynamicWarNewRelation ge 0)">
									<!-- positive to lower positive or 0 -->
								</do_if>
								<do_elseif value="($DADynamicWarOldRelation ge 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- positive or 0 to negative NOT 0 -->
								</do_elseif>
								<do_elseif value="($DADynamicWarOldRelation lt 0) and ($DADynamicWarNewRelation lt 0)">
									<!-- negative NOT 0 to lower negative -->
								</do_elseif>
							</do_elseif>
						</do_elseif>
					</actions>
				</library>
				<!-- Dynamic War -->
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<library name="LibraryCheckDynamicWarVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DADynamicWarEnable?">
							<set_value name="$DADVT.$DADynamicWarEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarFavorsEnable?">
							<set_value name="$DADVT.$DADynamicWarFavorsEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarDisabledFactions?">
							<set_value name="$DADVT.$DADynamicWarDisabledFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.player, faction.smuggler, faction.visitor, faction.xenon]"/>
							<do_if value="faction.boron?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.boron"/>
							</do_if>
							<do_if value="faction.loanshark?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.loanshark"/>
							</do_if>
							<do_if value="faction.scavenger?">
								<append_to_list name="$DADVT.$DADynamicWarDisabledFactions" exact="faction.scavenger"/>
							</do_if>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarPermaExcludedFactions?">
							<set_value name="$DADVT.$DADynamicWarPermaExcludedFactions" exact="[faction.civilian, faction.criminal, faction.khaak, faction.smuggler, faction.visitor]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarFactionChanceTable?">
							<set_value name="$DADVT.$DADynamicWarFactionChanceTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicWarLockedRelationFactions?">
							<create_list name="$DADynamicWarLockedRelationFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicWarInactiveFactions?">
							<create_list name="$DADynamicWarInactiveFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarEventWeights?">
							<set_value name="$DADVT.$DADynamicWarEventWeights" exact="[1,16,32,32,16,1,0]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarInterval?">
							<set_value name="$DADVT.$DADynamicWarInterval" exact="30"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicWarLastEventTime?">
							<set_value name="$DADynamicWarLastEventTime" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarFavors?">
							<set_value name="$DADVT.$DADynamicWarFavors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarDetailedDebug?">
							<set_value name="$DADVT.$DADynamicWarDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarPrimaryRaceModifier?">
							<set_value name="$DADVT.$DADynamicWarPrimaryRaceModifier" exact="0.25"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarCurrentRelationsModifier?">
							<set_value name="$DADVT.$DADynamicWarCurrentRelationsModifier" exact="0.5"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarCollectiveRelationsModifier?">
							<set_value name="$DADVT.$DADynamicWarCollectiveRelationsModifier" exact="0.25"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarFlavorEnable?">
							<set_value name="$DADVT.$DADynamicWarFlavorEnable" exact="false"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarRelationsFixEnable?">
							<set_value name="$DADVT.$DADynamicWarRelationsFixEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarRelationsAILimit?">
							<set_value name="$DADVT.$DADynamicWarRelationsAILimit" exact="0.32"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicWarPossibleFactionsPerEvent?">
							<set_value name="$DADVT.$DADynamicWarPossibleFactionsPerEvent" exact="4"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DADynamicWar -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Dynamic War -->
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War // Dynamic War -->
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<cue name="TimerDynamicNewsOutput" instantiate="true" checkinterval="10min" checktime="5min">
					<conditions>
						<check_value value="$DADynamicNewsQueuedReports.keys.count"/>
						<check_value value="player.age ge ($DADynamicNewsLastReportTime + ($DADVT.$DADynamicNewsInterval)min)"/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
					</conditions>
					<actions>
						<set_value name="$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
						<debug_text text="'MOD: DADynamicNews -- %s -- Starting news processing for %s factions'.[player.age,$DADynamicNewsQueuedReports.keys.count]" context="false" filter="scripts" chance="$DADVT.$DADynamicNewsDetailedDebug * 100"/>
					</actions>
					<cues>
						<cue name="NewsProcessQueue">
							<delay exact="30s"/>
							<actions>
								<do_if value="$DADynamicNewsQueuedReports.keys.count">
									<!--	$DADynamicNewsQueuedReports // Type = Table // Key = $Faction // [['EventDynamicNewsMajorStationDestroyed',$Station,$Killer],['EventDynamicNewsStationExpanded',$Station,[$NewModules],[$WantedProductions]],['EventDynamicNewsNewStationStarted',$Station,$Wares]]
											do_for_each $Faction // do_if Table.{$Faction}?, collect info, combine info, goto next table and repeat.
									-->
									<!-- DONE: Test if any of this works -->
									<!-- DONE: finish notification entries -->
									<!-- DONE: add portion that actually creates logbook/notification -->
									<!-- DONE: add variable to turn off logbook/notification separately -->
									<!-- MAYBE: Keep the keys but clear list when processed? Create local copy and clear list? Crashes may be linked to two cues changing the table at same time -->
									<set_value name="$DADynamicNewsLocFaction" exact="$DADynamicNewsQueuedReports.keys.random" comment="setting this here allows the script to clean up entries in QueuedReports"/>
									<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage">
										<set_value name="$DADynamicNewsLocStationsDestroyed" exact="[]"/>
										<set_value name="$DADynamicNewsLocStationExpanded" exact="[]"/>
										<set_value name="$DADynamicNewsLocStationStarted" exact="[]"/>
										<set_value name="$DADynamicNewsLocWares" exact="[]"/>
										<set_value name="$DADynamicNewsLocNewModules" exact="[]"/>
										<set_value name="$DADynamicNewsLocWantedProductions" exact="[]"/>
										<set_value name="$DADynamicNewsLocKillerFaction" exact="[]"/>
										<debug_text text="'MOD: DADynamicNews -- %s -- Processing news for %s'.[player.age,$DADynamicNewsLocFaction]" context="false" filter="scripts" chance="$DADVT.$DADynamicNewsDetailedDebug * 100"/>
										<do_all exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.count" counter="$ReportCounter" reverse="true">
											<!-- Make sure the data is a list -->
											<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}?) and (typeof $DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter} == datatype.list)">
												<!-- ['EventDynamicNewsMajorStationDestroyed',$Station,$Killer] -->
												<do_if value="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{1} == 'EventDynamicNewsMajorStationDestroyed'">
													<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2} != null)">
														<do_if value="(not $DADynamicNewsLocStationsDestroyed.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}})">
															<append_to_list name="$DADynamicNewsLocStationsDestroyed" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}"/>
														</do_if>
														<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3} != null)">
															<do_if value="(not $DADynamicNewsLocKillerFaction.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}})">
																<append_to_list name="$DADynamicNewsLocKillerFaction" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}"/>
															</do_if>
														</do_if>
													</do_if>
												</do_if>
												<do_elseif value="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{1} == 'EventDynamicNewsStationExpanded'">
													<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2} != null)">
														<do_if value="(not $DADynamicNewsLocStationExpanded.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}})">
															<append_to_list name="$DADynamicNewsLocStationExpanded" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}"/>
														</do_if>
														<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3} != null)">
															<!-- New modules is always a list or null -->
															<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.count == 1)">
																<do_if value="(not $DADynamicNewsLocNewModules.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.{1}})">
																	<append_to_list name="$DADynamicNewsLocNewModules" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.{1}"/>
																</do_if>
															</do_if>
															<do_elseif value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.count gt 1)">
																<do_for_each name="$DADynamicNewsLocNewModule" in="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}">
																	<do_if value="(not $DADynamicNewsLocNewModules.indexof.{$DADynamicNewsLocNewModule})">
																		<append_to_list name="$DADynamicNewsLocNewModules" exact="$DADynamicNewsLocNewModule"/>
																	</do_if>
																</do_for_each>
															</do_elseif>
														</do_if>
														<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4} != null)">
															<!-- Wanted Productions is always a list or null -->
															<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4}.count == 1)">
																<do_if value="(not $DADynamicNewsLocWantedProductions.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4}.{1}})">
																	<append_to_list name="$DADynamicNewsLocWantedProductions" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4}.{1}"/>
																</do_if>
															</do_if>
															<do_elseif value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{4}.count gt 1)">
																<do_for_each name="$DADynamicNewsLocWantedProduction" in="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}">
																	<do_if value="(not $DADynamicNewsLocWantedProductions.indexof.{$DADynamicNewsLocWantedProduction})">
																		<append_to_list name="$DADynamicNewsLocWantedProductions" exact="$DADynamicNewsLocWantedProduction"/>
																	</do_if>
																</do_for_each>
															</do_elseif>
														</do_if>
													</do_if>
												</do_elseif>
												<do_elseif value="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{1} == 'EventDynamicNewsNewStationStarted'">
													<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2} != null)">
														<do_if value="(not $DADynamicNewsLocStationStarted.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}})">
															<append_to_list name="$DADynamicNewsLocStationStarted" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{2}"/>
														</do_if>
														<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}?) and ($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3} != null)">
															<!-- Wares is always a list or null -->
															<do_if value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.count == 1)">
																<do_if value="(not $DADynamicNewsLocWares.indexof.{$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.{1}})">
																	<append_to_list name="$DADynamicNewsLocWares" exact="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.{1}"/>
																</do_if>
															</do_if>
															<do_elseif value="($DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}.count gt 1)">
																<do_for_each name="$DADynamicNewsLocWare" in="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}.{$ReportCounter}.{3}">
																	<do_if value="(not $DADynamicNewsLocWares.indexof.{$DADynamicNewsLocWare})">
																		<append_to_list name="$DADynamicNewsLocWares" exact="$DADynamicNewsLocWare"/>
																	</do_if>
																</do_for_each>
															</do_elseif>
														</do_if>
													</do_if>
												</do_elseif>
											</do_if>
										</do_all>
										<do_if value="$DADynamicNewsLocStationsDestroyed.count or $DADynamicNewsLocStationExpanded.count or $DADynamicNewsLocStationStarted.count">
											<!-- 
												LOGBOOK
													Title = $DADynamicNewsLogbookReport.{1} // Faction = $DADynamicNewsLogbookReport.{2} // Text = $DADynamicNewsLogbookReport.{3}
													$DADynamicNewsLogbookReport.{1}	=	{DA Dynamic News} // DONE: Add t-file entry for Dynamic News
													$DADynamicNewsLogbookReport.{2}	=	$DADynamicNewsLocFaction
													$DADynamicNewsLogbookReport.{3}	=	Message Structure
												END LOGBOOK
											-->
											<!-- 
												NOTIFICATION // Max 4 Rows
													$DADynamicNewsNotificationReport.{1}	=	{DA Dynamic News}
													$DADynamicNewsNotificationReport.{2}	=	$DADynamicNewsLocFaction
													$DADynamicNewsNotificationReport.{3}	=	Message Structure
												END NOTIFICATION
											-->
											<set_value name="$DADynamicNewsLogbookReport" exact="['','','']"/>
											<set_value name="$DADynamicNewsNotificationReport" exact="['','','']"/>
											<!-- {1} and {2} -->
											<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
												<set_value name="$DADynamicNewsLogbookReport.{1}" exact="'%s'.[{33232474,102}]"/>
												<set_value name="$DADynamicNewsLogbookReport.{2}" exact="'%s'.[$DADynamicNewsLocFaction.knownname]"/>
											</do_if>
											<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
												<set_value name="$DADynamicNewsNotificationReport.{1}" exact="'%s'.[{33232474,102}]"/>
												<set_value name="$DADynamicNewsNotificationReport.{2}" exact="'%s'.[$DADynamicNewsLocFaction.knownname]"/>
											</do_if>
											<!-- {3} -->
											<!-- 
											Logbook Structure:	SINGLE: $STATION$ in $SECTOR$ destroyed (if $DADynamicNewsLocKillerFaction then) by $FACTION$.
																MULTIPLE: Stations lost: $STATION$ in $SECTOR$...
																SINGLE: $STATION in $SECTOR expanded with $MODULES... $WANTEDPRODUCTIONS...
																MULTIPLE: Stations expanded: $STATION$ in $SECTOR$...
																SINGLE: $STATION started in $SECTOR for $WARES...
																MULTIPLE: New stations started: $STATION$ in $SECTOR$...
											Notification Structure:		SINGLE: $STATION$ in $SECTOR$ destroyed
																		MULTIPLE: $NUMBER$ stations lost
																		SINGLE: $STATION in $SECTOR expanded
																		MULTIPLE: $NUMBER$ stations expanded
																		SINGLE: $STATION started in $SECTOR
																		MULTIPLE: $NUMBER$ stations started
											-->
											<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
											<do_if value="$DADynamicNewsLocStationsDestroyed.count == 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2284}.[$DADynamicNewsLocStationsDestroyed.{1}.knownname,$DADynamicNewsLocStationsDestroyed.{1}.sector.knownname]" operation="add" comment="$STATION$ in $SECTOR$ destroyed"/>
													<do_if value="$DADynamicNewsLocKillerFaction.count == 1 and ($DADynamicNewsLocKillerFaction.{1} != null)">
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2285}.[$DADynamicNewsLocKillerFaction.{1}.knownname]" operation="add" comment="by $KILLER$"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_if>
													<do_else>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_else>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2284}.[$DADynamicNewsLocStationsDestroyed.{1}.knownname,$DADynamicNewsLocStationsDestroyed.{1}.sector.knownname]" operation="add" comment="$STATION$ in $SECTOR$ destroyed"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
											</do_if>
											<do_elseif value="$DADynamicNewsLocStationsDestroyed.count gt 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2286}" operation="add" comment="Stations lost:"/>
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
													<do_for_each name="$DADynamicNewsLocStation" in="$DADynamicNewsLocStationsDestroyed" counter="$A">
														<do_if value="($A gt 1) and ($A lt $DADynamicNewsLocStationsDestroyed.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
														</do_if>
														<do_elseif value="($A == 2) and ($A == $DADynamicNewsLocStationsDestroyed.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp;"/>
														</do_elseif>
														<do_elseif value="($A gt 1) and ($A == $DADynamicNewsLocStationsDestroyed.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp;"/>
														</do_elseif>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2287}.[$DADynamicNewsLocStation.knownname,$DADynamicNewsLocStation.sector.knownname]" operation="add"/>
														<do_if value="$A == $DADynamicNewsLocStationsDestroyed.count">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2294}.[$DADynamicNewsLocStationsDestroyed.count]" operation="add" comment="$NUMBER$ stations lost"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
											</do_elseif>
											<do_if value="$DADynamicNewsNeedASpace">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="' '" operation="add" comment="space"/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
											</do_if>
											<do_if value="$DADynamicNewsLocStationExpanded.count == 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2288}.[$DADynamicNewsLocStationExpanded.{1}.knownname,$DADynamicNewsLocStationExpanded.{1}.idcode,$DADynamicNewsLocStationExpanded.{1}.sector.knownname]" operation="add" comment="Expanded $STATION$($IDCODE$) in $SECTOR$"/>
													<set_value name="$DADynamicNewsLocModules" exact="[]"/>
													<do_if value="$DADynamicNewsLocNewModules.count and $DADynamicNewsLocWantedProductions.count">
														<remove_from_list name="$DADynamicNewsLocNewModules" list="$DADynamicNewsLocWantedProductions" multiple="true"/>
														<append_list_elements name="$DADynamicNewsLocModules" other="$DADynamicNewsLocNewModules"/>
														<append_list_elements name="$DADynamicNewsLocModules" other="$DADynamicNewsLocWantedProductions"/>
													</do_if>
													<do_elseif value="$DADynamicNewsLocNewModules.count and (not $DADynamicNewsLocWantedProductions.count)">
														<append_list_elements name="$DADynamicNewsLocModules" other="$DADynamicNewsLocNewModules"/>
													</do_elseif>
													<do_elseif value="(not $DADynamicNewsLocNewModules.count) and $DADynamicNewsLocWantedProductions.count">
														<append_list_elements name="$DADynamicNewsLocModules" other="$DADynamicNewsLocWantedProductions"/>
													</do_elseif>
													<do_if value="$DADynamicNewsLocModules.count">
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2289}.[$DADynamicNewsLocModules.count]" operation="add" comment="with $NUMBER$ modules"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_if>
													<do_else>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_else>
													<remove_value name="$DADynamicNewsLocModules"/>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2288}.[$DADynamicNewsLocStationExpanded.{1}.knownname,$DADynamicNewsLocStationExpanded.{1}.idcode,$DADynamicNewsLocStationExpanded.{1}.sector.knownname]" operation="add" comment="Expanded $STATION$($IDCODE$) in $SECTOR$"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
											</do_if>
											<do_elseif value="$DADynamicNewsLocStationExpanded.count gt 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2290}" operation="add" comment="Stations expanded:"/>
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
													<do_for_each name="$DADynamicNewsLocStation" in="$DADynamicNewsLocStationExpanded" counter="$B">
														<do_if value="($B gt 1) and ($B lt $DADynamicNewsLocStationExpanded.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
														</do_if>
														<do_elseif value="($B == 2) and ($B == $DADynamicNewsLocStationExpanded.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp;"/>
														</do_elseif>
														<do_elseif value="($B gt 1) and ($B == $DADynamicNewsLocStationExpanded.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp;"/>
														</do_elseif>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2287}.[$DADynamicNewsLocStation.knownname,$DADynamicNewsLocStation.sector.knownname]" operation="add"/>
														<do_if value="$B == $DADynamicNewsLocStationExpanded.count">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2295}.[$DADynamicNewsLocStationExpanded.count]" operation="add" comment="$NUMBER$ stations expanded"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="true"/>
											</do_elseif>
											<do_if value="$DADynamicNewsNeedASpace">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="' '" operation="add" comment="space"/>
												</do_if>
												<set_value name="$DADynamicNewsNeedASpace" exact="false"/>
											</do_if>
											<do_if value="$DADynamicNewsLocStationStarted.count == 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2291}.[$DADynamicNewsLocStationStarted.{1}.knownname,$DADynamicNewsLocStationStarted.{1}.idcode,$DADynamicNewsLocStationStarted.{1}.sector.knownname]" operation="add" comment="Started $STATION$($IDCODE$) in $SECTOR$"/>
													<do_if value="$DADynamicNewsLocWares.count == 1">
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2292}.[$DADynamicNewsLocWares.{1}.name]" operation="add" comment="to produce $WARE$"/>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_if>
													<do_elseif value="$DADynamicNewsLocWares.count gt 1">
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
														<set_value name="$DADynamicNewsLocString" exact="''"/>
														<do_for_each name="$DADynamicNewsLocWare" in="$DADynamicNewsLocWares" counter="$C">
															<do_if value="($C gt 1) and ($C lt $DADynamicNewsLocWares.count)">
																<set_value name="$DADynamicNewsLocString" exact="', '" operation="add" comment="comma space"/>
															</do_if>
															<do_elseif value="($C == 2) and ($C == $DADynamicNewsLocWares.count)">
																<set_value name="$DADynamicNewsLocString" exact="' &amp; '" operation="add" comment="space &amp;"/>
															</do_elseif>
															<do_elseif value="($C gt 1) and ($C == $DADynamicNewsLocWares.count)">
																<set_value name="$DADynamicNewsLocString" exact="', &amp; '" operation="add" comment="comma space &amp;"/>
															</do_elseif>
															<set_value name="$DADynamicNewsLocString" exact="'%s'.[$DADynamicNewsLocWare.name]" operation="add"/>
															<do_if value="$C == $DADynamicNewsLocWares.count">
																<set_value name="$DADynamicNewsLocString" exact="'.'" operation="add" comment="period."/>
															</do_if>
														</do_for_each>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2292}.[$DADynamicNewsLocString]" operation="add" comment="to produce $WARE$"/>
														<remove_value name="$DADynamicNewsLocString"/>
													</do_elseif>
													<do_else>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
													</do_else>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2291}.[$DADynamicNewsLocStationStarted.{1}.knownname,$DADynamicNewsLocStationStarted.{1}.idcode,$DADynamicNewsLocStationStarted.{1}.sector.knownname]" operation="add" comment="Started $STATION$($IDCODE$) in $SECTOR$"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
											</do_if>
											<do_elseif value="$DADynamicNewsLocStationStarted.count gt 1">
												<do_if value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNewsStorage">
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2293}" operation="add" comment="New stations started:"/>
													<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' '" operation="add" comment="space"/>
													<do_for_each name="$DADynamicNewsLocStation" in="$DADynamicNewsLocStationStarted" counter="$D">
														<do_if value="($D gt 1) and ($D lt $DADynamicNewsLocStationStarted.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', '" operation="add" comment="comma space"/>
														</do_if>
														<do_elseif value="($D == 2) and ($D == $DADynamicNewsLocStationStarted.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="' &amp; '" operation="add" comment="space &amp;"/>
														</do_elseif>
														<do_elseif value="($D gt 1) and ($D == $DADynamicNewsLocStationStarted.count)">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="', &amp; '" operation="add" comment="comma space &amp;"/>
														</do_elseif>
														<set_value name="$DADynamicNewsLogbookReport.{3}" exact="{33232474,2287}.[$DADynamicNewsLocStation.knownname,$DADynamicNewsLocStation.sector.knownname]" operation="add"/>
														<do_if value="$D == $DADynamicNewsLocStationStarted.count">
															<set_value name="$DADynamicNewsLogbookReport.{3}" exact="'.'" operation="add" comment="period."/>
														</do_if>
													</do_for_each>
												</do_if>
												<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="{33232474,2296}.[$DADynamicNewsLocStationStarted.count]" operation="add" comment="$NUMBER$ stations started"/>
													<set_value name="$DADynamicNewsNotificationReport.{3}" exact="'.'" operation="add" comment="period."/>
												</do_if>
											</do_elseif>
										</do_if>
										<set_value name="$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
										<do_if value="($DADVT.$DADynamicNewsEnableNotifications) and ($DADynamicNewsNotificationReport.{1}?) and ($DADynamicNewsNotificationReport.{2}?) and ($DADynamicNewsNotificationReport.{3}?)">
											<show_notification priority="1" text="'%s: %s\n%s'.[$DADynamicNewsNotificationReport.{1},$DADynamicNewsNotificationReport.{2},$DADynamicNewsNotificationReport.{3}]"/>
										</do_if>
										<do_if value="($DADVT.$DADynamicNewsEnableLogbook) and ($DADynamicNewsLogbookReport.{1}?) and ($DADynamicNewsLogbookReport.{2}?) and ($DADynamicNewsLogbookReport.{3}?)">
											<write_to_logbook category="news" title="$DADynamicNewsLogbookReport.{1}" faction="$DADynamicNewsLogbookReport.{2}" text="$DADynamicNewsLogbookReport.{3}"/>
										</do_if>
										<do_if value="($DADVT.$DADynamicNewsEnableNewsStorage) and ($DADynamicNewsNotificationReport.{1}?) and ($DADynamicNewsNotificationReport.{2}?) and ($DADynamicNewsNotificationReport.{3}?)">
											<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$DADynamicNewsLogbookReport.{2},$DADynamicNewsLogbookReport.{3}]"/>
										</do_if>
										<!-- Cleanup -->
										<remove_value name="$DADynamicNewsLocStationsDestroyed"/>
										<remove_value name="$DADynamicNewsLocStationExpanded"/>
										<remove_value name="$DADynamicNewsLocStationStarted"/>
										<remove_value name="$DADynamicNewsLocWares"/>
										<remove_value name="$DADynamicNewsLocNewModules"/>
										<remove_value name="$DADynamicNewsLocWantedProductions"/>
										<remove_value name="$DADynamicNewsLocKillerFaction"/>
										<remove_value name="$DADynamicNewsLogbookReport"/>
										<remove_value name="$DADynamicNewsNotificationReport"/>
									</do_if>
									<remove_value name="$DADynamicNewsQueuedReports.{$DADynamicNewsLocFaction}"/>
									<remove_value name="$DADynamicNewsLocFaction"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<set_value name="$DADynamicNewsLastReportTime" exact="player.age" comment="set in multiple places so the cue wont fire simultaneously"/>
									<debug_text text="'MOD: DADynamicNews -- %s -- Completed news processing.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DADynamicNewsDetailedDebug * 100"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Update on load cues // Update on load cues // Update on load cues // Update on load cues // Update on load cues -->
				<!-- Dynamic News -->
				<cue name="UpdateOnLoadDynamicNewsRefresh" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
					</conditions>
					<actions>
						<find_sector groupname="$DADynamicNewsAllSectors" multiple="true"/>
						<find_station groupname="$DADynamicNewsStations" multiple="true">
							<match_any>
								<match shipyard="true"/>
								<match wharf="true"/>
								<match tradestation="true"/>
								<match equipmentdock="true"/>
								<match defencestation="true"/>
								<match factionheadquarters="true"/>
							</match_any>
						</find_station>
					</actions>
				</cue>
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<!-- DONE: Update how tracking is handled -->
				<cue name="EventDynamicNewsSectorChangedOwner" instantiate="true">
					<conditions>
						<event_object_changed_owner group="$DADynamicNewsAllSectors"/>
						<check_value value="player.age gt 5min"/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_value value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<set_value name="$DADynNewsSector" exact="event.object"/>
						<set_value name="$DADynNewsOldOwner" exact="event.param2"/>
						<set_value name="$DADynNewsNewOwner" exact="event.param"/>
						<do_if value="$DADynNewsSector?">
							<do_if value="$DADynNewsOldOwner">
								<do_if value="$DADynNewsNewOwner">
									<set_value name="$DADynNewsMessage" exact="'%s %s %s %s. %s %s: %s'.[$DADynNewsSector.knownname,{1020,2000},{1001,7745},if $DADynNewsOldOwner.knownname != '' then $DADynNewsOldOwner.knownname else {1001,9002},{1001,9001},{1001,9040},$DADynNewsNewOwner.knownname]"/>
									<!-- $DADynNewsSector changed owner from $DADynNewsOldOwner. New Owner:$DADynNewsNewOwner-->
								</do_if>
								<do_else>
									<set_value name="$DADynNewsMessage" exact="'%s %s %s %s. %s %s: %s'.[$DADynNewsSector.knownname,{1020,2000},{1001,7745},if $DADynNewsOldOwner.knownname != '' then $DADynNewsOldOwner.knownname else {1001,9002},{1001,9001},{1001,9040},{1001,9002}]"/>
									<!-- $DADynNewsSector changed owner from $DADynNewsOldOwner. New Owner: Unknown-->
								</do_else>
							</do_if>
							<do_else>
								<set_value name="$DADynNewsMessage" exact="'%s %s.'.[$DADynNewsSector.knownname,{1020,2000}]"/>
								<!-- $DADynNewsSector changed owner.-->
							</do_else>
						</do_if>
						<do_if value="$DADynNewsMessage?">
							<!-- 
								LOGBOOK
									Title = {33232474,102} // Faction = $DADynNewsSector.knownname // Text = $DADynNewsMessage
								END LOGBOOK
							-->
							<!-- 
								NOTIFICATION // Max 4 Rows
									{DA Dynamic News}: $DADynNewsSector.knownname
									$DADynNewsMessage
								END NOTIFICATION
							-->
							<do_if value="$DADVT.$DADynamicNewsEnableNewsStorage">
								<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$DADynNewsSector.knownname,$DADynNewsMessage]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
								<show_notification priority="1" text="'%s: %s\n%s'.[{33232474,102},$DADynNewsSector.knownname,$DADynNewsMessage]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableLogbook">
								<write_to_logbook category="news" title="{33232474,102}" faction="$DADynNewsSector.knownname" text="$DADynNewsMessage"/>
							</do_if>
							<remove_value name="$DADynNewsMessage"/>
							<remove_value name="$DADynNewsLocTitle"/>
						</do_if>
						<remove_value name="$DADynNewsSector"/>
						<remove_value name="$DADynNewsOldOwner"/>
						<remove_value name="$DADynNewsNewOwner"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsMajorStationDestroyed" instantiate="true">
					<conditions>
						<event_object_destroyed group="$DADynamicNewsStations"/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_value value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<!-- Testing this.$Var -->
						<!-- ['EventDynamicNewsMajorStationDestroyed',$Station,$Killer] -->
						<set_value name="this.$LocStation" exact="event.object"/>
						<set_value name="this.$LocFaction" exact="event.object.trueowner"/>
						<set_value name="this.$LocKiller" exact="event.param"/>
						<do_if value="(this.$LocStation?) and (this.$LocStation != null)">
							<do_if value="(this.$LocFaction?) and (this.$LocFaction != null)">
								<do_if value="(this.$LocKiller?) and (this.$LocKiller != null)">
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsMajorStationDestroyed',this.$LocStation,this.$LocKiller.trueowner]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsMajorStationDestroyed',this.$LocStation,this.$LocKiller.trueowner]]"/>
									</do_else>
								</do_if>
								<do_else>
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsMajorStationDestroyed',this.$LocStation,null]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsMajorStationDestroyed',this.$LocStation,null]]"/>
									</do_else>
								</do_else>
							</do_if>
						</do_if>
						<remove_value name="this.$LocStation"/>
						<remove_value name="this.$LocFaction"/>
						<remove_value name="this.$LocKiller"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsStationExpanded" instantiate="true">
					<conditions>
						<event_cue_signalled/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_value value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<!-- Param.{1} == $Station // Param.{2} == @$NewModules // Param.{3} == @$WantedProductions] -->
						<!-- ['EventDynamicNewsStationExpanded',$Station,[$NewModules],[$WantedProductions]] -->
						<set_value name="this.$LocStation" exact="event.param.{1}"/>
						<set_value name="this.$LocFaction" exact="event.param.{1}.trueowner"/>
						<set_value name="this.$LocModules" exact="[]"/>
						<set_value name="this.$LocWantedProductions" exact="[]"/>
						<do_if value="typeof event.param.{2} == datatype.list">
							<append_list_elements name="this.$LocModules" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="this.$LocModules" exact="event.param.{2}"/>
						</do_else>
						<do_if value="typeof event.param.{3} == datatype.list">
							<append_list_elements name="this.$LocWantedProductions" other="event.param.{3}"/>
						</do_if>
						<do_else>
							<append_to_list name="this.$LocWantedProductions" exact="event.param.{3}"/>
						</do_else>
						<do_if value="(this.$LocStation?) and (this.$LocStation != null)">
							<do_if value="(this.$LocFaction?) and (this.$LocFaction != null)">
								<do_if value="((this.$LocModules?) and (this.$LocModules.count)) and ((this.$LocWantedProductions?) and (this.$LocWantedProductions.count))">
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsStationExpanded',this.$LocStation,this.$LocModules,this.$LocWantedProductions]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsStationExpanded',this.$LocStation,this.$LocModules,this.$LocWantedProductions]]"/>
									</do_else>
								</do_if>
								<do_elseif value="((this.$LocModules?) and (this.$LocModules.count)) and (not ((this.$LocWantedProductions?) and (this.$LocWantedProductions.count)))">
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsStationExpanded',this.$LocStation,this.$LocModules,null]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsStationExpanded',this.$LocStation,this.$LocModules,null]]"/>
									</do_else>
								</do_elseif>
								<do_elseif value="(not ((this.$LocModules?) and (this.$LocModules.count))) and ((this.$LocWantedProductions?) and (this.$LocWantedProductions.count))">
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsStationExpanded',this.$LocStation,null,this.$LocWantedProductions]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsStationExpanded',this.$LocStation,null,this.$LocWantedProductions]]"/>
									</do_else>
								</do_elseif>
								<do_else>
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsStationExpanded',this.$LocStation,null,null]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsStationExpanded',this.$LocStation,null,null]]"/>
									</do_else>
								</do_else>
							</do_if>
						</do_if>
						<remove_value name="this.$LocStation"/>
						<remove_value name="this.$LocFaction"/>
						<remove_value name="this.$LocModules"/>
						<remove_value name="this.$LocWantedProductions"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsNewStationStarted" instantiate="true">
					<conditions>
						<event_cue_signalled/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_value value="$DADVT.$DADynamicNewsEnableLogbook or $DADVT.$DADynamicNewsEnableNotifications or $DADVT.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<!-- Param.{1} == $Station // Param.{2} == $Wares -->
						<!-- ['EventDynamicNewsNewStationStarted',$Station,$Wares] -->
						<set_value name="this.$LocStation" exact="event.param.{1}"/>
						<set_value name="this.$LocFaction" exact="event.param.{1}.trueowner"/>
						<set_value name="this.$LocWare" exact="[]"/>
						<do_if value="typeof  event.param.{2} == datatype.list">
							<append_list_elements name="this.$LocWare" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="this.$LocWare" exact="event.param.{2}"/>
						</do_else>
						<do_if value="(this.$LocStation?) and (this.$LocStation != null)">
							<do_if value="(this.$LocFaction?) and (this.$LocFaction != null)">
								<do_if value="(this.$LocWare?) and (this.$LocWare.count)">
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsNewStationStarted',this.$LocStation,this.$LocWare]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsNewStationStarted',this.$LocStation,this.$LocWare]]"/>
									</do_else>
								</do_if>
								<do_else>
									<do_if value="$DADynamicNewsQueuedReports.{this.$LocFaction}?">
										<append_to_list name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="['EventDynamicNewsNewStationStarted',this.$LocStation,null]"/>
									</do_if>
									<do_else>
										<set_value name="$DADynamicNewsQueuedReports.{this.$LocFaction}" exact="[['EventDynamicNewsNewStationStarted',this.$LocStation,null]]"/>
									</do_else>
								</do_else>
							</do_if>
						</do_if>
						<remove_value name="this.$LocStation"/>
						<remove_value name="this.$LocFaction"/>
						<remove_value name="this.$LocWare"/>
					</actions>
				</cue>
				<cue name="EventDynamicNewsTracking" instantiate="true">
					<conditions>
						<event_cue_signalled/>
						<check_value value="$DADVT.$DADynamicNewsEnable"/>
						<check_value value="$DADVT.$DADynamicNewsEnableNewsStorage"/>
					</conditions>
					<actions>
						<!-- Param.{1} == $FACTION$ or $SECTOR$ // Param.{2} == $NEWS$ -->
						<set_value name="$DADynNewsLocSubject" exact="event.param.{1}"/>
						<set_value name="$DADynNewsLocMessage" exact="event.param.{2}"/>
						<do_if value="($DADynNewsLocSubject?) and ($DADynNewsLocSubject != null) and ($DADynNewsLocMessage?) and ($DADynNewsLocMessage != null)">
							<do_if value="(not $DADVT.$DADynamicNewsTable.{1}?)">
								<set_value name="$DADVT.$DADynamicNewsTable.{1}" exact="[player.age,$DADynNewsLocSubject,$DADynNewsLocMessage]"/>
							</do_if>
							<do_else>
								<!-- $DADVT.$DADynamicNewsTable.{Index} == [Player.age,$DADynNewsLocSubject,$DADynNewsLocMessage] -->
								<do_all exact="$DADVT.$DADynamicNewsTable.keys.count" counter="$indexcounter" reverse="true">
									<!-- Move all entries to index+1 so newest is first -->
									<do_if value="($indexcounter + 1) gt 20">
										<!-- If index + 1 gt 20 then drop -->
									</do_if>
									<do_else>
										<set_value name="$DADVT.$DADynamicNewsTable.{$indexcounter + 1}" exact="$DADVT.$DADynamicNewsTable.{$indexcounter}"/>
									</do_else>
								</do_all>
								<!-- Put the new entry as index 1 -->
								<set_value name="$DADVT.$DADynamicNewsTable.{1}" exact="[player.age,$DADynNewsLocSubject,$DADynNewsLocMessage]"/>
							</do_else>
							<debug_text text="'MOD: DADynamicNews -- %s -- News added for: %s -- LocMessage: %s'.[player.age,$DADynNewsLocSubject,$DADynNewsLocMessage]" context="false" filter="scripts"/>
						</do_if>
						<!-- This will be displayed in DADynamicNews -->
						<remove_value name="$DADynNewsLocSubject"/>
						<remove_value name="$DADynNewsLocMessage"/>
					</actions>
				</cue>
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Dynamic News -->
				<library name="LibraryCheckDynamicNewsVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DADynamicNewsEnable?">
							<set_value name="$DADVT.$DADynamicNewsEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsTable?">
							<set_value name="$DADVT.$DADynamicNewsTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicNewsAllSectors?">
							<find_sector groupname="$DADynamicNewsAllSectors" multiple="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicNewsStations?">
							<find_station groupname="$DADynamicNewsStations" multiple="true">
								<match_any>
									<match shipyard="true"/>
									<match wharf="true"/>
									<match tradestation="true"/>
									<match equipmentdock="true"/>
									<match defencestation="true"/>
									<match factionheadquarters="true"/>
								</match_any>
							</find_station>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicNewsQueuedReports?">
							<set_value name="$DADynamicNewsQueuedReports" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADynamicNewsLastReportTime?">
							<set_value name="$DADynamicNewsLastReportTime" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsInterval?">
							<set_value name="$DADVT.$DADynamicNewsInterval" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsDetailedDebug?">
							<set_value name="$DADVT.$DADynamicNewsDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableNotifications?">
							<set_value name="$DADVT.$DADynamicNewsEnableNotifications" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableLogbook?">
							<set_value name="$DADVT.$DADynamicNewsEnableLogbook" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DADynamicNewsEnableNewsStorage?">
							<set_value name="$DADVT.$DADynamicNewsEnableNewsStorage" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DADynamicNews -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News // Dynamic News -->
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Evolution -->
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<cue name="TimerEvolutionUpgrades" instantiate="true" checkinterval="15min" checktime="35min" comment="Timer 05 default">
					<conditions>
						<check_all>
							<check_value value="faction.xenon.isactive"/>
							<check_value value="$DADVT.$DAEvolutionEnable"/>
							<check_value value="$DADVT.$DAEvolutionCurrentLevel lt $DADVT.$DAEvolutionMaxLevel"/>
							<check_value value="player.age ge ($DAEvolutionLastUpgradeTime + ($DADVT.$DAEvolutionInterval)min)"/>
						</check_all>
					</conditions>
					<actions>
						<include_actions ref="LibraryEvolutionCheckLevels"/>
					</actions>
				</cue>
				<cue name="TimerEvolutionXenonJobs" instantiate="true" checkinterval="30min" checktime="40min" comment="Timer 10/40">
					<conditions>
						<check_all>
							<check_value value="faction.xenon.isactive"/>
							<check_value value="$DADVT.$DAEvolutionEnableJobs"/>
						</check_all>
					</conditions>
					<actions>
						<include_actions ref="LibraryEvolutionOrderXenonShips"/>
					</actions>
				</cue>
				<cue name="TimerEvolutionStations" instantiate="true" checkinterval="30min" checktime="player.age + 1min" comment="Timer 05/35 default">
					<conditions>
						<check_all>
							<check_value value="faction.xenon.isactive"/>
							<check_value value="$DADVT.$DAEvolutionEnable"/>
							<check_value value="$DADVT.$DAEvolutionCurrentLevel gt 0"/>
							<check_value value="$DADVT.$DAEvolutionEnableUpgradeStations"/>
						</check_all>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventEvolutionCheckShipyards"/>
					</actions>
				</cue>
				<!-- Update on load cues // Update on load cues // Update on load cues // Update on load cues // Update on load cues -->
				<!-- Evolution -->
				<cue name="UpdateOnLoadEvolution" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAEvolutionEnable"/>
						<check_value value="$DADVT.$DAEvolutionCurrentLevel gt 0"/>
						<check_value value="faction.xenon.isactive"/>
					</conditions>
					<actions>
						<include_actions ref="LibraryEvolutionSetEQMods"/>
					</actions>
				</cue>
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<!-- Evolution -->
				<cue name="EventEvolutionUpgradeShip" instantiate="true">
					<conditions>
						<event_job_ship_activated/>
						<check_value value="event.param.trueowner == faction.xenon"/>
						<check_value value="$DADVT.$DAEvolutionEnable"/>
						<check_value value="$DADVT.$DAEvolutionCurrentLevel gt 0"/>
						<check_value value="faction.xenon.isactive"/>
						<check_value value="$DAEvolutionCurrentEQMods.count"/>
					</conditions>
					<actions>
						<!-- $DAEvolutionCurrentEQMods {1}Engine {2}Ship {3}Shield {4}Weapon {5}Missile {6}Eco -->
						<!-- Using DAFill Code -->
						<set_value name="$DAEvolutionWeaponGroupTags" exact="[]"/>
						<set_value name="$DAEvolutionWeaponMacros" exact="[]"/>
						<!-- Apply EQ mods -->
						<!-- Engine mods work with simple method -->
						<add_equipment_mods object="event.param">
							<engine ware="$DAEvolutionCurrentEQMods.{1}"/>
						</add_equipment_mods>
						<!-- Ship mods work with simple method -->
						<do_if value="(event.param.primarypurpose == purpose.trade) or (event.param.primarypurpose == purpose.mine)">
							<add_equipment_mods object="event.param">
								<ship ware="$DAEvolutionCurrentEQMods.{6}"/>
							</add_equipment_mods>
						</do_if>
						<do_else>
							<add_equipment_mods object="event.param">
								<ship ware="$DAEvolutionCurrentEQMods.{2}"/>
							</add_equipment_mods>
						</do_else>
						<!-- Shield mods mostly work with simple method -->
						<add_equipment_mods object="event.param">
							<shield ware="$DAEvolutionCurrentEQMods.{3}"/>
						</add_equipment_mods>
						<!-- Have to use complicated method for weapons/turrets on L/XL-->
						<do_for_each name="$DAEvolutionWeapon" in="event.param.weapons.all.list">
							<do_if value="$DAEvolutionWeapon.grouptag and (not $DAEvolutionWeaponGroupTags.indexof.{$DAEvolutionWeapon.grouptag})">
								<do_if value="$DAEvolutionWeapon.isclass.[class.missileturret,class.missilelauncher]">
									<add_equipment_mods object="event.param">
										<weapon ware="$DAEvolutionCurrentEQMods.{5}" context="'..'" group="$DAEvolutionWeapon.grouptag"/>
									</add_equipment_mods>
									<append_to_list name="$DAEvolutionWeaponGroupTags" exact="$DAEvolutionWeapon.grouptag"/>
								</do_if>
								<do_else>
									<add_equipment_mods object="event.param">
										<weapon ware="$DAEvolutionCurrentEQMods.{4}" context="'..'" group="$DAEvolutionWeapon.grouptag"/>
									</add_equipment_mods>
									<append_to_list name="$DAEvolutionWeaponGroupTags" exact="$DAEvolutionWeapon.grouptag"/>
								</do_else>
							</do_if>
							<do_elseif value="($DAEvolutionWeapon.macro) and (not $DAEvolutionWeaponMacros.indexof.{$DAEvolutionWeapon.macro}) and (not $DAEvolutionWeaponGroupTags.indexof.{$DAEvolutionWeapon.grouptag})">
								<do_if value="$DAEvolutionWeapon.isclass.[class.missileturret,class.missilelauncher]">
									<add_equipment_mods object="event.param">
										<weapon ware="$DAEvolutionCurrentEQMods.{5}" macro="$DAEvolutionWeapon.macro"/>
									</add_equipment_mods>
									<append_to_list name="$DAEvolutionWeaponMacros" exact="$DAEvolutionWeapon.macro"/>
								</do_if>
								<do_elseif value="not (@$DAEvolutionWeapon.hasweaponmod == null)">
									<add_equipment_mods object="event.param">
										<weapon ware="$DAEvolutionCurrentEQMods.{4}" macro="$DAEvolutionWeapon.macro"/>
									</add_equipment_mods>
									<append_to_list name="$DAEvolutionWeaponMacros" exact="$DAEvolutionWeapon.macro"/>
								</do_elseif>
							</do_elseif>
						</do_for_each>
						<remove_value name="$DAEvolutionWeapon"/>
						<remove_value name="$DAEvolutionWeaponGroupTags"/>
						<remove_value name="$DAEvolutionWeaponMacros"/>
					</actions>
				</cue>
				<cue name="EventEvolutionRequestJobShip" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$JobID,$Sector,$JobMainZone] -->
						<request_job_ship name="this.$LocRequestedShip" job="event.param.{1}" requester="event.param.{2}" zone="event.param.{3}"/>
						<do_if value="this.$LocRequestedShip">
							<set_value name="this.$LocJobID" exact="event.param.{1}"/>
							<set_value name="this.$LocSector" exact="event.param.{2}"/>
							<set_value name="this.$LocJobMainZone" exact="event.param.{3}"/>
							<append_to_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="this.$LocRequestedShip"/>
							<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
								<debug_text text="'MOD: DAEvolution -- %s -- Placed %s Request -- ShipyardSector: %s -- JobMainSector: %s -- LocRequestedShip: %s -- $DAEvolutionXenonShipTempList.count: %s'.[player.age,this.$LocJobID,this.$LocSector.knownname,this.$LocJobMainZone.sector.knownname,this.$LocRequestedShip,@md.$DADynamicVarTable.$DAEvolutionXenonShipTempList.count]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_else>
							<cancel_cue cue="EventEvolutionRequestJobShip"/>
						</do_else>
					</actions>
					<cues>
						<!-- Called when a requested jobship finished construction -->
						<cue name="EventEvolutionShipBuilt">
							<conditions>
								<event_object_signalled object="parent.$LocRequestedShip" param="'build.shiptrader'" param2="'requested_ship_built'"/>
							</conditions>
							<actions>
								<set_requested_job_ship_timeout ship="parent.$LocRequestedShip" timeout="player.age + 4h"/>
								<create_order object="parent.$LocRequestedShip" id="'RestockSubordinates'">
									<param name="init" value="true"/>
								</create_order>
								<do_if value="parent.$LocRequestedShip">
									<add_to_group groupname="md.$DADynamicVarTable.$DAEvolutionXenonShipGroup" object="parent.$LocRequestedShip"/>
									<!-- Remove the ship from $DAEvolutionXenonShipTempList -->
									<do_if value="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList.indexof.{parent.$LocRequestedShip}">
										<remove_from_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="parent.$LocRequestedShip" multiple="false"/>
									</do_if>
									<set_value name="md.$DADynamicVarTable.$DAEvolutionTotalShipsBuilt" exact="1" operation="add"/>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
									<debug_text text="'MOD: DAEvolution -- %s -- Xenon ship activated. Ship: %s(%s) -- Job: %s -- JobMainSector: %s -- Location: %s -- Total Ships Alive: %s -- Total Ships Built: %s'.[player.age,parent.$LocRequestedShip.knownname,parent.$LocRequestedShip.idcode,parent.$LocRequestedShip.job,parent.$LocRequestedShip.jobmainsector.knownname,parent.$LocRequestedShip.sector.knownname,md.$DADynamicVarTable.$DAEvolutionXenonShipGroup.count,@md.$DADynamicVarTable.$DAEvolutionTotalShipsBuilt]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventEvolutionRequestJobShip"/>
							</actions>
						</cue>
						<!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
						<cue name="EventEvolutionShipDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$LocRequestedShip"/>
							</conditions>
							<actions>
								<remove_from_list name="md.$DADynamicVarTable.$DAEvolutionXenonShipTempList" exact="parent.$LocRequestedShip" multiple="false"/>
								<cancel_cue cue="EventEvolutionRequestJobShip"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventEvolutionCheckShipyards" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<do_if value="$DADVT.$DAEvolutionCurrentLevel and $DADVT.$DAEvolutionEnableUpgradeStations">
							<find_station_by_true_owner name="$LocEvolutionXenonShipyards" faction="faction.xenon" multiple="true" space="player.galaxy" functional="true" shipyard="true"/>
							<do_for_each name="$LocEvolutionStation" in="$LocEvolutionXenonShipyards">
								<set_value name="$LocString" exact="'MOD: DAEvolution -- %s -- Station info for %s(%s)(%s)'.[player.age,$LocEvolutionStation.knownname,$LocEvolutionStation.idcode,$LocEvolutionStation.sector.knownname]"/>
								<!-- $LocModulesToAdd = [$StorageMacro, $BuildModuleMacro, $DefenceModuleMacro] -->
								<set_value name="$LocModulesToAdd" exact="[null,null,null]"/>
								<set_value name="$LocDesiredBuildModules" exact="[0,3,3,4,4,5]"/>
								<set_value name="$LocBuildModuleCount" exact="0"/>
								<do_for_each name="$Module" in="$LocEvolutionStation.modules.all.list">
									<do_if value="$DADVT.$DAEvolutionDetailedDebug">
										<set_value name="$LocString" exact="'\n  Module: %s -- Macro: %s -- IsFunctional: %s -- Class: %s'.[$Module.knownname,$Module.macro,$Module.isfunctional,$Module.class]" operation="add"/>
									</do_if>
									<do_if value="not $Module.isclass.[class.storage,class.buildmodule,class.defencemodule]">
										<!-- Nothing -->
									</do_if>
									<do_elseif value="$Module.isclass.storage and ($LocModulesToAdd.{1} == null)">
										<set_value name="$LocModulesToAdd.{1}" exact="$Module.macro"/>
									</do_elseif>
									<do_elseif value="$Module.isclass.buildmodule">
										<do_if value="$LocModulesToAdd.{2} == null">
											<set_value name="$LocModulesToAdd.{2}" exact="$Module.macro"/>
										</do_if>
										<set_value name="$LocBuildModuleCount" exact="1" operation="add"/>
									</do_elseif>
									<do_elseif value="$Module.isclass.defencemodule and ($LocModulesToAdd.{3} == null)">
										<set_value name="$LocModulesToAdd.{3}" exact="$Module.macro"/>
									</do_elseif>
								</do_for_each>
								<do_if value="($LocBuildModuleCount lt $LocDesiredBuildModules.{$DADVT.$DAEvolutionCurrentLevel + 1}) and $LocModulesToAdd.{1} and $LocModulesToAdd.{2} and $LocModulesToAdd.{3}">
									<set_value name="$NewModules" exact="[]"/>
									<set_value name="$LocMultiplier" exact="$LocDesiredBuildModules.{$DADVT.$DAEvolutionCurrentLevel + 1} - $LocBuildModuleCount"/>
									<do_all exact="$LocMultiplier" counter="$A">
										<!-- 2 Storage, 1 BuildModule, 1 DefenceModule -->
										<append_to_list name="$NewModules" exact="$LocModulesToAdd.{1}"/>
										<append_to_list name="$NewModules" exact="$LocModulesToAdd.{1}"/>
										<append_to_list name="$NewModules" exact="$LocModulesToAdd.{2}"/>
										<append_to_list name="$NewModules" exact="$LocModulesToAdd.{3}"/>
										<do_if value="$DADVT.$DAEvolutionDetailedDebug">
											<set_value name="$LocString" exact="'\n  AddingModule: Macro: %s'.[$LocModulesToAdd.{1}]" operation="add"/>
											<set_value name="$LocString" exact="'\n  AddingModule: Macro: %s'.[$LocModulesToAdd.{1}]" operation="add"/>
											<set_value name="$LocString" exact="'\n  AddingModule: Macro: %s'.[$LocModulesToAdd.{2}]" operation="add"/>
											<set_value name="$LocString" exact="'\n  AddingModule: Macro: %s'.[$LocModulesToAdd.{3}]" operation="add"/>
										</do_if>
									</do_all>
									<do_if value="$NewModules.count">
										<signal_cue_instantly cue="EventEvolutionUpgradeShipyard" param="[$LocEvolutionStation,$NewModules]"/>
									</do_if>
									<remove_value name="$NewModules"/>
									<remove_value name="$LocMultiplier"/>
								</do_if>
								<do_if value="$DADVT.$DAEvolutionDetailedDebug">
									<debug_text text="$LocString" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="$LocString"/>
								<remove_value name="$LocModulesToAdd"/>
								<remove_value name="$LocDesiredBuildModules"/>
								<remove_value name="$LocBuildModuleCount"/>
							</do_for_each>
							<remove_value name="$LocEvolutionXenonShipyards"/>
						</do_if>
					</actions>
				</cue>
				<cue name="EventEvolutionUpgradeShipyard" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$LocEvolutionStation,$NewModules] -->
						<set_value name="this.$EvolutionUpgradeStation" exact="event.param.{1}"/>
						<set_value name="this.$NewModules" exact="[]"/>
						<do_if value="typeof event.param.{2} == datatype.list">
							<append_list_elements name="this.$NewModules" other="event.param.{2}"/>
						</do_if>
						<do_else>
							<append_to_list name="this.$NewModules" exact="event.param.{2}"/>
						</do_else>
						<create_construction_sequence station="this.$EvolutionUpgradeStation" base="this.$EvolutionUpgradeStation.plannedconstruction.sequence" macros="this.$NewModules"/>
					</actions>
					<cues>
						<cue name="XenonStationWatcher">
							<conditions>
								<event_object_construction_sequence_created object="parent.$EvolutionUpgradeStation"/>
							</conditions>
							<actions>
								<add_build_to_expand_station result="this.$BuildTask" buildobject="parent.$EvolutionUpgradeStation" object="parent.$EvolutionUpgradeStation.buildstorage" constructionplan="event.param"/>
								<debug_text text="'MOD: DAEvolution -- XenonStation upgrade planned -- %s(%s)(%s)'.[parent.$EvolutionUpgradeStation.knownname,parent.$EvolutionUpgradeStation.idcode,parent.$EvolutionUpgradeStation.sector.knownname]" context="false" filter="scripts"/>
							</actions>
						</cue>
						<cue name="XenonStationDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$EvolutionUpgradeStation"/>
							</conditions>
							<actions>
								<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
							</actions>
						</cue>
						<cue name="XenonStationFinished">
							<conditions>
								<event_build_finished object="parent.$EvolutionUpgradeStation.buildstorage"/>
							</conditions>
							<actions>
								<do_if value="md.$DADynamicVarTable.$DAEvolutionDetailedDebug">
									<debug_text text="'MOD: DAEvolution -- XenonStation upgrade finished -- %s(%s)(%s)'.[parent.$EvolutionUpgradeStation.knownname,parent.$EvolutionUpgradeStation.idcode,parent.$EvolutionUpgradeStation.sector.knownname]" context="false" filter="scripts"/>
								</do_if>
								<cancel_cue cue="EventEvolutionUpgradeShipyard"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries -->
				<!-- Evolution -->
				<library name="LibraryEvolutionCheckLevels">
					<actions>
						<set_value name="$EvolutionXenonStations" exact="[]"/>
						<find_station_by_true_owner name="$EvolutionXenonStations" faction="faction.xenon" space="player.galaxy" canbuildships="true" checkoperational="true" multiple="true"/>
						<do_if value="$EvolutionXenonStations.count">
							<do_if value="$DADVT.$DAEvolutionCurrentLevel lt $DADVT.$DAEvolutionMaxLevel">
								<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="1" operation="add"/>
								<set_value name="$DAEvolutionLastUpgradeTime" exact="player.age"/>
								<do_if value="$DADVT.$DAEvolutionCurrentLevel gt 0">
									<include_actions ref="LibraryEvolutionSetEQMods"/>
								</do_if>
							</do_if>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAEvolution -- %s -- Xenon have no stations.'.[player.age]" context="false" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryEvolutionSetEQMods">
					<actions>
						<do_if value="$DADVT.$DAEvolutionCurrentLevel ge 0">
							<!-- $DAEvolutionCurrentEQMods {1}Engine {2}Ship {3}Shield {4}Weapon {5}Missile {6}Eco -->
							<do_if value="$DADVT.$DAEvolutionCurrentLevel == 1">
								<set_value name="$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_1_da,ware.mod_ship_xenon_1_da,ware.mod_shield_xenon_1_da,ware.mod_weapon_xenon_1_da,ware.mod_weapon_xenon_missile_1_da,ware.mod_ship_xenon_eco_1_da]"/>
							</do_if>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 2">
								<set_value name="$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_2_da,ware.mod_ship_xenon_2_da,ware.mod_shield_xenon_2_da,ware.mod_weapon_xenon_2_da,ware.mod_weapon_xenon_missile_2_da,ware.mod_ship_xenon_eco_2_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 3">
								<set_value name="$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_3_da,ware.mod_ship_xenon_3_da,ware.mod_shield_xenon_3_da,ware.mod_weapon_xenon_3_da,ware.mod_weapon_xenon_missile_3_da,ware.mod_ship_xenon_eco_3_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 4">
								<set_value name="$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_4_da,ware.mod_ship_xenon_4_da,ware.mod_shield_xenon_4_da,ware.mod_weapon_xenon_4_da,ware.mod_weapon_xenon_missile_4_da,ware.mod_ship_xenon_eco_4_da]"/>
							</do_elseif>
							<do_elseif value="$DADVT.$DAEvolutionCurrentLevel == 5">
								<set_value name="$DAEvolutionCurrentEQMods" exact="[ware.mod_engine_xenon_5_da,ware.mod_ship_xenon_5_da,ware.mod_shield_xenon_5_da,ware.mod_weapon_xenon_5_da,ware.mod_weapon_xenon_missile_5_da,ware.mod_ship_xenon_eco_5_da]"/>
							</do_elseif>
						</do_if>
					</actions>
				</library>
				<library name="LibraryEvolutionOrderXenonShips">
					<actions>
						<do_if value="$DADVT.$DAEvolutionMaxXenonJobs and $DADVT.$DAEvolutionXenonFleetSize and ($DADVT.$DAEvolutionXenonFleetSizeName != null)">
							<!-- string manipulation for job names -->
							<set_value name="$DAEvolutionXenonCarrierFleetJob" exact="'xenon_carrier_patrol_'"/>
							<set_value name="$DAEvolutionXenonDestroyerFleetJob" exact="'xenon_destroyer_patrol_'"/>
							<set_value name="$DAEvolutionXenonCarrierFleetJob" exact="$DADVT.$DAEvolutionXenonFleetSizeName" operation="add"/>
							<set_value name="$DAEvolutionXenonDestroyerFleetJob" exact="$DADVT.$DAEvolutionXenonFleetSizeName" operation="add"/>
							<debug_text text="'MOD: DAEvolution -- %s -- Xenon job names: %s -- %s.'.[player.age,$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
							<!-- Find ship counts. -->
							<find_ship_by_true_owner groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers" faction="faction.xenon" job="$DAEvolutionXenonFleetJobs" checkoperational="true" space="player.galaxy" multiple="true" append="true"/>
							<include_actions ref="LibraryEvolutionCheckOperationalShips"/>
							<debug_text text="'MOD: DAEvolution -- %s -- Xenon ships active: %s -- Max Fleets %s'.[player.age,($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count),$DADVT.$DAEvolutionMaxXenonJobs]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
							<!-- Decide if we need more -->
							<!-- This count is more difficult than necessary due to ordered ships not being caught by find group above -->
							<do_if value="($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count) lt $DADVT.$DAEvolutionMaxXenonJobs">
								<!-- Find if Xenon can actually build ships -->
								<find_sector name="$DAEvolutionLocOwnedSectors" owner="faction.xenon" multiple="true" append="false"/>
								<do_if value="$DAEvolutionLocOwnedSectors.count">
									<find_station_by_true_owner name="$DAEvolutionLocShipyards" space="$DAEvolutionLocOwnedSectors" canbuildships="true" faction="faction.xenon" shipyard="true" multiple="true" required="true">
										<match_content class="class.buildmodule" checkoperational="true"/>
									</find_station_by_true_owner>
									<debug_text text="'MOD: DAEvolution -- %s -- Xenon shipyards: %s'.[player.age,$DAEvolutionLocShipyards.count]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
									<do_if value="$DAEvolutionLocShipyards.count">
										<do_if value="$DADVT.$DAEvolutionEnableFastOrder">
											<!-- Order multiple at a time -->
											<set_value name="$DAEvolutionLocNumberOfShipsToBuild" exact="[($DADVT.$DAEvolutionMaxXenonJobs - ($DADVT.$DAEvolutionXenonFleetJobNumbers.count + $DADVT.$DAEvolutionXenonShipGroup.count + $DADVT.$DAEvolutionXenonShipTempList.count)),$DAEvolutionLocShipyards.count].min"/>
										</do_if>
										<do_else>
											<!-- Order one -->
											<set_value name="$DAEvolutionLocNumberOfShipsToBuild" exact="1"/>
										</do_else>
										<shuffle_list list="$DAEvolutionLocShipyards"/>
										<get_factions_by_relation result="$DAEvolutionLocXenonEnemies" faction="faction.xenon" relation="killmilitary"/>
										<do_all exact="$DAEvolutionLocNumberOfShipsToBuild" counter="$S">
											<set_value name="$DAEvolutionLocSelectedShipyard" exact="$DAEvolutionLocShipyards.{$S}"/>
											<!-- find closest sector bordering with relation le killmilitary -->
											<find_sector name="$DAEvolutionLocHostileSectors" space="player.galaxy" owner="$DAEvolutionLocXenonEnemies" reachablefrom="$DAEvolutionLocSelectedShipyard.sector" sortbygatedistanceto="$DAEvolutionLocSelectedShipyard" sortdescending="false" multiple="true"/>
											<!-- get closest Xenon sector from hostile sectors -->
											<do_for_each name="$DAEvolutionLocHostileSector" in="$DAEvolutionLocHostileSectors">
												<find_sector_in_range name="$DAEvolutionLocSectorsInRange" object="$DAEvolutionLocHostileSector" maxdistance="1" owner="faction.xenon" multiple="true"/>
												<do_if value="$DAEvolutionLocSectorsInRange.count" min="1">
													<sort_list list="$DAEvolutionLocSectorsInRange" sortbyvalue="loop.element.gatedistance.{$DAEvolutionLocSelectedShipyard}"/>
													<set_value name="$DAEvolutionLocSelectedSector" exact="$DAEvolutionLocSectorsInRange.{1}"/>
													<find_gate name="$DAEvolutionLocGate" space="$DAEvolutionLocSelectedSector" active="true" multiple="false" required="true" append="false"/>
													<find_zone name="$DAEvolutionLocZone" space="$DAEvolutionLocSelectedSector" normalzone="true" multiple="false" append="false">
														<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
													</find_zone>
													<do_if value="$DAEvolutionLocGate">
														<debug_text text="'MOD: DAEvolution -- %s -- Selected Shipyard in: %s -- Selected Xenon sector: %s'.[player.age,$DAEvolutionLocSelectedShipyard.sector.knownname,$DAEvolutionLocSelectedSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
														<break/>
													</do_if>
												</do_if>
											</do_for_each>
											<do_if value="@$DAEvolutionLocGate">
												<!-- We have the job, sector, gate for zone -->
												<set_value name="$LocEvoJob" exact="[$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob].random"/>
												<!-- event.param = [$JobID,$Shipyard,$JobMainZone] -->
												<signal_cue_instantly cue="EventEvolutionRequestJobShip" param="[$LocEvoJob,$DAEvolutionLocSelectedSector,$DAEvolutionLocGate.zone]"/>
												<debug_text text="'MOD: DAEvolution -- %s -- Requested %s ship with gate -- ShipyardSector: %s -- JobMainSector: %s.'.[player.age,$LocEvoJob,$DAEvolutionLocSelectedSector.knownname,$DAEvolutionLocGate.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
												<remove_value name="$LocEvoJob"/>
											</do_if>
											<do_elseif value="@$DAEvolutionLocZone">
												<!-- We do not have the gate for zone -->
												<set_value name="$LocEvoJob" exact="[$DAEvolutionXenonCarrierFleetJob,$DAEvolutionXenonDestroyerFleetJob].random"/>
												<!-- event.param = [$JobID,$Shipyard,$JobMainZone] -->
												<signal_cue_instantly cue="EventEvolutionRequestJobShip" param="[$LocEvoJob,$DAEvolutionLocSelectedSector,$DAEvolutionLocZone]"/>
												<debug_text text="'MOD: DAEvolution -- %s -- Requested %s ship with sector and zone -- ShipyardSector: %s -- JobMainSector: %s.'.[player.age,$LocEvoJob,$DAEvolutionLocSelectedSector.knownname,$DAEvolutionLocZone.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
												<remove_value name="$LocEvoJob"/>
											</do_elseif>
											<remove_value name="$DAEvolutionLocSelectedShipyard"/>
											<remove_value name="$DAEvolutionLocHostileSectors"/>
											<remove_value name="$DAEvolutionLocHostileSector"/>
											<remove_value name="$DAEvolutionLocSectorsInRange"/>
											<remove_value name="$DAEvolutionLocSelectedSector"/>
											<remove_value name="$DAEvolutionLocGate"/>
											<remove_value name="$DAEvolutionLocZone"/>
										</do_all>
										<remove_value name="$DAEvolutionLocNumberOfShipsToBuild"/>
									</do_if>
									<remove_value name="$DAEvolutionLocXenonEnemies"/>
									<remove_value name="$DAEvolutionLocShipyards"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAEvolution -- %s -- Xenon has no sectors.'.[player.age]" context="false" filter="error"/>
								</do_else>
								<remove_value name="$DAEvolutionLocOwnedSectors"/>
							</do_if>
							<do_else>
								<debug_text text="'MOD: DAEvolution -- %s -- Xenon ships at or above max, skipping activation.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
							</do_else>
							<remove_value name="$DAEvolutionXenonCarrierFleetJob"/>
							<remove_value name="$DAEvolutionXenonDestroyerFleetJob"/>
							<remove_value name="$DAEvolutionXenonCarrierFleetJobNumbers"/>
							<remove_value name="$DAEvolutionXenonDestroyerFleetJobNumbers"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAEvolution -- %s -- ERROR: Missing Var for Xenon Jobs. $DADVT.$DAEvolutionMaxXenonJobs %s -- $DAEvolutionXenonFleetSizeSmall %s -- $DAEvolutionXenonFleetSizeMedium %s -- $DAEvolutionXenonFleetSizeLarge %s'.[player.age,$DADVT.$DAEvolutionMaxXenonJobs,$DAEvolutionXenonFleetSizeSmall,$DAEvolutionXenonFleetSizeMedium,$DAEvolutionXenonFleetSizeLarge]" context="false" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryEvolutionCheckOperationalShips">
					<actions>
						<!-- Check if ships in list are in group yet -->
						<!-- $DADVT.$DAEvolutionXenonFleetJobNumbers contains ships found by find_ships in LibraryEvolutionOrderXenonShips -->
						<!-- $DADVT.$DAEvolutionXenonShipGroup should contain all operational -->
						<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.count or $DADVT.$DAEvolutionXenonShipTempList.count or $DADVT.$DAEvolutionXenonShipGroup.count">
							<do_if value="$DADVT.$DAEvolutionXenonShipTempList.count">
								<!-- These are ships ordered, but may not be operational -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonShipTempList" reverse="true">
									<do_if value="(not $DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}) and ($DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip})">
										<add_to_group groupname="$DADVT.$DAEvolutionXenonShipGroup" object="$DAEvolutionLocXShip"/>
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Add to $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonShipTempList -- Ship: %s (%s) -- Job: %s -- Location: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
									<do_elseif value="($DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}) or ($DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip})">
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Removing operational ship from temp list -- Ship: %s (%s) -- Job: %s -- Location: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
									</do_elseif>
									<do_else>
										<!-- this ship should not be active in this case -->
									</do_else>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
							</do_if>
							<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.count">
								<!-- These are ships found in the find_ships search -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonFleetJobNumbers" reverse="true">
									<do_if value="$DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}">
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonFleetJobNumbers -- Ship: %s (%s) -- Job: %s -- Location: %s -- Subordinates: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname,$DAEvolutionLocXShip.subordinates.count]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
									<do_elseif value="not $DADVT.$DAEvolutionXenonShipGroup.indexof.{$DAEvolutionLocXShip}">
										<add_to_group groupname="$DADVT.$DAEvolutionXenonShipGroup" object="$DAEvolutionLocXShip"/>
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Add to $DADVT.$DAEvolutionXenonShipGroup -- Ship: %s (%s) -- Job: %s -- Location: %s -- Subordinates: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname,$DAEvolutionLocXShip.subordinates.count]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_elseif>
									<do_else>
										<!-- We should never reach here -->
									</do_else>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
							</do_if>
							<do_if value="$DADVT.$DAEvolutionXenonShipGroup.count">
								<!-- These are ships found by event_job_ship_activated -->
								<do_for_each name="$DAEvolutionLocXShip" in="$DADVT.$DAEvolutionXenonShipGroup">
									<do_if value="$DADVT.$DAEvolutionXenonShipTempList.indexof.{$DAEvolutionLocXShip}">
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonShipTempList -- Ship: %s (%s) -- Job: %s -- Location: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_list name="$DADVT.$DAEvolutionXenonShipTempList" exact="$DAEvolutionLocXShip" multiple="false"/>
									</do_if>
									<do_if value="$DADVT.$DAEvolutionXenonFleetJobNumbers.indexof.{$DAEvolutionLocXShip}">
										<debug_text text="'MOD: DAEvolution -- %s -- LibraryEvolutionCheckOperationalShips: Remove $DADVT.$DAEvolutionXenonShipGroup from $DADVT.$DAEvolutionXenonFleetJobNumbers -- Ship: %s (%s) -- Job: %s -- Location: %s'.[player.age,$DAEvolutionLocXShip.macro,$DAEvolutionLocXShip.idcode,$DAEvolutionLocXShip.job,$DAEvolutionLocXShip.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
										<remove_from_group group="$DADVT.$DAEvolutionXenonFleetJobNumbers" object="$DAEvolutionLocXShip"/>
									</do_if>
								</do_for_each>
								<remove_value name="$DAEvolutionLocXShip"/>
								<!-- Moved restock to when ship is activated -->
							</do_if>
							<debug_text text="'MOD: DAEvolution -- %s -- Xenon ship count by variable -- $DADVT.$DAEvolutionXenonShipGroup.count: %s -- $DADVT.$DAEvolutionXenonFleetJobNumbers.count: %s -- $DADVT.$DAEvolutionXenonShipTempList.count: %s'.[player.age,$DADVT.$DAEvolutionXenonShipGroup.count,$DADVT.$DAEvolutionXenonFleetJobNumbers.count,$DADVT.$DAEvolutionXenonShipTempList.count]" context="false" filter="scripts" chance="$DADVT.$DAEvolutionDetailedDebug * 100"/>
						</do_if>
					</actions>
				</library>
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Evolution -->
				<library name="LibraryCheckEvolutionVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAEvolutionEnable?">
							<set_value name="$DADVT.$DAEvolutionEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionInterval?">
							<set_value name="$DADVT.$DAEvolutionInterval" exact="120"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionMaxLevel?">
							<set_value name="$DADVT.$DAEvolutionMaxLevel" exact="5"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionCurrentLevel?">
							<set_value name="$DADVT.$DAEvolutionCurrentLevel" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAEvolutionCurrentEQMods?">
							<create_list name="$DAEvolutionCurrentEQMods"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAEvolutionLastUpgradeTime?">
							<set_value name="$DAEvolutionLastUpgradeTime" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableJobs?">
							<set_value name="$DADVT.$DAEvolutionEnableJobs" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionMaxXenonJobs?">
							<set_value name="$DADVT.$DAEvolutionMaxXenonJobs" exact="10"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetSize?">
							<set_value name="$DADVT.$DAEvolutionXenonFleetSize" exact="2"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetSizeName?">
							<set_value name="$DADVT.$DAEvolutionXenonFleetSizeName" exact="'daevoxen_medium'"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonShipGroup?">
							<create_group groupname="$DADVT.$DAEvolutionXenonShipGroup"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonFleetJobNumbers?">
							<create_group groupname="$DADVT.$DAEvolutionXenonFleetJobNumbers"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionXenonShipTempList?">
							<create_list name="$DADVT.$DAEvolutionXenonShipTempList"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAEvolutionXenonFleetJobs?">
							<set_value name="$DAEvolutionXenonFleetJobs" exact="['xenon_carrier_patrol_daevoxen_small','xenon_destroyer_patrol_daevoxen_small','xenon_carrier_patrol_daevoxen_medium','xenon_destroyer_patrol_daevoxen_medium','xenon_carrier_patrol_daevoxen_large','xenon_destroyer_patrol_daevoxen_large']"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionDetailedDebug?">
							<set_value name="$DADVT.$DAEvolutionDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionTotalShipsBuilt?">
							<set_value name="$DADVT.$DAEvolutionTotalShipsBuilt" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableUpgradeStations?">
							<set_value name="$DADVT.$DAEvolutionEnableUpgradeStations" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAEvolutionEnableFastOrder?">
							<set_value name="$DADVT.$DAEvolutionEnableFastOrder" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAEvolution -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Evolution -->
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution // Evolution -->
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<!-- Fill -->
				<cue name="TimerFill" instantiate="true" checkinterval="5min" checktime="45min" comment="Timer 45 default">
					<conditions>
						<check_value value="player.age ge ($DAFillLastCheckTime + ($DADVT.$DAFillCheckInterval)min)"/>
						<check_value value="$DADVT.$DAFillEnable"/>
					</conditions>
					<actions>
						<set_value name="$DAFillLastCheckTime" exact="player.age"/>
						<signal_cue_instantly cue="EventFillFindStations"/>
					</actions>
				</cue>
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<!-- Fill -->
				<cue name="EventFillFindStations" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- DEBUG CHANCE VALUE -->
						<set_value name="$DADVT.$DAFillDetailedDebug" exact="false"/>
						<!-- FIND THE STATIONS -->
						<find_station groupname="$DAFillLocStationGroup" append="true" multiple="true" space="player.galaxy" functional="true" tradestation="true">
							<match owner="faction.player" negate="true"/>
							<match_any>
								<match tradestation="true"/>
								<match shipyard="true"/>
								<match wharf="true"/>
								<match piratebase="true"/>
								<match equipmentdock="true"/>
							</match_any>
						</find_station>
						<!-- NOTIFY OF STEP -->
						<debug_text text="'MOD: DAFill -- %s -- Completed station search and found %s stations'.[player.age,$DAFillLocStationGroup.count]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
					</actions>
					<cues>
						<cue name="FillProcessWaresLoop">
							<delay exact="$DAFillDelayAlpha"/>
							<actions>
								<do_if value="$DAFillLocStationGroup.count gt 0">
									<set_value name="$DAFillLocStation" exact="$DAFillLocStationGroup.{1}"/>
									<debug_text text="'MOD: DAFill -- %s -- Processing %s in sector %s'.[player.age,$DAFillLocStation.knownname,$DAFillLocStation.sector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
									<include_actions ref="LibraryFillProcessWares"/>
									<remove_from_group group="$DAFillLocStationGroup" object="$DAFillLocStation"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<remove_value name="$DAFillLocStation"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries -->
				<!-- Fill -->
				<library name="LibraryFillProcessWares">
					<actions>
						<do_if value="$DAFillLocStation.exists">
							<set_value name="$_SingleLog_1" exact="0"/>
							<do_if value="$DAFillLocStation.istradestation or $DAFillLocStation.ispiratebase">
								<set_value name="$DAFillLocAddShipMod" exact="false"/>
								<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.tradewares.list">
									<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
									<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
									<set_value name="$DAFillLocAddWareAmount" exact="0"/>
									<set_value name="$DAFillLocRemoveWareAmount" exact="0"/>
									<do_if value="($DADVT.$DAFillMaxTSWarePercent ge $DADVT.$DAFillMaxTSWarePercentAfter)">
										<do_if value="($DAFillLocWareAmount gt $DAFillLocMaxWareAmount * (($DADVT.$DAFillMaxTSWarePercent)f / 100)f)">
											<set_value name="$DAFillLocRemoveWareAmount" exact="($DAFillLocWareAmount - ($DAFillLocMaxWareAmount * (($DADVT.$DAFillMaxTSWarePercentAfter)f / 100)f))i"/>
										</do_if>
									</do_if>
									<do_if value="($DADVT.$DAFillMinTSWarePercent le $DADVT.$DAFillMinTSWarePercentAfter)">
										<do_if value="$DAFillLocWareAmount lt $DAFillLocMaxWareAmount * (($DADVT.$DAFillMinTSWarePercent)f / 100)f">
											<set_value name="$DAFillLocAddWareAmount" exact="(($DAFillLocMaxWareAmount * (($DADVT.$DAFillMinTSWarePercentAfter)f / 100)f) - $DAFillLocWareAmount)i"/>
										</do_if>
									</do_if>
									<do_if value="$DAFillLocAddWareAmount gt 0 or $DAFillLocRemoveWareAmount gt 0">
										<do_if value="$_SingleLog_1 == 0">
											<!-- single log -->
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="' '" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'[%s] -- Processing TradeStation Cargo of %s'.[$DAFillLocStation.knownname, player.systemtime.{'%Y-%m-%d %H:%M:%S'}]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<set_value name="$_SingleLog_1" exact="1"/>
										</do_if>
										<do_if value="$DAFillLocAddWareAmount gt 0">
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'Adding %s units of %s'.[$DAFillLocWare.name, $DAFillLocAddWareAmount]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<add_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocAddWareAmount"/>
											<debug_text text="'MOD: DAFill -- %s -- %s (%s) -- Adding %s units of %s'.[player.age,$DAFillLocStation.knownname,$DAFillLocStation.sector.knownname, $DAFillLocAddWareAmount, $DAFillLocWare.name]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
										</do_if>
										<do_if value="$DAFillLocRemoveWareAmount gt 0">
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'Removing %s units of %s'.[$DAFillLocWare.name, $DAFillLocRemoveWareAmount]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<remove_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocRemoveWareAmount"/>
											<debug_text text="'MOD: DAFill -- %s -- %s (%s) -- Removing %s units of %s'.[player.age,$DAFillLocStation.knownname,$DAFillLocStation.sector.knownname, $DAFillLocRemoveWareAmount, $DAFillLocWare.name]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<set_value name="$DAFillLocAddShipMod" exact="true"/>
										</do_if>
									</do_if>
								</do_for_each>
								<do_if value="$DAFillLocAddShipMod and $DADVT.$DAFillShipModsEnable">
									<include_actions ref="LibraryFillAddShipMod"/>
									<set_value name="$DAFillLocAddShipMod" exact="false"/>
								</do_if>
							</do_if>
							<do_if value="$DAFillLocStation.canbuildships or $DAFillLocStation.isequipmentdock">
								<do_for_each name="$DAFillLocWare" in="$DAFillLocStation.resources.list">
									<set_value name="$DAFillLocWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.count"/>
									<set_value name="$DAFillLocMaxWareAmount" exact="$DAFillLocStation.cargo.{$DAFillLocWare}.target"/>
									<set_value name="$DAFillLocAddWareAmount" exact="0"/>
									<set_value name="$DAFillLocRemoveWareAmount" exact="0"/>
									<do_if value="$DAFillLocWareAmount gt $DAFillLocMaxWareAmount">
										<set_value name="$DAFillLocRemoveWareAmount" exact="($DAFillLocWareAmount - $DAFillLocMaxWareAmount)i"/>
									</do_if>
									<do_if value="($DADVT.$DAFillMinSYWarePercent le $DADVT.$DAFillMinSYWarePercentAfter)">
										<do_if value="$DAFillLocWareAmount lt $DAFillLocMaxWareAmount * (($DADVT.$DAFillMinSYWarePercent)f / 100)f">
											<set_value name="$DAFillLocAddWareAmount" exact="(($DAFillLocMaxWareAmount * (($DADVT.$DAFillMinSYWarePercentAfter)f / 100)f) - $DAFillLocWareAmount)i"/>
										</do_if>
									</do_if>
									<do_if value="$DAFillLocAddWareAmount gt 0 or $DAFillLocRemoveWareAmount gt 0">
										<do_if value="$_SingleLog_1 == 0">
											<!-- single log -->
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="' '" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'[%s] -- Processing Wharf/Shipyard Cargo of %s'.[$DAFillLocStation.knownname, player.systemtime.{'%Y-%m-%d %H:%M:%S'}]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<set_value name="$_SingleLog_1" exact="1"/>
										</do_if>
										<do_if value="$DAFillLocAddWareAmount gt 0">
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'Adding %s units of %s'.[$DAFillLocWare.name, $DAFillLocAddWareAmount]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<add_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocAddWareAmount"/>
											<debug_text text="'MOD: DAFill -- %s -- %s (%s) -- Adding %s units of %s'.[player.age,$DAFillLocStation.knownname,$DAFillLocStation.sector.knownname, $DAFillLocAddWareAmount, $DAFillLocWare.name]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
										</do_if>
										<do_elseif value="$DAFillLocRemoveWareAmount gt 0">
											<debug_to_file name="$DAFillLocStation.knownname" directory="'DeadAir_Fill'" text="'Removing %s units of %s'.[$DAFillLocWare.name, $DAFillLocRemoveWareAmount]" output="false" append="true" chance="$DADVT.$DAFillDetailedDebug * 100"/>
											<remove_cargo object="$DAFillLocStation" ware="$DAFillLocWare" exact="$DAFillLocRemoveWareAmount"/>
											<debug_text text="'MOD: DAFill -- %s -- %s (%s) -- Removing %s units of %s'.[player.age,$DAFillLocStation.knownname,$DAFillLocStation.sector.knownname, $DAFillLocRemoveWareAmount, $DAFillLocWare.name]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
										</do_elseif>
									</do_if>
								</do_for_each>
							</do_if>
							<remove_value name="$DAFillLocWare"/>
							<remove_value name="$DAFillLocWareAmount"/>
							<remove_value name="$DAFillLocMaxWareAmount"/>
							<remove_value name="$DAFillLocAddWareAmount"/>
							<remove_value name="$DAFillLocRemoveWareAmount"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryFillAddShipMod">
					<actions>
						<!-- Faction will get a mod for 1 combat and 1 economy ship each time -->
						<set_value name="$DAFillLocOwner" exact="$DAFillLocStation.trueowner"/>
						<set_value name="$DAFillLocHullMod" exact="[ware.mod_ship_mass_AI,ware.mod_ship_mass_AI_mk2,ware.mod_ship_mass_AI_mk1].random"/>
						<set_value name="$DAFillLocShieldMod" exact="[ware.mod_shield_capacity_AI,ware.mod_shield_capacity_AI_mk2,ware.mod_shield_capacity_AI_mk1].random"/>
						<set_value name="$DAFillLocEngineMod" exact="[ware.mod_engine_forwardthrust_AI,ware.mod_engine_forwardthrust_AI_mk2,ware.mod_engine_forwardthrust_AI_mk1].random"/>
						<set_value name="$DAFillLocWeaponMod" exact="[ware.mod_weapon_damage_AI,ware.mod_weapon_damage_AI_mk2,ware.mod_weapon_damage_AI_mk1].random"/>
						<set_value name="$DAFillLocMiningMod" exact="[ware.mod_weapon_mining_AI,ware.mod_weapon_mining_AI_mk2,ware.mod_weapon_mining_AI_mk1].random"/>
						<set_value name="$DAFillLocMissileMod" exact="[ware.mod_weapon_missile_AI,ware.mod_weapon_missile_AI_mk2,ware.mod_weapon_missile_AI_mk1].random"/>
						<set_value name="$DAFillLocMiningWeapons" exact="[@macro.turret_arg_l_mining_01_mk1_macro,@macro.turret_arg_m_mining_01_mk1_macro,@macro.turret_arg_m_mining_02_mk1_macro,@macro.turret_par_l_mining_01_mk1_macro,
							@macro.turret_par_m_mining_01_mk1_macro,@macro.turret_par_m_mining_02_mk1_macro,@macro.turret_tel_l_mining_01_mk1_macro,@macro.turret_tel_m_mining_01_mk1_macro,@macro.turret_tel_m_mining_02_mk1_macro,
							@macro.weapon_gen_m_mining_01_mk1_macro,@macro.weapon_gen_m_mining_01_mk2_macro,@macro.weapon_gen_s_mining_01_mk1_macro,@macro.weapon_gen_s_mining_01_mk2_macro,@macro.weapon_xen_m_mining_01_mk1_macro,
							@macro.turret_spl_l_mining_01_mk1_macro,@macro.turret_spl_m_mining_01_mk1_macro,@macro.turret_spl_m_mining_02_mk1_macro,@macro.turret_ter_l_mining_01_mk1_macro,@macro.turret_ter_m_mining_01_mk1_macro,
							@macro.turret_ter_m_mining_02_mk1_macro]"/>
						<set_value name="$DAFillLocBrokenWeapons" exact="[macro.weapon_arg_l_destroyer_01_mk1_macro,macro.weapon_par_l_destroyer_01_mk1_macro,macro.weapon_tel_l_destroyer_01_mk1_macro,macro.weapon_spl_l_destroyer_01_mk1_macro,macro.weapon_atf_xl_battleship_01_mk1_macro,macro.weapon_ter_l_destroyer_01_mk1_macro,
							@macro.weapon_spl_l_shell_macro,@macro.weapon_arg_l_ionproj_macro,@macro.weapon_arg_l_fa_centaur_macro,@macro.weapon_arg_l_parray_centaur_macro,@macro.weapon_arg_l_parray_macro,
							@macro.weapon_par_l_tribeam_macro,@macro.weapon_par_l_parray_macro,@macro.weapon_tel_l_posbeam_macro,@macro.weapon_tel_l_parray_macro,@macro.weapon_gen_m_isr_centaur_macro,@macro.weapon_gen_m_laser_centaur_macro,
							@macro.weapon_ter_l_graviton_macro,@macro.turret_spl_multilauncher_macro,@macro.weapon_dal_l_macro,@macro.weapon_dal_xl_macro,@macro.weapon_dam_l_multifrequency_macro,@macro.weapon_dam_l_radio_macro,@macro.weapon_dam_l_standard_macro,
							@macro.weapon_dam_xl_macro,@macro.weapon_dga_l_antimatter_macro,@macro.weapon_dga_l_iron_macro,@macro.weapon_dga_l_lead_macro,@macro.weapon_dga_xl_macro,@macro.weapon_dmi_l_fusion_macro,@macro.weapon_dmi_l_nuclear_macro,@macro.weapon_dmi_l_titanium_macro,
							@macro.weapon_dmi_xl_macro]"/>
						<find_ship_by_true_owner name="$DAFillLocMilShip" multiple="false" space="player.galaxy" validjobship="true" faction="$DAFillLocOwner" functional="true" docked="false">
							<match primarypurpose="purpose.fight"/>
							<match class="[class.ship_l, class.ship_xl]"/>
							<match_any_equipment_mod negate="true"/>
						</find_ship_by_true_owner>
						<find_ship_by_true_owner name="$DAFillLocEcoShip" multiple="false" space="player.galaxy" validjobship="true" faction="$DAFillLocOwner" functional="true" docked="false">
							<match_any>
								<match primarypurpose="purpose.trade"/>
								<match primarypurpose="purpose.build"/>
								<match primarypurpose="purpose.mine"/>
							</match_any>
							<match class="[class.ship_l, class.ship_xl]"/>
							<match_any_equipment_mod negate="true"/>
						</find_ship_by_true_owner>
						<do_if value="$DAFillLocMilShip.exists">
							<set_value name="$DAFillLocWeaponGroupTags" exact="[]"/>
							<set_value name="$DAFillLocWeaponMacros" exact="[]"/>
							<set_value name="$DAFillLocShieldGroupTags" exact="[]"/>
							<set_value name="$DAFillLocShieldMacros" exact="[]"/>
							<add_equipment_mods object="$DAFillLocMilShip">
								<engine ware="$DAFillLocEngineMod"/>
							</add_equipment_mods>
							<add_equipment_mods object="$DAFillLocMilShip">
								<ship ware="$DAFillLocHullMod"/>
							</add_equipment_mods>
							<!-- 20220517 changed operational to all; result:-->
							<!-- 20220517 added grouptag filter to to macro adding portion; result:only L weapons and certain VRO error-->
							<!-- 20220517 added filter for hasweaponmod == null; result:clean debug except for VRO group 11-->
							<!-- 20220517 added check for shield mod installed on the object's main hull shield group; result:-->
							<do_for_each in="$DAFillLocMilShip.shields.all.list" name="$DAFillLocShield">
								<do_if value="($DAFillLocShield.grouptag) and (not $DAFillLocShieldGroupTags.indexof.{$DAFillLocShield.grouptag})">
									<add_equipment_mods object="$DAFillLocMilShip">
										<shield ware="$DAFillLocShieldMod" context="'..'" group="$DAFillLocShield.grouptag"/>
									</add_equipment_mods>
									<append_to_list name="$DAFillLocShieldGroupTags" exact="$DAFillLocShield.grouptag"/>
								</do_if>
							</do_for_each>
							<do_if value="not $DAFillLocMilShip.hasshieldmod">
								<add_equipment_mods object="$DAFillLocMilShip">
									<shield ware="$DAFillLocShieldMod"/>
								</add_equipment_mods>
							</do_if>
							<do_for_each in="$DAFillLocMilShip.weapons.all.list" name="$DAFillLocWeapon">
								<do_if value="($DAFillLocWeapon.grouptag) and (not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag})">
									<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocMissileMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_if>
									<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocMiningMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_elseif>
									<do_else>
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocWeaponMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_else>
									<append_to_list name="$DAFillLocWeaponGroupTags" exact="$DAFillLocWeapon.grouptag"/>
								</do_if>
								<do_elseif value="($DAFillLocWeapon.macro) and (not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}) and (not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag})">
									<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocMissileMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_if>
									<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocMiningMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_elseif>
									<do_elseif value="not (@$DAFillLocWeapon.hasweaponmod == null)">
										<add_equipment_mods object="$DAFillLocMilShip">
											<weapon ware="$DAFillLocWeaponMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_elseif>
									<do_else>
										<debug_text text="'MOD: DAFill -- BROKEN WEAPON -- WEAPON: %s -- $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}: %s -- GROUPTAG: %s -- HASWEAPONMOD: %s -- HASWEAPONMOD.{Weapon} %s'.[@$DAFillLocWeapon.macro,@$DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro},@$DAFillLocWeapon.grouptag,@$DAFillLocWeapon.hasweaponmod,@$DAFillLocWeapon.hasweaponmod.{$DAFillLocWeaponMod}]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
									</do_else>
									<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
								</do_elseif>
							</do_for_each>
							<debug_text text="'MOD: DAFill -- OWNER: %s -- IDCODE: %s -- CLASS: %s -- TYPENAME: %s'.[$DAFillLocMilShip.owner,$DAFillLocMilShip.idcode,$DAFillLocMilShip.class,$DAFillLocMilShip.typename]" output="false" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
							<remove_value name="$DAFillLocMilShip"/>
							<remove_value name="$DAFillLocShield"/>
							<remove_value name="$DAFillLocWeapon"/>
						</do_if>
						<do_if value="$DAFillLocEcoShip.exists">
							<set_value name="$DAFillLocWeaponGroupTags" exact="[]"/>
							<set_value name="$DAFillLocWeaponMacros" exact="[]"/>
							<set_value name="$DAFillLocShieldGroupTags" exact="[]"/>
							<set_value name="$DAFillLocShieldMacros" exact="[]"/>
							<add_equipment_mods object="$DAFillLocEcoShip">
								<engine ware="$DAFillLocEngineMod"/>
							</add_equipment_mods>
							<add_equipment_mods object="$DAFillLocEcoShip">
								<ship ware="$DAFillLocHullMod"/>
							</add_equipment_mods>
							<do_for_each in="$DAFillLocEcoShip.shields.all.list" name="$DAFillLocShield">
								<do_if value="($DAFillLocShield.grouptag) and (not $DAFillLocShieldGroupTags.indexof.{$DAFillLocShield.grouptag})">
									<add_equipment_mods object="$DAFillLocEcoShip">
										<shield ware="$DAFillLocShieldMod" context="'..'" group="$DAFillLocShield.grouptag"/>
									</add_equipment_mods>
									<append_to_list name="$DAFillLocShieldGroupTags" exact="$DAFillLocShield.grouptag"/>
								</do_if>
							</do_for_each>
							<do_if value="not $DAFillLocEcoShip.hasshieldmod">
								<add_equipment_mods object="$DAFillLocEcoShip">
									<shield ware="$DAFillLocShieldMod"/>
								</add_equipment_mods>
							</do_if>
							<do_for_each in="$DAFillLocEcoShip.weapons.all.list" name="$DAFillLocWeapon">
								<do_if value="($DAFillLocWeapon.grouptag) and (not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag})">
									<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocMissileMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_if>
									<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocMiningMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_elseif>
									<do_else>
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocWeaponMod" context="'..'" group="$DAFillLocWeapon.grouptag"/>
										</add_equipment_mods>
									</do_else>
									<append_to_list name="$DAFillLocWeaponGroupTags" exact="$DAFillLocWeapon.grouptag"/>
								</do_if>
								<do_elseif value="($DAFillLocWeapon.macro) and (not $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}) and (not $DAFillLocWeaponGroupTags.indexof.{$DAFillLocWeapon.grouptag})">
									<do_if value="$DAFillLocWeapon.isclass.[class.missileturret,class.missilelauncher]">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocMissileMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_if>
									<do_elseif value="$DAFillLocMiningWeapons.indexof.{$DAFillLocWeapon.macro}">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocMiningMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_elseif>
									<do_elseif value="not (@$DAFillLocWeapon.hasweaponmod == null)">
										<add_equipment_mods object="$DAFillLocEcoShip">
											<weapon ware="$DAFillLocWeaponMod" macro="$DAFillLocWeapon.macro"/>
										</add_equipment_mods>
									</do_elseif>
									<do_else>
										<debug_text text="'MOD: DAFill -- BROKEN WEAPON -- WEAPON: %s -- $DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro}: %s -- GROUPTAG: %s -- HASWEAPONMOD: %s -- HASWEAPONMOD.{Weapon} %s'.[@$DAFillLocWeapon.macro,@$DAFillLocWeaponMacros.indexof.{$DAFillLocWeapon.macro},@$DAFillLocWeapon.grouptag,@$DAFillLocWeapon.hasweaponmod,@$DAFillLocWeapon.hasweaponmod.{$DAFillLocWeaponMod}]" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
									</do_else>
									<append_to_list name="$DAFillLocWeaponMacros" exact="$DAFillLocWeapon.macro"/>
								</do_elseif>
							</do_for_each>
							<debug_text text="'MOD: DAFill -- OWNER: %s -- IDCODE: %s -- CLASS: %s -- TYPENAME: %s'.[$DAFillLocEcoShip.owner,$DAFillLocEcoShip.idcode,$DAFillLocEcoShip.class,$DAFillLocEcoShip.typename]" output="false" context="false" filter="scripts" chance="$DADVT.$DAFillDetailedDebug * 100"/>
							<remove_value name="$DAFillLocEcoShip"/>
							<remove_value name="$DAFillLocShield"/>
							<remove_value name="$DAFillLocWeapon"/>
						</do_if>
						<remove_value name="$DAFillLocOwner"/>
					</actions>
				</library>
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Fill -->
				<library name="LibraryCheckFillVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAFillEnable?">
							<set_value name="$DADVT.$DAFillEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillShipModsEnable?">
							<set_value name="$DADVT.$DAFillShipModsEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAFillDelayAlpha?">
							<set_value name="$DAFillDelayAlpha" exact="2s"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillCheckInterval?">
							<set_value name="$DADVT.$DAFillCheckInterval" exact="60"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAFillLastCheckTime?">
							<set_value name="$DAFillLastCheckTime" exact="0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMaxTSWarePercent?">
							<set_value name="$DADVT.$DAFillMaxTSWarePercent" exact="90.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMaxTSWarePercentAfter?">
							<set_value name="$DADVT.$DAFillMaxTSWarePercentAfter" exact="75.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinTSWarePercent?">
							<set_value name="$DADVT.$DAFillMinTSWarePercent" exact="5.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinTSWarePercentAfter?">
							<set_value name="$DADVT.$DAFillMinTSWarePercentAfter" exact="10.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinSYWarePercent?">
							<set_value name="$DADVT.$DAFillMinSYWarePercent" exact="5.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillMinSYWarePercentAfter?">
							<set_value name="$DADVT.$DAFillMinSYWarePercentAfter" exact="10.0"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAFillDetailedDebug?">
							<set_value name="$DADVT.$DAFillDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAFill -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Fill -->
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Fill // Fill // Fill // Fill // Fill // Fill // Fill // Fill -->
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Update on load cues // Update on load cues // Update on load cues // Update on load cues // Update on load cues -->
				<!-- Jobs - Expeditions -->
				<cue name="UpdateOnLoadJobsEXP" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="player.age gt 5min"/>
					</conditions>
					<actions>
						<include_actions ref="LibraryJobsEXPUpdateEnemiesAllies"/>
						<include_actions ref="LibraryJobsEXPCheckForSurvivor"/>
						<include_actions ref="LibraryJobsEXPCheckExpeditionReadiness"/>
					</actions>
				</cue>
				<!-- One time Cue // One time Cue // One time Cue // One time Cue // One time Cue -->
				<!-- Jobs - Expedition -->
				<cue name="OneTimeJobsEXPActivate" instantiate="false" checktime="5min" comment="Timer 5">
					<actions>
						<include_actions ref="LibraryJobsEXPCheckFactionsandJobs"/>
					</actions>
				</cue>
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<!-- Jobs - Expeditions -->
				<cue name="TimerJobsExpMain" instantiate="true" checkinterval="60min" checktime="50min" comment="Timer 50">
					<conditions>
						<check_value value="$DADVT.$DAJobsEXPEnable"/>
					</conditions>
					<actions>
						<debug_text text="'MOD: DAJobsEXP -- Timer.'" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
						<include_actions ref="LibraryJobsEXPCheckFactionsandJobs"/>
						<include_actions ref="LibraryJobsEXPUpdateEnemiesAllies"/>
						<include_actions ref="LibraryJobsEXPCheckForSurvivor"/>
						<include_actions ref="LibraryJobsEXPCheckExpeditionReadiness"/>
					</actions>
				</cue>
				<cue name="TimerJobsEXPLaunch" instantiate="true" checkinterval="15min" checktime="58min" comment="Timer 12/27/43/58">
					<conditions>
						<check_value value="$DADVT.$DAJobsEXPEnable"/>
						<check_value value="$DAJobsEXPReadyExpeditionFleets.count"/>
					</conditions>
					<actions>
						<include_actions ref="LibraryJobsEXPLaunchExpeditionFleets"/>
					</actions>
				</cue>
				<!-- Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries -->
				<!-- Jobs - Expeditions -->
				<library name="LibraryJobsEXPCheckFactionsandJobs">
					<actions>
						<!-- DONE: Change to a library -->
						<!-- Update $DADVT.$DAJobsEXPFactions + $DAJobsEXPExpeditionJobs -->
						<!-- if $DADVT.$DAJobsEXPEnable then activate -->
						<!-- if not $DADVT.$DAJobsEXPEnable then deactivate -->
						<debug_text text="'MOD: DAJobsEXP -- Updating EXPFactions, EXPExpedition Jobs, and activating/deactivating expedition jobs.'" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DAJobsEXPLocFactionsToCheck"/>
						<do_for_each name="$DAJobsEXPLocFactionToCheck" in="$DAJobsEXPLocFactionsToCheck">
							<get_suitable_job result="$DAJobsEXPLocJobs" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocFactionToCheck" includeinactive="true" multiple="true"/>
							<do_if value="$DAJobsEXPLocJobs.count">
								<do_for_each name="$DAJobsEXPLocJob" in="$DAJobsEXPLocJobs">
									<check_job_active result="$DAJobsEXPLocIsActive" job="$DAJobsEXPLocJob"/>
									<do_if value="not $DADVT.$DAJobsEXPFactions.indexof.{$DAJobsEXPLocFactionToCheck}">
										<append_to_list name="$DADVT.$DAJobsEXPFactions" exact="$DAJobsEXPLocFactionToCheck"/>
									</do_if>
									<do_if value="not $DAJobsEXPExpeditionJobs.indexof.{$DAJobsEXPLocJob}">
										<append_to_list name="$DAJobsEXPExpeditionJobs" exact="$DAJobsEXPLocJob"/>
									</do_if>
									<do_if value="(not $DAJobsEXPLocIsActive) and ($DAJobsEXPLocFactionToCheck.isactive) and ($DADVT.$DAJobsEXPEnable)">
										<set_job_active activate="true" job="$DAJobsEXPLocJob"/>
										<debug_text text="'MOD: DAJobsEXP -- Activating %s.'.[$DAJobsEXPLocJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
									</do_if>
									<do_elseif value="($DAJobsEXPLocIsActive) and ((not $DAJobsEXPLocFactionToCheck.isactive) or (not $DADVT.$DAJobsEXPEnable))">
										<set_job_active activate="false" job="$DAJobsEXPLocJob"/>
										<debug_text text="'MOD: DAJobsEXP -- Deactivating %s.'.[$DAJobsEXPLocJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
									</do_elseif>
									<remove_value name="$DAJobsEXPLocIsActive"/>
								</do_for_each>
							</do_if>
							<remove_value name="$DAJobsEXPLocJobs"/>
						</do_for_each>
						<remove_value name="$DAJobsEXPLocFactionsToCheck"/>
						<get_suitable_job result="$DAJobsEXPLocActiveJobs" tags="$DAJobsEXPTags" includeinactive="false" multiple="true"/>
						<debug_text text="'MOD: DAJobsEXP -- Active count: %s -- Attempted count: %s.'.[$DAJobsEXPLocActiveJobs.count,$DAJobsEXPExpeditionJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
						<remove_value name="$DAJobsEXPLocActiveJobs"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPUpdateEnemiesAllies">
					<actions>
						<!-- Find claimspace factions -->
						<set_value name="$DAJobsEXPClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DAJobsEXPClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$DAJobsEXPVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$DAJobsEXPVisitorList"/>
						<!-- Remove excluded, peaceful, and visitors from claimspace list -->
						<remove_from_list name="$DAJobsEXPClaimspaceList" list="$DAJobsEXPExcludedFactions" multiple="true"/>
						<remove_from_list name="$DAJobsEXPClaimspaceList" list="$DAJobsEXPVisitorList" multiple="true"/>
						<set_value name="$DAJobsEXPLocFactionList" exact="[]"/>
						<!-- Check for errors instead of nesting -->
						<do_for_each name="$DAJobsEXPLocExpeditionFaction" in="$DADVT.$DAJobsEXPFactions">
							<do_if value="$DAJobsEXPLocExpeditionFaction.isactive and $DAJobsEXPLocExpeditionFaction.willclaimspace">
								<find_sector name="$DAJobsEXPLocSectors" owner="$DAJobsEXPLocExpeditionFaction" multiple="true"/>
								<do_if value="$DAJobsEXPErrorFactions.indexof.{$DAJobsEXPLocExpeditionFaction}">
									<!-- If faction previously worked then reset error -->
									<remove_from_list name="$DAJobsEXPErrorFactions" exact="$DAJobsEXPLocExpeditionFaction" multiple="true"/>
								</do_if>
								<do_if value="$DAJobsEXPLocSectors.count" min="1">
									<!-- Only focus on factions who own a sector -->
									<append_to_list name="$DAJobsEXPLocFactionList" exact="$DAJobsEXPLocExpeditionFaction"/>
								</do_if>
							</do_if>
							<do_elseif value="not $DAJobsEXPErrorFactions.indexof.{$DAJobsEXPLocExpeditionFaction}">
								<debug_text text="'MOD: DAJobsEXP -- %s -- isactive: %s -- willclaimspace: %s.'.[$DAJobsEXPLocExpeditionFaction,$DAJobsEXPLocExpeditionFaction.isactive,$DAJobsEXPLocExpeditionFaction.willclaimspace]" context="false" filter="error"/>
								<!-- Faction will only error once -->
								<append_to_list name="$DAJobsEXPErrorFactions" exact="$DAJobsEXPLocExpeditionFaction"/>
							</do_elseif>
						</do_for_each>
						<remove_value name="$DAJobsEXPLocExpeditionFaction"/>
						<remove_value name="$DAJobsEXPLocSectors"/>
						<set_value name="$DAjobsEXPLocAllyEnemyString" exact="'MOD: DAJobsEXP -- %s -- Updated Allies/Enemies Report'.[player.age]"/>
						<do_for_each name="$DAJobsEXPLocFaction" in="$DAJobsEXPLocFactionList">
							<set_value name="$DAjobsEXPLocAllyEnemyString" exact="'\n %s Report:'.[$DAJobsEXPLocFaction]" operation="add"/>
							<do_if value="not $DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}?">
								<set_value name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="[]"/>
							</do_if>
							<do_if value="not $DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}?">
								<set_value name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="[]"/>
							</do_if>
							<do_for_each name="$DAJobsEXPLocClaimspaceFaction" in="$DAJobsEXPClaimspaceList">
								<do_if value="($DAJobsEXPLocFaction != $DAJobsEXPLocClaimspaceFaction) and ($DAJobsEXPLocClaimspaceFaction.isactive) and ($DAJobsEXPLocClaimspaceFaction.willclaimspace)">
									<!-- Only focus on factions who own a sector -->
									<find_sector name="$DAJobsEXPLocSectors" owner="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
									<!-- Enemies -->
									<do_if value="($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} le -0.32) and ($DAJobsEXPLocSectors.count) and (not $DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (Kill+Sectors) AND (NOT already added) -->
										<append_to_list name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Enemy Added: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_if>
									<do_elseif value="(not (($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} le -0.32) and ($DAJobsEXPLocSectors.count))) and ($DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (NOT Kill+Sectors) AND (already added) -->
										<remove_from_list name="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Enemy Removed: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_elseif>
									<do_else>
										<!-- (NOT Kill+Sectors) AND (NOT already added) -->
										<!-- (Kill+Sectors) AND (already added) -->
									</do_else>
									<!-- Allies -->
									<do_if value="($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} ge 0.32) and ($DAJobsEXPLocSectors.count) and (not $DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (Ally+Sectors) AND (NOT already added) -->
										<append_to_list name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Ally Added: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_if>
									<do_elseif value="(not (($DAJobsEXPLocFaction.relationto.{$DAJobsEXPLocClaimspaceFaction} ge 0.32) and ($DAJobsEXPLocSectors.count))) and ($DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}.indexof.{$DAJobsEXPLocClaimspaceFaction})">
										<!-- (NOT Ally+Sectors) AND (already added) -->
										<remove_from_list name="$DAJobsEXPAlliesTable.{$DAJobsEXPLocFaction}" exact="$DAJobsEXPLocClaimspaceFaction" multiple="true"/>
										<set_value name="$DAjobsEXPLocAllyEnemyString" exact="' Ally Removed: %s.'.[$DAJobsEXPLocClaimspaceFaction]" operation="add"/>
									</do_elseif>
									<do_else>
										<!-- (NOT Ally+Sectors) AND (NOT already added) -->
										<!-- (Ally+Sectors) AND (already added) -->
									</do_else>
								</do_if>
								<!-- handle removing old entries -->
							</do_for_each>
						</do_for_each>
						<!-- combine debug messages -->
						<do_if value="$DADVT.$DAJobsEXPDetailedDebug">
							<debug_text text="$DAjobsEXPLocAllyEnemyString" context="false" filter="scripts"/>
						</do_if>
						<remove_value name="$DAjobsEXPLocAllyEnemyString"/>
						<remove_value name="$DAJobsEXPLocFaction"/>
						<remove_value name="$DAJobsEXPLocClaimspaceFaction"/>
						<remove_value name="$DAJobsEXPLocSectors"/>
						<remove_value name="$DAJobsEXPClaimspaceList"/>
						<remove_value name="$DAJobsEXPVisitorList"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPCheckForSurvivor">
					<actions>
						<do_if value="$DAJobsEXPActiveExpeditionFleets.count">
							<do_for_each name="$DAJobsEXPLocActiveFleet" in="$DAJobsEXPActiveExpeditionFleets" reverse="true">
								<do_if value="($DAJobsEXPLocActiveFleet.order.id == $DAJobsEXPLocActiveFleet.defaultorder.id) and ($DAJobsEXPLocActiveFleet.trueowner == $DAJobsEXPLocActiveFleet.sector.owner)">
									<remove_from_group group="$DAJobsEXPActiveExpeditionFleets" object="$DAJobsEXPLocActiveFleet"/>
									<remove_from_group group="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocActiveFleet"/>
									<debug_text text="'MOD: DAJobsEXP -- LibraryJobsEXPCheckForSurvivor -- %s %s (%s) removed from ActiveExpeditionFleets.'.[$DAJobsEXPLocActiveFleet.trueowner,$DAJobsEXPLocActiveFleet.knownname,$DAJobsEXPLocActiveFleet.idcode]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								</do_if>
							</do_for_each>
							<remove_value name="$DAJobsEXPLocActiveFleet"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsEXPCheckExpeditionReadiness">
					<actions>
						<do_if value="$DAJobsEXPEnemiesTable.keys.count" min="1">
							<set_value name="$DAJobsEXPLocEnemiesTableFactions" exact="$DAJobsEXPEnemiesTable.keys.list"/>
							<set_value name="$LocDebugString" exact="'MOD: DAJobsEXP -- %s -- Check Expedition Readiness Report:'.[player.age]"/>
							<do_for_each name="$DAJobsEXPLocEnemiesTableFaction" in="$DAJobsEXPLocEnemiesTableFactions">
								<set_value name="$LocDebugString" exact="'\n %s Report:'.[$DAJobsEXPLocEnemiesTableFaction]" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								<set_value name="$DAJobsEXPLocExpeditionJob" exact="[null]"/>
								<get_suitable_job result="$DAJobsEXPLocExpeditionJob" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocEnemiesTableFaction" onlycommandeerable="true" multiple="true" append="false"/>
								<do_if value="not @$DAJobsEXPLocExpeditionJob.{1}">
									<set_value name="$LocDebugString" exact="' No Job Found below Quota.'" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
									<get_suitable_job result="$DAJobsEXPLocExpeditionJob" tags="$DAJobsEXPTags" faction="$DAJobsEXPLocEnemiesTableFaction" exceedquota="true" onlycommandeerable="true" multiple="true" append="false"/>
								</do_if>
								<do_if value="@$DAJobsEXPLocExpeditionJob.{1}">
									<set_value name="$LocDebugString" exact="' Job Found Above Quota.'" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
									<find_ship_by_true_owner name="$DAJobsEXPLocPotentialShips" faction="$DAJobsEXPLocEnemiesTableFaction" commandeerable="true" jobtags="$DAJobsEXPTags" space="player.galaxy" multiple="true"/>
									<do_if value="$DAJobsEXPLocPotentialShips">
										<set_value name="$LocDebugString" exact="' %s Expedition Ship(s) Found.'.[@$DAJobsEXPLocPotentialShips.count]" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
										<do_for_each name="$DAJobsEXPLocPotentialShip" in="$DAJobsEXPLocPotentialShips">
											<do_if value="($DAJobsEXPLocPotentialShip.exists) and (not $DAJobsEXPActiveExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip}) and (not $DAJobsEXPReadyExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip})">
												<get_subordinate_jobs jobs="$DAJobsEXPLocSubordinateJobs" amount="$DAJobsEXPLocSubordinateAmounts" commander="$DAJobsEXPLocPotentialShip"/>
												<do_if value="not $DAJobsEXPLocSubordinateJobs.count">
													<!-- has full subordinates -->
													<add_to_group groupname="$DAJobsEXPReadyExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													<set_value name="$LocDebugString" exact="' Fleet Commander Ready: %s(%s)(%s).'.[$DAJobsEXPLocPotentialShip.knownname,$DAJobsEXPLocPotentialShip.idcode,$DAJobsEXPLocPotentialShip.sector.knownname]" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
													<do_if value="$DAJobsEXPPreparingExpeditionFleets.indexof.{$DAJobsEXPLocPotentialShip}">
														<remove_from_group group="$DAJobsEXPPreparingExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													</do_if>
													<include_actions ref="LibraryJobsEXPPatrolShipyardSector"/>
												</do_if>
												<do_elseif value="$DAJobsEXPLocSubordinateJobs.count" min="1">
													<!-- NOT full subordinates -->
													<add_to_group groupname="$DAJobsEXPPreparingExpeditionFleets" object="$DAJobsEXPLocPotentialShip"/>
													<set_value name="$LocDebugString" exact="' Fleet Commander Preparing: %s(%s)(%s) wants %s Subordinate Job(s).'.[$DAJobsEXPLocPotentialShip.knownname,$DAJobsEXPLocPotentialShip.idcode,$DAJobsEXPLocPotentialShip.sector.knownname,$DAJobsEXPLocSubordinateJobs.count]" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
													<include_actions ref="LibraryJobsEXPPatrolShipyardSector"/>
													<create_order object="$DAJobsEXPLocPotentialShip" id="'RestockSubordinates'"/>
												</do_elseif>
												<remove_value name="$DAJobsEXPLocSubordinateJobs"/>
												<remove_value name="$DAJobsEXPLocSubordinateAmounts"/>
											</do_if>
											<do_else>
												<set_value name="$LocDebugString" exact="' All Fleets Tracked.'" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
											</do_else>
										</do_for_each>
										<remove_value name="$DAJobsEXPLocPotentialShip"/>
									</do_if>
									<do_else>
										<set_value name="$LocDebugString" exact="' No Expedition Ship(s) Found.'" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
									</do_else>
									<remove_value name="$DAJobsEXPLocPotentialShips"/>
								</do_if>
								<do_else>
									<set_value name="$LocDebugString" exact="' No Job Found Commandeerable.'" operation="add" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								</do_else>
								<remove_value name="$DAJobsEXPLocExpeditionJob"/>
							</do_for_each>
							<debug_text text="'MOD: DAJobsEXP -- ActiveExpeditionFleets: %s -- ReadyExpeditionFleets: %s -- PreparingExpeditionFleets: %s.'.[$DAJobsEXPActiveExpeditionFleets.count,$DAJobsEXPReadyExpeditionFleets.count,$DAJobsEXPPreparingExpeditionFleets.count]" context="false" filter="scripts"/>
							<debug_text text="$LocDebugString" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
							<remove_value name="$DAJobsEXPLocEnemiesTableFactions"/>
							<remove_value name="$DAJobsEXPLocEnemiesTableFaction"/>
							<remove_value name="$LocDebugString"/>
						</do_if>
						<do_else>
							<debug_text text="'MOD: DAJobsEXP -- $DAJobsEXPEnemiesTable.keys.count: %s.'.[$DAJobsEXPEnemiesTable.keys.count]" context="false" filter="error"/>
						</do_else>
					</actions>
				</library>
				<library name="LibraryJobsEXPPatrolShipyardSector">
					<actions>
						<set_value name="$DAJobsEXPLocExpeditionShip" exact="$DAJobsEXPLocPotentialShip"/>
						<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol.indexof.{$DAJobsEXPLocExpeditionShip}">
							<!-- Find owned sectors -->
							<find_sector name="$DAJobsEXPLocOwnedSectors" owner="$DAJobsEXPLocExpeditionShip.trueowner" multiple="true"/>
							<do_if value="$DAJobsEXPLocOwnedSectors.count" min="1">
								<!-- Find Shipyards -->
								<find_station_by_true_owner name="$DAJobsEXPLocShipyards" space="$DAJobsEXPLocOwnedSectors" canbuildships="true" faction="$DAJobsEXPLocExpeditionShip.trueowner" sortbygatedistanceto="$DAJobsEXPLocExpeditionShip" multiple="true">
									<match_content class="class.buildmodule" checkoperational="true"/>
								</find_station_by_true_owner>
								<set_value name="$DAJobsEXPLocClosestShipyardSector" exact="$DAJobsEXPLocShipyards.{1}.sector"/>
								<do_if value="($DAJobsEXPLocClosestShipyardSector.exists) and ($DAJobsEXPLocExpeditionShip.defaultorder.id == 'Patrol') and ($DAJobsEXPLocExpeditionShip.defaultorder.$space != $DAJobsEXPLocClosestShipyardSector)">
									<create_order object="$DAJobsEXPLocExpeditionShip" id="'Patrol'" default="true">
										<param name="space" value="$DAJobsEXPLocClosestShipyardSector"/>
										<param name="range" value="class.sector"/>
									</create_order>
									<add_to_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocExpeditionShip"/>
									<debug_text text="'MOD: DAJobsEXP -- Fixed patrol: %s %s %s -- New sector: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,$DAJobsEXPLocClosestShipyardSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								</do_if>
								<do_elseif value="not $DAJobsEXPLocClosestShipyardSector.exists">
									<!-- Faction no longer has a shipyard sector -->
									<debug_text text="'MOD: DAJobsEXP -- No Shipyard Sector: %s %s %s -- order sector: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,$DAJobsEXPLocExpeditionShip.defaultorder.$space.knownname]" context="false" filter="error"/>
								</do_elseif>
								<do_elseif value="not ($DAJobsEXPLocExpeditionShip.defaultorder.id == 'Patrol')">
									<!-- Ship doesn't have a default order of patrol -->
									<debug_text text="'MOD: DAJobsEXP -- Not patrol order: %s %s %s -- order: %s.'.[$DAJobsEXPLocExpeditionShip.idcode,$DAJobsEXPLocExpeditionShip.knownname,$DAJobsEXPLocExpeditionShip.sector.knownname,$DAJobsEXPLocExpeditionShip.defaultorder.id]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								</do_elseif>
								<do_elseif value="$DAJobsEXPLocExpeditionShip.defaultorder.$space == $DAJobsEXPLocClosestShipyardSector">
									<!-- Ship is already patrolling correct sector -->
									<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol.indexof.{$DAJobsEXPLocExpeditionShip}">
										<add_to_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocExpeditionShip"/>
									</do_if>
								</do_elseif>
								<do_else>
									<!-- This should never be reached -->
								</do_else>
								<remove_value name="$DAJobsEXPLocShipyards"/>
								<remove_value name="$DAJobsEXPLocClosestShipyardSector"/>
							</do_if>
							<remove_value name="$DAJobsEXPLocOwnedSectors"/>
						</do_if>
						<remove_value name="$DAJobsEXPLocExpeditionShip"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPLaunchExpeditionFleets">
					<actions>
						<set_value name="$DAJobsEXPChanceToLaunch" exact="30" chance="(not $DAJobsEXPChanceToLaunch?) * 100"/>
						<do_for_each name="$DAJobsEXPLocReadyExpeditionShip" in="$DAJobsEXPReadyExpeditionFleets" reverse="true">
							<do_if value="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocReadyExpeditionShip.trueowner}.count" min="1" chance="$DAJobsEXPChanceToLaunch">
								<set_value name="$DAJobsEXPChanceToLaunch" exact="30"/>
								<!-- Ship is ready and the faction has enemies -->
								<!-- Chance based to launch, random enemy -->
								<!-- MAYBE: prefer helping allies adjacent sector  -->
								<set_value name="$DAJobsEXPLocEnemyFaction" exact="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocReadyExpeditionShip.trueowner}.random"/>
								<set_value name="$DAJobsEXPLocThisFaction" exact="$DAJobsEXPLocReadyExpeditionShip.trueowner"/>
								<!-- to implement ally assist, will need to find closest ally sector bordering an enemy -->
								<find_sector name="$DAJobsEXPLocEnemyFactionSectors" owner="$DAJobsEXPLocEnemyFaction" multiple="true" sortbygatedistanceto="$DAJobsEXPLocReadyExpeditionShip"/>
								<do_if value="($DAJobsEXPLocEnemyFaction != null) and ($DAJobsEXPLocEnemyFaction.isactive) and ($DAJobsEXPLocEnemyFactionSectors.count)">
									<set_value name="$AssistAllyConflict" exact="false"/>
									<!--<do_if value="$DAJobsEXPAlliesTable.{$DAJobsEXPLocThisFaction}.count" min="1">
										<do_for_each name="$LocAllyFaction" in="$DAJobsEXPAlliesTable.{$DAJobsEXPLocThisFaction}">
											<do_if value="$DAJobsEXPEnemiesTable.{$LocAllyFaction}.indexof.{$DAJobsEXPLocEnemyFaction}">
												
											</do_if>
										</do_for_each>
									</do_if>-->
									<do_if value="$AssistAllyConflict">
										<!-- MAYBE: ally assist -->
									</do_if>
									<do_else>
										<set_value name="$DAJobsEXPLocEnemyFactionSector" exact="$DAJobsEXPLocEnemyFactionSectors.{1}"/>
										<find_station_by_true_owner name="$DAJobsEXPLocEnemyStations" space="$DAJobsEXPLocEnemyFactionSector" faction="$DAJobsEXPLocEnemyFaction" sortbydistanceto="$DAJobsEXPLocReadyExpeditionShip" multiple="true"/>
										<do_if value="$DAJobsEXPLocEnemyStations.count" min="1">
											<remove_from_group group="$DAJobsEXPExpeditionFleetsFixedPatrol" object="$DAJobsEXPLocReadyExpeditionShip"/>
											<cancel_all_orders object="$DAJobsEXPLocReadyExpeditionShip"/>
											<create_position name="$DAJobsEXPLocPosition" object="$DAJobsEXPLocEnemyStations.{1}" space="$DAJobsEXPLocEnemyFactionSector"/>
											<set_value name="$DAJobsEXPLocMindist" exact="30km"/>
											<set_value name="$DAJobsEXPLocMaxdist" exact="40km"/>
											<run_actions ref="md.LIB_Generic.CreatePositionEclipticNearFar" result="$DAJobsEXPLocPosition">
												<param name="position" value="$DAJobsEXPLocPosition"/>
												<param name="mindist" value="$DAJobsEXPLocMindist"/>
												<param name="maxdist" value="$DAJobsEXPLocMaxdist"/>
											</run_actions>
											<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'MoveGeneric'">
												<param name="destination" value="$DAJobsEXPLocEnemyStations.{1}"/>
												<param name="position" value="$DAJobsEXPLocPosition"/>
												<param name="endintargetzone" value="true"/>
												<param name="activepatrol" value="true"/>
											</create_order>
											<remove_value name="$DAJobsEXPLocPosition"/>
											<remove_value name="$DAJobsEXPLocMindist"/>
											<remove_value name="$DAJobsEXPLocMaxdist"/>
											<do_for_each name="$DAJobsEXPLocEnemyStation" in="$DAJobsEXPLocEnemyStations">
												<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'Attack'">
													<param name="primarytarget" value="$DAJobsEXPLocEnemyStation"/>
													<param name="pursuetargets" value="true"/>
													<param name="allowothertargets" value="true"/>
												</create_order>
												<create_order object="$DAJobsEXPLocReadyExpeditionShip" id="'AttackInRange'">
													<param name="destination" value="[$DAJobsEXPLocEnemyFactionSector,$DAJobsEXPLocEnemyStation.relativeposition.{$DAJobsEXPLocEnemyFactionSector}]"/>
												</create_order>
											</do_for_each>
											<add_to_group groupname="$DAJobsEXPActiveExpeditionFleets" object="$DAJobsEXPLocReadyExpeditionShip"/>
											<remove_from_group group="$DAJobsEXPReadyExpeditionFleets" object="$DAJobsEXPLocReadyExpeditionShip"/>
											<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- %s %s (%s) attacking %s stations owned by %s in %s.'.[$DAJobsEXPLocReadyExpeditionShip.trueowner,$DAJobsEXPLocReadyExpeditionShip.knownname,$DAJobsEXPLocReadyExpeditionShip.idcode,$DAJobsEXPLocEnemyStations.count,$DAJobsEXPLocEnemyFaction,$DAJobsEXPLocEnemyFactionSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
											<remove_value name="$DAJobsEXPLocEnemyStation"/>
											<include_actions ref="LibraryJobsEXPNewsExpeditionLaunched"/>
										</do_if>
										<do_else>
											<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- $DAJobsEXPLocEnemyStations.count: %s.'.[$DAJobsEXPLocEnemyStations.count]" context="false" filter="error"/>
										</do_else>
										<remove_value name="$DAJobsEXPLocEnemyFactionSector"/>
										<remove_value name="$DAJobsEXPLocEnemyStations"/>
									</do_else>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DAJobsEXP -- LaunchExpeditionFleet -- $DAJobsEXPLocEnemyFaction: %s -- $DAJobsEXPLocEnemyFaction.isactive: %s -- $DAJobsEXPLocEnemyFactionSectors: %s.'.[$DAJobsEXPLocEnemyFaction,$DAJobsEXPLocEnemyFaction.isactive,$DAJobsEXPLocEnemyFactionSectors.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsEXPDetailedDebug * 100"/>
								</do_else>
								<remove_value name="$DAJobsEXPLocEnemyFaction"/>
								<remove_value name="$DAJobsEXPLocThisFaction"/>
								<remove_value name="$DAJobsEXPLocEnemyFactionSectors"/>
							</do_if>
							<do_elseif value="$DAJobsEXPEnemiesTable.{$DAJobsEXPLocReadyExpeditionShip.trueowner}.count" min="1">
								<set_value name="$DAJobsEXPChanceToLaunch" exact="[$DAJobsEXPChanceToLaunch + 15,100].min"/>
							</do_elseif>
							<do_else>
								<!-- No Enemies -->
							</do_else>
						</do_for_each>
						<remove_value name="$DAJobsEXPLocReadyExpeditionShip"/>
					</actions>
				</library>
				<library name="LibraryJobsEXPNewsExpeditionLaunched">
					<!-- DONE: this needs to be worked on for new mod format -->
					<!-- MAYBE: integrate into DADynamicNews processing -->
					<actions>
						<!-- 
							LOGBOOK
								Title = {33232474,102} // Faction = $DAJobsEXPLocReadyExpeditionShip.trueowner.knownname // Text = $Message
							END LOGBOOK
						-->
						<!-- 
							NOTIFICATION // Max 4 Rows
								{DA Dynamic News}: $DAJobsEXPLocReadyExpeditionShip.trueowner.knownname
								$Message
							END NOTIFICATION
						-->
						<do_if value="$DAJobsEXPLocReadyExpeditionShip and $DAJobsEXPLocEnemyFactionSector">
							<!-- $DAJobsEXPLocReadyExpeditionShip, $DAJobsEXPLocEnemyFactionSector -->
							<substitute_text text="$LocationText" source="{1016,1}" comment="in sector $SECTOR$">
								<replace string="'$SECTOR$'" with="$DAJobsEXPLocReadyExpeditionShip.sector.knownname"/>
							</substitute_text>
							<substitute_text text="$DestinationText" source="{30004,8202}" comment="Invasion started in $DESTINATION$">
								<replace string="'$DESTINATION$'" with="$DAJobsEXPLocEnemyFactionSector.knownname"/>
							</substitute_text>
							<set_value name="$Message" exact="'%s(%s) %s. %s.'.[$DAJobsEXPLocReadyExpeditionShip.knownname,$DAJobsEXPLocReadyExpeditionShip.idcode,$LocationText,$DestinationText]"/>
							<remove_value name="$LocationText"/>
							<remove_value name="$DestinationText"/>
							<do_if value="$DADVT.$DADynamicNewsEnableNewsStorage">
								<signal_cue_instantly cue="EventDynamicNewsTracking" param="[$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname,$Message]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableNotifications">
								<show_notification priority="1" text="'%s: %s\n%s'.[{33232474,102},$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname,$Message]"/>
							</do_if>
							<do_if value="$DADVT.$DADynamicNewsEnableLogbook">
								<write_to_logbook category="news" title="{33232474,102}" faction="$DAJobsEXPLocReadyExpeditionShip.trueowner.knownname" text="$Message"/>
							</do_if>
							<remove_value name="$Message"/>
						</do_if>
					</actions>
				</library>
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Jobs - Expeditions -->
				<library name="LibraryCheckJobsEXPVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAJobsEXPEnable?">
							<set_value name="$DADVT.$DAJobsEXPEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsEXPFactions?">
							<set_value name="$DADVT.$DAJobsEXPFactions" exact="[faction.argon, faction.antigone, faction.paranid, faction.holyorder, faction.teladi, faction.split, faction.terran, faction.xenon]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExcludedFactions?">
							<create_list name="$DAJobsEXPExcludedFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPTags?">
							<set_value name="$DAJobsEXPTags" exact="[tag.daexpedition]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPEnemiesTable?">
							<set_value name="$DAJobsEXPEnemiesTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPAlliesTable?">
							<set_value name="$DAJobsEXPAlliesTable" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPErrorFactions?">
							<create_list name="$DAJobsEXPErrorFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPActiveExpeditionFleets?">
							<create_group groupname="$DAJobsEXPActiveExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPReadyExpeditionFleets?">
							<create_group groupname="$DAJobsEXPReadyExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPPreparingExpeditionFleets?">
							<create_group groupname="$DAJobsEXPPreparingExpeditionFleets"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExpeditionFleetsFixedPatrol?">
							<create_group groupname="$DAJobsEXPExpeditionFleetsFixedPatrol"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsEXPDetailedDebug?">
							<set_value name="$DADVT.$DAJobsEXPDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsEXPExpeditionJobs?">
							<set_value name="$DAJobsEXPExpeditionJobs" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAJobsEXP -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Jobs - Expeditions -->
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions // Jobs - Expeditions -->
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Timer Cues // Timer Cues // Timer Cues // Timer Cues // Timer Cues -->
				<!-- Jobs - SmartSectorTags -->
				<!-- DONE: Reset checktime to 19min -->
				<cue name="TimerJobsSST" instantiate="true" checkinterval="60min" checktime="19min" comment="Timer 19">
					<conditions>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
					</conditions>
					<actions>
						<do_if value="$DAJobsSSTPrerequisitesComplete">
							<debug_text text="'MOD: DAJobsSST -- %s -- Started processing all factions.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
							<set_value name="$DAJobsSSTPrerequisitesComplete" exact="false"/>
							<set_value name="$DAJobsSSTTimeScriptStarted" exact="player.age"/>
							<include_actions ref="LibraryJobsSSTCheckFactions"/>
							<debug_text text="'MOD: DAJobsSST -- %s -- Finished processing all factions.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
							<!-- Signal CheckSectors which will handle calculation spreading -->
							<signal_cue_instantly cue="EventJobsSSTFindSectors"/>
							<!-- EventJobsSSTFindSectors will signal CheckJobs when it has completed -->
						</do_if>
						<do_elseif value="not $DAJobsSSTPrerequisitesComplete">
							<debug_text text="'MOD: DAJobsSST -- %s -- Attempted to run script prior to completion of previous.'.[player.age]" context="false" filter="error"/>
						</do_elseif>
					</actions>
				</cue>
				<cue name="TimerJobsSSTOrderShips" instantiate="true" checkinterval="15min" checktime="15min" comment="Timer 15">
					<conditions>
						<check_value value="$DADVT.$DAJobsSSTEnable"/>
						<check_value value="$DAJobsSSTPrerequisitesComplete"/>
						<check_value value="$DADVT.$DAJobsSSTJobSizeQuotas.keys.list.count"/>
						<check_value value="$DAJobsSSTJobsActivated.keys.list.count"/>
					</conditions>
					<actions>
						<set_value name="$DAJobsSSTCheckFactionsForOrders" exact="[]"/>
						<append_list_elements name="$DAJobsSSTCheckFactionsForOrders" other="$DADVT.$DAJobsSSTJobSizeQuotas.keys.list"/>
					</actions>
					<cues>
						<cue name="JobsSSTOrderShipsLoop">
							<delay exact="2s"/>
							<actions>
								<do_if value="$DAJobsSSTCheckFactionsForOrders.count">
									<set_value name="$DAJobsSSTOrderFaction" exact="$DAJobsSSTCheckFactionsForOrders.{1}"/>
									<include_actions ref="LibraryJobsSSTOrderShips"/>
									<remove_from_list name="$DAJobsSSTCheckFactionsForOrders" exact="$DAJobsSSTOrderFaction" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<remove_value name="$DAJobsSSTOrderFaction"/>
									<!-- Debug -->
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Update on load cues // Update on load cues // Update on load cues // Update on load cues // Update on load cues -->
				<!-- Jobs - SmartSectorTags -->
				<cue name="UpdateOnLoadJobsSSTFindFactions" instantiate="true" namespace="this">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
					</conditions>
					<actions>
						<!-- Find claimspace factions -->
						<set_value name="$LocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$LocClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$LocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$LocVisitorList"/>
						<!-- Remove unwanted from LocClaimspaceList -->
						<remove_from_list name="$LocClaimspaceList" list="$LocVisitorList" multiple="true"/>
						<remove_value name="$LocVisitorList"/>
						<!-- TODO: Revert hard coded factions that are not supported -->
						<set_value name="$LocUnsupportedFactions" exact="[faction.boron,faction.scavenger,faction.loanshark,faction.freesplit,faction.hatikvah,faction.buccaneers,faction.player]"/>
						<!-- Check Factions-->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<do_for_each name="$LocFaction" in="$LocClaimspaceList">
							<do_if value="$LocFaction.isactive and $LocFaction.willclaimspace">
								<!-- Only setting up new entries for factions, cleaning up would revert user settings -->
								<!-- TODO: Revert hard coded factions that are not supported -->
								<do_if value="(not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}?) and (not $LocUnsupportedFactions.indexof.{$LocFaction})">
									<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}" exact="table[]"/>
									<!-- Critical Tag -->
									<set_value name="$LocCriticalTagText" exact="'DACriticalTag' + $LocFaction.id"/>
									<set_value name="$LocCriticalTag" exact="tag.{$LocCriticalTagText}"/>
									<do_if value="$LocFaction == faction.xenon">
										<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag" exact="[$LocCriticalTag,2,14,2,null,[],null,[]]"/>
										<create_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}"/>
									</do_if>
									<do_else>
										<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag" exact="[$LocCriticalTag,2,1,1,null,[],null,[]]"/>
										<create_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CriticalTag.{7}"/>
									</do_else>
									<!-- Core Tag -->
									<set_value name="$LocCoreTagText" exact="'DACoreTag' + $LocFaction.id"/>
									<set_value name="$LocCoreTag" exact="tag.{$LocCoreTagText}"/>
									<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag" exact="[$LocCoreTag,2,20,1,null,[],null,[]]"/>
									<create_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$CoreTag.{7}"/>
									<!-- Border Tag -->
									<set_value name="$LocBorderTagText" exact="'DABorderTag' + $LocFaction.id"/>
									<set_value name="$LocBorderTag" exact="tag.{$LocBorderTagText}"/>
									<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag" exact="[$LocBorderTag,2,20,2,null,[],null,[]]"/>
									<create_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$BorderTag.{7}"/>
									<!-- Contested Tag -->
									<set_value name="$LocContestedTagText" exact="'DAContestedTag' + $LocFaction.id"/>
									<set_value name="$LocContestedTag" exact="tag.{$LocContestedTagText}"/>
									<set_value name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag" exact="[$LocContestedTag,2,8,2,null,[],null,[]]"/>
									<create_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$ContestedTag.{7}"/>
								</do_if>
							</do_if>
						</do_for_each>
						<debug_text text="'MOD: DAJobsSST -- %s -- Initial Faction Check Complete -- SST Factions: %s -- Claimspace Factions: %s'.[player.age,md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.keys.list.count,$LocClaimspaceList.count]" context="false" filter="scripts" chance="md.$DADynamicVarTable.$DAJobsSSTDetailedDebug * 100"/>
						<remove_value name="$LocClaimspaceList"/>
					</actions>
				</cue>
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<!-- Jobs - Smart Sector Tags -->
				<cue name="EventJobsSSTFindSectors" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<clear_list list="$DAJobsSSTAllSectorList"/>
						<set_value name="$DAJobsSSTFindSectorsTime" exact="player.age"/>
						<debug_text text="'MOD: DAJobsSST -- %s -- Started processing all sectors.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
						<!-- We have an updated $DAJobsSSTClaimspaceFactions to check the situation one by one -->
						<find_sector name="$DAJobsSSTAllSectorList" multiple="true">
							<match_parent normalcluster="true"/>
						</find_sector>
						<sort_list list="$DAJobsSSTAllSectorList" sortbyvalue="loop.element.macro"/>
					</actions>
					<cues>
						<cue name="JobsSSTCheckSectorsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$DAJobsSSTAllSectorList.count">
									<set_value name="$DAJobsSSTLocSector" exact="$DAJobsSSTAllSectorList.{1}"/>
									<include_actions ref="LibraryJobsSSTProcessSector"/>
									<remove_from_list name="$DAJobsSSTAllSectorList" exact="$DAJobsSSTLocSector" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<include_actions ref="LibraryJobsSSTFactionSituationDebug" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									<remove_value name="$DAJobsSSTLocSector"/>
									<signal_cue_instantly cue="EventJobsSSTFindSectorTags"/>
									<!-- Signal job check -->
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTFindSectorTags" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<set_value name="$DAJobsSSTAllSectorList2" exact="[]"/>
						<set_value name="$DAJobsSSTSectorTagsTime" exact="player.age"/>
						<debug_text text="'MOD: DAJobsSST -- %s -- Started processing all sector tags.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
						<!-- We have an updated $DAJobsSSTClaimspaceFactions to check the situation one by one -->
						<find_sector name="$DAJobsSSTAllSectorList2" multiple="true">
							<match_parent normalcluster="true"/>
						</find_sector>
						<sort_list list="$DAJobsSSTAllSectorList2" sortbyvalue="loop.element.macro"/>
					</actions>
					<cues>
						<cue name="JobsSSTCheckSectorTagsLoop">
							<delay exact="1s"/>
							<actions>
								<do_if value="$DAJobsSSTAllSectorList2.count">
									<set_value name="$DAJobsSSTLocSector2" exact="$DAJobsSSTAllSectorList2.{1}"/>
									<include_actions ref="LibraryJobsSSTProcessSectorTags"/>
									<remove_from_list name="$DAJobsSSTAllSectorList2" exact="$DAJobsSSTLocSector2" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<remove_value name="$DAJobsSSTLocSector2"/>
									<do_if value="$DAJobsSSTSectorTagsTime and $DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Time to process all sector tags: %s'.[player.age,(player.age - $DAJobsSSTSectorTagsTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<signal_cue_instantly cue="EventJobsSSTFindJobs"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTFindJobs" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- do for each table.keys, find job by tag, make list of all applicable jobs, process below -->
						<set_value name="$DAJobsSSTLocDAAllJobsToCheck" exact="[]"/>
						<set_value name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="[]"/>
						<set_value name="$DAJobsSSTLocCriticalChecked" exact="false"/>
						<set_value name="$DAJobsSSTLocCoreChecked" exact="false"/>
						<set_value name="$DAJobsSSTLocBorderChecked" exact="false"/>
						<set_value name="$DAJobsSSTLocContestedChecked" exact="false"/>
						<set_value name="$DAJobsSSTFindJobsTime" exact="player.age"/>
						<debug_text text="'MOD: DAJobsSST -- %s -- Started finding all jobs.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
						<!-- Using keys means we potentially check less since only factions with their Critital table set up will be checked -->
						<!-- DONE: Update to handle small/medium/large sized fleets // Script will now pass all jobs for critical/core/border/contested tags -->
						<!-- DONE: Have the script ONLY add appropriate size to DAJobsSSTLocDAAllJobsToCheck -->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
					</actions>
					<cues>
						<cue name="JobsSSTCheckJobLoop">
							<delay exact="2s"/>
							<actions>
								<!-- Set up common list of fleet size tags -->
								<set_value name="$LocFleetSizeTags" exact="[tag.DASmallFleet,tag.DAMediumFleet,tag.DALargeFleet]"/>
								<do_if value="not $DAJobsSSTLocCriticalChecked">
									<do_for_each name="$DAJobsSSTLocTableFaction" in="$DAJobsSSTCriticalSectors.keys.list">
										<do_if value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and $DAJobsSSTCriticalSectors.{$DAJobsSSTLocTableFaction}.count">
											<set_value name="$DAJobsSSTLocDACriticalTagText" exact="'DACriticalTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDACriticalTag" exact="tag.{$DAJobsSSTLocDACriticalTagText}"/>
											<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CriticalTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CriticalTag.count">
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CriticalTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDACriticalTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="typeof $DAJobsSSTLocCorrectJob == datatype.list">
													<set_value name="$DAJobsSSTLocCorrectJob" exact="$DAJobsSSTLocCorrectJob.{1}"/>
												</do_if>
												<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CriticalTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_else>
												<!-- default to medium if broken -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{2}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDACriticalTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
											</do_else>
											<!-- Activate CorrectJob, deactivate others -->
											<!-- $DAJobsSSTLocJobs should contain correct and incorrect -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDACriticalTag" includeinactive="true" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<!-- If there is only one, then the faction doesn't support FleetSize -->
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<!-- Add correct to $DAJobsSSTLocDAAllJobsToCheck and incorrect to $DAJobsSSTLocDAAllJobsToDeactivate -->
															<do_if value="$DAJobsSSTLocCorrectJob? and $DAJobsSSTLocCorrectJob != null">
																<do_if value="$DAJobsSSTLocCorrectJob == $DAJobsSSTLocJob">
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_if>
																<do_else>
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_else>
															</do_if>
															<do_else>
																<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
															</do_else>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDACriticalTagText"/>
											<remove_value name="$DAJobsSSTLocDACriticalTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
											<remove_value name="$DAJobsSSTLocCorrectJob"/>
											<remove_value name="$LocFleetSizeTag"/>
										</do_if>
										<do_elseif value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and (not $DAJobsSSTCriticalSectors.{$DAJobsSSTLocTableFaction}.count)">
											<set_value name="$DAJobsSSTLocDACriticalTagText" exact="'DACriticalTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDACriticalTag" exact="tag.{$DAJobsSSTLocDACriticalTagText}"/>
											<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDACriticalTag" includeinactive="false" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
															<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND TO DEACTIVATE -- Faction: %s -- DACriticalTag: %s -- DACriticalTag Job: %s -- DACriticalTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDACriticalTagText"/>
											<remove_value name="$DAJobsSSTLocDACriticalTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
										</do_elseif>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocTableFaction"/>
									<set_value name="$DAJobsSSTLocCriticalChecked" exact="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_elseif value="not $DAJobsSSTLocCoreChecked">
									<do_for_each name="$DAJobsSSTLocTableFaction" in="$DAJobsSSTCoreSectors.keys.list">
										<do_if value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and $DAJobsSSTCoreSectors.{$DAJobsSSTLocTableFaction}.count">
											<set_value name="$DAJobsSSTLocDACoreTagText" exact="'DACoreTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDACoreTag" exact="tag.{$DAJobsSSTLocDACoreTagText}"/>
											<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CoreTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CoreTag.count">
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CoreTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDACoreTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="typeof $DAJobsSSTLocCorrectJob == datatype.list">
													<set_value name="$DAJobsSSTLocCorrectJob" exact="$DAJobsSSTLocCorrectJob.{1}"/>
												</do_if>
												<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$CoreTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_else>
												<!-- default to medium if broken -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{2}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDACoreTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
											</do_else>
											<!-- Activate CorrectJob, deactivate others -->
											<!-- $DAJobsSSTLocJobs should contain correct and incorrect -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDACoreTag" includeinactive="true" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<!-- If there is only one, then the faction doesn't support FleetSize -->
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<!-- Add correct to $DAJobsSSTLocDAAllJobsToCheck and incorrect to $DAJobsSSTLocDAAllJobsToDeactivate -->
															<do_if value="$DAJobsSSTLocCorrectJob? and $DAJobsSSTLocCorrectJob != null">
																<do_if value="$DAJobsSSTLocCorrectJob == $DAJobsSSTLocJob">
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_if>
																<do_else>
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_else>
															</do_if>
															<do_else>
																<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
															</do_else>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDACoreTagText"/>
											<remove_value name="$DAJobsSSTLocDACoreTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
											<remove_value name="$DAJobsSSTLocCorrectJob"/>
											<remove_value name="$LocFleetSizeTag"/>
										</do_if>
										<do_elseif value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and (not $DAJobsSSTCoreSectors.{$DAJobsSSTLocTableFaction}.count)">
											<set_value name="$DAJobsSSTLocDACoreTagText" exact="'DACoreTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDACoreTag" exact="tag.{$DAJobsSSTLocDACoreTagText}"/>
											<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDACoreTag" includeinactive="false" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
															<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND TO DEACTIVATE -- Faction: %s -- DACoreTag: %s -- DACoreTag Job: %s -- DACoreTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDACoreTagText"/>
											<remove_value name="$DAJobsSSTLocDACoreTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
										</do_elseif>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocTableFaction"/>
									<set_value name="$DAJobsSSTLocCoreChecked" exact="true"/>
									<reset_cue cue="this"/>
								</do_elseif>
								<do_elseif value="not $DAJobsSSTLocBorderChecked">
									<do_for_each name="$DAJobsSSTLocTableFaction" in="$DAJobsSSTBorderSectors.keys.list">
										<do_if value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and $DAJobsSSTBorderSectors.{$DAJobsSSTLocTableFaction}.count">
											<set_value name="$DAJobsSSTLocDABorderTagText" exact="'DABorderTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDABorderTag" exact="tag.{$DAJobsSSTLocDABorderTagText}"/>
											<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$BorderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$BorderTag.count">
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$BorderTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDABorderTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="typeof $DAJobsSSTLocCorrectJob == datatype.list">
													<set_value name="$DAJobsSSTLocCorrectJob" exact="$DAJobsSSTLocCorrectJob.{1}"/>
												</do_if>
												<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$BorderTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_else>
												<!-- default to medium if broken -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{2}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDABorderTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
											</do_else>
											<!-- Activate CorrectJob, deactivate others -->
											<!-- $DAJobsSSTLocJobs should contain correct and incorrect -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDABorderTag" includeinactive="true" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<!-- If there is only one, then the faction doesn't support FleetSize -->
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<!-- Add correct to $DAJobsSSTLocDAAllJobsToCheck and incorrect to $DAJobsSSTLocDAAllJobsToDeactivate -->
															<do_if value="$DAJobsSSTLocCorrectJob? and $DAJobsSSTLocCorrectJob != null">
																<do_if value="$DAJobsSSTLocCorrectJob == $DAJobsSSTLocJob">
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_if>
																<do_else>
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_else>
															</do_if>
															<do_else>
																<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
															</do_else>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDABorderTagText"/>
											<remove_value name="$DAJobsSSTLocDABorderTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
											<remove_value name="$DAJobsSSTLocCorrectJob"/>
											<remove_value name="$LocFleetSizeTag"/>
										</do_if>
										<do_elseif value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and (not $DAJobsSSTBorderSectors.{$DAJobsSSTLocTableFaction}.count)">
											<set_value name="$DAJobsSSTLocDABorderTagText" exact="'DABorderTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDABorderTag" exact="tag.{$DAJobsSSTLocDABorderTagText}"/>
											<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDABorderTag" includeinactive="false" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
															<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND TO DEACTIVATE -- Faction: %s -- DABorderTag: %s -- DABorderTag Job: %s -- DABorderTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDABorderTagText"/>
											<remove_value name="$DAJobsSSTLocDABorderTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
										</do_elseif>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocTableFaction"/>
									<set_value name="$DAJobsSSTLocBorderChecked" exact="true"/>
									<reset_cue cue="this"/>
								</do_elseif>
								<do_elseif value="not $DAJobsSSTLocContestedChecked">
									<do_for_each name="$DAJobsSSTLocTableFaction" in="$DAJobsSSTContestedSectors.keys.list">
										<do_if value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and $DAJobsSSTContestedSectors.{$DAJobsSSTLocTableFaction}.count">
											<set_value name="$DAJobsSSTLocDAContestedTagText" exact="'DAContestedTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDAContestedTag" exact="tag.{$DAJobsSSTLocDAContestedTagText}"/>
											<!-- set_value $fleetsizetag // get suitable jobs $DAJobsSSTCorrectJobs // process -->
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$ContestedTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$ContestedTag.count">
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$ContestedTag.{2}}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDAContestedTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
												<do_if value="typeof $DAJobsSSTLocCorrectJob == datatype.list">
													<set_value name="$DAJobsSSTLocCorrectJob" exact="$DAJobsSSTLocCorrectJob.{1}"/>
												</do_if>
												<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTLocTableFaction}.$ContestedTag.{5}" exact="$DAJobsSSTLocCorrectJob"/>
											</do_if>
											<do_else>
												<!-- default to medium if broken -->
												<set_value name="$LocFleetSizeTag" exact="$LocFleetSizeTags.{2}"/>
												<get_suitable_job result="$DAJobsSSTLocCorrectJob" faction="$DAJobsSSTLocTableFaction" tags="[$DAJobsSSTLocDAContestedTag,$LocFleetSizeTag]" includeinactive="true" force="true" multiple="false"/>
											</do_else>
											<!-- Activate CorrectJob, deactivate others -->
											<!-- $DAJobsSSTLocJobs should contain correct and incorrect -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDAContestedTag" includeinactive="true" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<!-- If there is only one, then the faction doesn't support FleetSize -->
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<!-- Add correct to $DAJobsSSTLocDAAllJobsToCheck and incorrect to $DAJobsSSTLocDAAllJobsToDeactivate -->
															<do_if value="$DAJobsSSTLocCorrectJob? and $DAJobsSSTLocCorrectJob != null">
																<do_if value="$DAJobsSSTLocCorrectJob == $DAJobsSSTLocJob">
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_if>
																<do_else>
																	<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
																	<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
																</do_else>
															</do_if>
															<do_else>
																<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
																<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
															</do_else>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO CHECK -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s -- $LocFleetSizeTag: %s -- $DAJobsSSTLocCorrectJob: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count,@$LocFleetSizeTag,@$DAJobsSSTLocCorrectJob]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDAContestedTagText"/>
											<remove_value name="$DAJobsSSTLocDAContestedTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
											<remove_value name="$DAJobsSSTLocCorrectJob"/>
											<remove_value name="$LocFleetSizeTag"/>
										</do_if>
										<do_elseif value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocTableFaction} and (not $DAJobsSSTContestedSectors.{$DAJobsSSTLocTableFaction}.count)">
											<set_value name="$DAJobsSSTLocDAContestedTagText" exact="'DAContestedTag' + $DAJobsSSTLocTableFaction.id"/>
											<set_value name="$DAJobsSSTLocDAContestedTag" exact="tag.{$DAJobsSSTLocDAContestedTagText}"/>
											<!-- Don't need correct job logic since all jobs with this tag should be deactivated since no sectors meet the criteria -->
											<get_suitable_job result="$DAJobsSSTLocJobs" faction="$DAJobsSSTLocTableFaction" tags="$DAJobsSSTLocDAContestedTag" includeinactive="false" force="true" multiple="true"/>
											<do_if value="$DAJobsSSTLocJobs? and (((typeof $DAJobsSSTLocJobs == datatype.list) and $DAJobsSSTLocJobs.count) or ((typeof $DAJobsSSTLocJobs != datatype.list) and $DAJobsSSTLocJobs))">
												<do_if value="typeof $DAJobsSSTLocJobs == datatype.list">
													<do_if value="$DAJobsSSTLocJobs.count == 1">
														<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs.{1}"/>
														<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
														<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
													</do_if>
													<do_elseif value="$DAJobsSSTLocJobs.count gt 1">
														<do_for_each name="$DAJobsSSTLocJob" in="$DAJobsSSTLocJobs">
															<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
															<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
														</do_for_each>
													</do_elseif>
												</do_if>
												<do_elseif value="$DAJobsSSTLocJobs">
													<set_value name="$DAJobsSSTLocJob" exact="$DAJobsSSTLocJobs"/>
													<append_to_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- FOUND JOB TO DEACTIVATE --Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
											<do_else>
												<debug_text text="'MOD: DAJobsSST -- %s -- NO JOB FOUND TO DEACTIVATE -- Faction: %s -- DAContestedTag: %s -- DAContestedTag Job: %s -- DAContestedTag Job count: %s'.[player.age,$DAJobsSSTLocTableFaction.knownname,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocJob,@$DAJobsSSTLocJobs.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_else>
											<remove_value name="$DAJobsSSTLocDAContestedTagText"/>
											<remove_value name="$DAJobsSSTLocDAContestedTag"/>
											<remove_value name="$DAJobsSSTLocJobs"/>
											<remove_value name="$DAJobsSSTLocJob"/>
										</do_elseif>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocTableFaction"/>
									<set_value name="$DAJobsSSTLocContestedChecked" exact="true"/>
									<reset_cue cue="this"/>
								</do_elseif>
								<do_elseif value="$DAJobsSSTLocCriticalChecked and $DAJobsSSTLocCoreChecked and $DAJobsSSTLocBorderChecked and $DAJobsSSTLocContestedChecked">
									<do_if value="$DAJobsSSTFindJobsTime and $DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Time to find all jobs: %s'.[player.age,(player.age - $DAJobsSSTFindJobsTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
									<remove_value name="$LocFleetSizeTags"/>
									<signal_cue_instantly cue="EventJobsSSTActivateJobs"/>
								</do_elseif>
								<do_else>
									<!-- Error -->
									<remove_value name="$LocFleetSizeTags"/>
									<debug_text text="'MOD: DAJobsSST -- %s -- ERROR in EventJobsSSTFindJobs Cue'.[player.age]" context="false" filter="error"/>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTActivateJobs" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- activate each job if appropriate -->
						<set_value name="$DAJobsSSTActivateJobsTime" exact="player.age"/>
						<debug_text text="'MOD: DAJobsSST -- %s -- Started activating all jobs.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
					</actions>
					<cues>
						<cue name="JobsSSTActivateJobsLoop">
							<delay exact="2s"/>
							<actions>
								<do_if value="$DAJobsSSTLocDAAllJobsToCheck.count">
									<set_value name="$DAJobsSSTLocJob2" exact="$DAJobsSSTLocDAAllJobsToCheck.{1}"/>
									<include_actions ref="LibraryJobsSSTActivateJob"/>
									<remove_from_list name="$DAJobsSSTLocDAAllJobsToCheck" exact="$DAJobsSSTLocJob2" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<!-- Done with basic functionality -->
									<signal_cue_instantly cue="EventJobsSSTDeactivateJobs"/>
									<do_if value="$DAJobsSSTActivateJobsTime and $DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Time to activate all jobs: %s'.[player.age,(player.age - $DAJobsSSTActivateJobsTime).formatted.default]" context="false" filter="scripts"/>
									</do_if>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTDeactivateJobs" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- activate each job if appropriate -->
						<set_value name="$DAJobsSSTDeactivateJobsTime" exact="player.age"/>
						<debug_text text="'MOD: DAJobsSST -- %s -- Started deactivating jobs.'.[player.age]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
					</actions>
					<cues>
						<cue name="JobsSSTDeactivateJobsLoop">
							<delay exact="2s"/>
							<actions>
								<do_if value="$DAJobsSSTLocDAAllJobsToDeactivate.count">
									<set_value name="$DAJobsSSTLocJob3" exact="$DAJobsSSTLocDAAllJobsToDeactivate.{1}"/>
									<include_actions ref="LibraryJobsSSTDeactivateJob"/>
									<remove_from_list name="$DAJobsSSTLocDAAllJobsToDeactivate" exact="$DAJobsSSTLocJob3" multiple="true"/>
									<reset_cue cue="this"/>
								</do_if>
								<do_else>
									<!-- Done with basic functionality -->
									<set_value name="$DAJobsSSTPrerequisitesComplete" exact="true"/>
									<do_if value="$DAJobsSSTDeactivateJobsTime and $DADVT.$DAJobsSSTDetailedDebug">
										<debug_text text="'MOD: DAJobsSST -- %s -- Time to deactivate all jobs: %s'.[player.age,(player.age - $DAJobsSSTDeactivateJobsTime).formatted.default]" context="false" filter="scripts"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Total time of script run: %s'.[player.age,(player.age - $DAJobsSSTTimeScriptStarted).formatted.default]" context="false" filter="scripts"/>
									</do_if>
								</do_else>
							</actions>
						</cue>
					</cues>
				</cue>
				<cue name="EventJobsSSTRequestJobShip" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<!-- DONE: TEST // Seems to be working but some ships aren't getting removed from tracking or their sector isn't -->
						<request_job_ship name="this.$LocRequestedShip" job="event.param.{1}" requester="event.param.{2}" zone="event.param.{3}"/>
						<do_if value="this.$LocRequestedShip">
							<set_value name="this.$LocJobID" exact="event.param.{1}"/>
							<set_value name="this.$LocSector" exact="event.param.{2}"/>
							<set_value name="this.$LocZone" exact="event.param.{3}"/>
							<set_value name="this.$LocFaction" exact="event.param.{4}"/>
							<set_value name="this.$LocWhichTag" exact="event.param.{5}"/>
							<append_to_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{6}" exact="this.$LocRequestedShip"/>
							<append_to_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{8}" exact="this.$LocSector"/>
							<do_if value="md.$DADynamicVarTable.$DAJobsSSTXtremelyDetailedDebug">
								<debug_text text="'MOD: DAJobsSST -- %s -- Placed %s Request for %s -- $Sector: %s -- Job: %s -- LocRequestedShip: %s -- $PendingJobShips.count: %s -- $SectorsWithRequested.count: %s'.[player.age,this.$LocWhichTag,this.$LocFaction,this.$LocSector.knownname,this.$LocJobID,this.$LocRequestedShip,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{6}.count,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{this.$LocFaction}.{this.$LocWhichTag}.{8}.count]" context="false" filter="scripts"/>
							</do_if>
						</do_if>
						<do_else>
							<cancel_cue cue="EventJobsSSTRequestJobShip"/>
						</do_else>
					</actions>
					<cues>
						<!-- Called when a requested jobship finished construction -->
						<cue name="EventJobsSSTShipBuilt">
							<conditions>
								<event_object_signalled object="parent.$LocRequestedShip" param="'build.shiptrader'" param2="'requested_ship_built'"/>
							</conditions>
							<actions>
								<set_requested_job_ship_timeout ship="parent.$LocRequestedShip" timeout="player.age + 4h"/>
								<create_order object="parent.$LocRequestedShip" id="'RestockSubordinates'">
									<param name="init" value="true"/>
								</create_order>
								<set_value name="this.$LocString" exact="'Steps:'"/>
								<!-- Ensure Variables are Valid -->
								<do_if value="parent.$LocRequestedShip and parent.$LocFaction and parent.$LocJobID and parent.$LocWhichTag">
									<!-- Verify integrity of JobSizeQuotas table -->
									<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}? and md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}? and md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.count">
										<!-- Ensure ship is not already in tracked group and that the job matches the correct job -->
										<do_if value="(not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip}) and (md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5} == parent.$LocJobID)">
											<!-- Add the ship to the group -->
											<add_to_group groupname="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}" object="parent.$LocRequestedShip"/>
											<set_value name="this.$LocString" exact="' Added to group.'" operation="add"/>
											<!-- Remove the ship from $PendingJobShips -->
											<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}.indexof.{parent.$LocRequestedShip}">
												<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}" exact="parent.$LocRequestedShip" multiple="false"/>
												<set_value name="this.$LocString" exact="' Removed ship from $PendingJobShips.'" operation="add"/>
											</do_if>
											<!-- Remove one entry of the sector from $SectorsWithRequested -->
											<do_if value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}.indexof.{parent.$LocRequestedShip.jobmainsector}">
												<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}" exact="parent.$LocRequestedShip.jobmainsector" multiple="false"/>
												<set_value name="this.$LocString" exact="' Removed %s from $SectorsWithRequested.'.[parent.$LocRequestedShip.jobmainsector.knownname]" operation="add"/>
											</do_if>
										</do_if>
										<do_elseif value="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip}">
											<!-- Already in group, strange but not a problem -->
											<set_value name="this.$LocString" exact="' Was Already in group.'" operation="add"/>
										</do_elseif>
										<do_elseif value="not (md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5} == parent.$LocJobID)">
											<debug_text text="'MOD: DAJobsSST -- %s -- ERROR ADDING SHIP TO GROUP -- not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.{$LocWhichTag}.{5} == $LocJob -- $Jobname: %s -- $LocJob: %s'.[player.age,md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{5},parent.$LocJobID]" context="false" filter="error"/>
										</do_elseif>
									</do_if>
									<do_else>
										<debug_text text="'MOD: DAJobsSST -- %s -- ERROR ADDING SHIP TO GROUP -- not md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.{$LocWhichTag}.count -- $LocFaction: %s -- $LocWhichTag: %s -- $LocWhichTag.count: %s'.[player.age,@parent.$LocFaction,@parent.$LocWhichTag,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.count]" context="false" filter="error"/>
									</do_else>
								</do_if>
								<do_if value="md.$DADynamicVarTable.$DAJobsSSTXtremelyDetailedDebug">
									<debug_text text="'MOD: DAJobsSST -- %s -- %s(%s) added to md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{%s}.{%s}.{7} -- $JobShipsGroup.index: %s -- JobMainSector: %s -- %s'.[player.age,parent.$LocRequestedShip.knownname,parent.$LocRequestedShip.idcode,@parent.$LocFaction,@parent.$LocWhichTag,@md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{7}.indexof.{parent.$LocRequestedShip},@parent.$LocRequestedShip.jobmainsector.knownname,@this.$LocString]" context="false" filter="scripts"/>
								</do_if>
								<remove_value name="this.$LocString"/>
								<cancel_cue cue="EventJobsSSTRequestJobShip"/>
							</actions>
						</cue>
						<!-- Called when a requested jobship was destroyed (while being built in shipyard) -->
						<cue name="EventJobsSSTShipDestroyed">
							<conditions>
								<event_object_destroyed object="parent.$LocRequestedShip"/>
							</conditions>
							<actions>
								<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{6}" exact="parent.$LocRequestedShip" multiple="false"/>
								<remove_from_list name="md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{parent.$LocFaction}.{parent.$LocWhichTag}.{8}" exact="parent.$LocSector" multiple="false"/>
								<cancel_cue cue="EventJobsSSTRequestJobShip"/>
							</actions>
						</cue>
					</cues>
				</cue>
				<!-- Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries // Functional Libraries -->
				<!-- Jobs - Smart Sector Tags -->
				<library name="LibraryJobsSSTCheckFactions">
					<actions>
						<!-- Find claimspace factions -->
						<set_value name="$DAJobsSSTLocClaimspaceList" exact="[]"/>
						<get_factions_by_tag tag="tag.claimspace" result="$DAJobsSSTLocClaimspaceList"/>
						<!-- Find visitor factions -->
						<set_value name="$DAJobsSSTLocVisitorList" exact="[]"/>
						<get_factions_by_tag tag="tag.visitor" result="$DAJobsSSTLocVisitorList"/>
						<!-- Remove unwanted from LocClaimspaceList -->
						<remove_from_list name="$DAJobsSSTLocClaimspaceList" list="$DAJobsSSTLocVisitorList" multiple="true"/>
						<remove_value name="$DAJobsSSTLocVisitorList"/>
						<set_value name="$DAJobsSSTLocListWasUpdated" exact="false"/>
						<!-- Check for inactive -->
						<!-- Remove table value for inaction faction as well? -->
						<do_for_each name="$DAJobsSSTLocFaction" in="$DAJobsSSTLocClaimspaceList" reverse="true">
							<do_if value="(not ($DAJobsSSTLocFaction.isactive and $DAJobsSSTLocFaction.willclaimspace)) and $DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocFaction}">
								<remove_from_list name="$DAJobsSSTClaimspaceFactions" exact="$DAJobsSSTLocFaction" multiple="true"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Removed Faction from DAClaimspaceFactions: %s.'.[player.age,$DAJobsSSTLocFaction]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								<set_value name="$DAJobsSSTLocListWasUpdated" exact="true"/>
							</do_if>
							<do_elseif value="($DAJobsSSTLocFaction.isactive and $DAJobsSSTLocFaction.willclaimspace) and (not $DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocFaction})">
								<append_to_list name="$DAJobsSSTClaimspaceFactions" exact="$DAJobsSSTLocFaction"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Added Faction to DAClaimspaceFactions: %s.'.[player.age,$DAJobsSSTLocFaction]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								<set_value name="$DAJobsSSTLocListWasUpdated" exact="true"/>
							</do_elseif>
							<do_else>
								<!-- Don't Care -->
							</do_else>
						</do_for_each>
						<remove_value name="$DAJobsSSTLocFaction"/>
						<!-- Our list should have all the factions the script cares about -->
						<do_if value="$DAJobsSSTLocListWasUpdated">
							<sort_list list="$DAJobsSSTClaimspaceFactions" sortbyvalue="loop.element.id"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTProcessSector">
					<actions>
						<find_sector_in_range name="$DAJobsSSTLocSectorsInRange" object="$DAJobsSSTLocSector" maxdistance="1" multiple="true"/>
						<!-- This should help us only process sectors that are connected to something -->
						<do_if value="$DAJobsSSTLocSectorsInRange.count and (($DAJobsSSTLocSectorsInRange.count gt 1) or (($DAJobsSSTLocSectorsInRange.count == 1) and ($DAJobsSSTLocSectorsInRange.{1} != $DAJobsSSTLocSector)))">
							<!-- Check for owner in $DAJobsSSTClaimspaceFactions -->
							<!-- This would miss a sector that isn't owned by a valid faction but is contested by a valid faction -->
							<do_if value="$DAJobsSSTLocSector.owner and ($DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocSector.owner} or ($DAJobsSSTLocSector.owner == faction.ownerless))">
								<!-- Check if Critical, Core, or Border -->
								<create_group groupname="$DAJobsSSTLocCriticalStationGroup"/>
								<find_station groupname="$DAJobsSSTLocCriticalStationGroup" append="true" multiple="true" space="$DAJobsSSTLocSector" functional="true" shipyard="true">
									<match owner="faction.player" negate="true"/>
									<match owner="$DAJobsSSTClaimspaceFactions"/>
								</find_station>
								<find_station groupname="$DAJobsSSTLocCriticalStationGroup" append="true" multiple="true" space="$DAJobsSSTLocSector" functional="true" wharf="true">
									<match owner="faction.player" negate="true"/>
									<match owner="$DAJobsSSTClaimspaceFactions"/>
								</find_station>
								<do_if value="$DAJobsSSTLocCriticalStationGroup.count">
									<set_value name="$DAJobsSSTLocFactionsChecked" exact="[]"/>
									<do_for_each name="$DAJobsSSTLocCriticalStation" in="$DAJobsSSTLocCriticalStationGroup">
										<do_if value="(not $DAJobsSSTLocFactionsChecked.indexof.{$DAJobsSSTLocCriticalStation.owner})">
											<do_if value="not $DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}?">
												<set_value name="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}" exact="[$DAJobsSSTLocSector]"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTCriticalSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocCriticalStation.owner,$DAJobsSSTLocSector.knownname,$DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
											<do_elseif value="not $DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}.indexof.{$DAJobsSSTLocSector}">
												<append_to_list name="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}" exact="$DAJobsSSTLocSector"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTCriticalSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocCriticalStation.owner,$DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_elseif>
											<do_elseif value="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocCriticalStation.owner}.indexof.{$DAJobsSSTLocSector}">
												<!-- Already in list -->
												<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTCriticalSectors. %s . %s.'.[player.age,$DAJobsSSTLocCriticalStation.owner,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_elseif>
											<append_to_list name="$DAJobsSSTLocFactionsChecked" exact="$DAJobsSSTLocCriticalStation.owner"/>
										</do_if>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocFactionsChecked"/>
								</do_if>
								<do_else>
									<do_if value="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocSector.owner}? and $DAJobsSSTCriticalSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
										<!-- The owner no longer has a critical station in this sector -->
										<remove_from_list name="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector" multiple="true"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJobsSSTCriticalSectors. %s.'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocCriticalStation.owner]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
									<!-- Need to do a check for other factions who this was previously a critical sector for -->
								</do_else>
								<remove_value name="$DAJobsSSTLocCriticalStationGroup"/>
								<remove_value name="$DAJobsSSTLocCriticalStation"/>
								<!-- Check if Core -->
								<create_group groupname="$DAJobsSSTLocStationGroup"/>
								<set_value name="$DAJobsSSTLocOwnerOccupied" exact="false"/>
								<set_value name="$DAJobsSSTLocHostileOccupied" exact="false"/>
								<set_value name="$DAJobsSSTLocFactionsinSector" exact="[]"/>
								<set_value name="$DAJobsSSTLocHostileBordering" exact="false"/>
								<find_station groupname="$DAJobsSSTLocStationGroup" append="true" multiple="true" space="$DAJobsSSTLocSector" functional="true">
									<match owner="faction.player" negate="true"/>
								</find_station>
								<do_for_each name="$DAJobsSSTLocStation" in="$DAJobsSSTLocStationGroup">
									<do_if value="$DAJobsSSTClaimspaceFactions.indexof.{$DAJobsSSTLocStation.owner}">
										<append_to_list name="$DAJobsSSTLocFactionsinSector" exact="$DAJobsSSTLocStation.owner" chance="(not $DAJobsSSTLocFactionsinSector.indexof.{$DAJobsSSTLocStation.owner}) * 100"/>
										<do_if value="($DAJobsSSTLocSector.owner == $DAJobsSSTLocStation.owner) and (not $DAJobsSSTLocOwnerOccupied)">
											<set_value name="$DAJobsSSTLocOwnerOccupied" exact="true"/>
											<!-- Owner of sector has a station in sector, only need to check once -->
										</do_if>
										<do_elseif value="($DAJobsSSTLocSector.owner != $DAJobsSSTLocStation.owner) and ($DAJobsSSTLocSector.owner.hasrelation.killmilitary.{$DAJobsSSTLocStation.owner}) and (not $DAJobsSSTLocHostileOccupied)">
											<set_value name="$DAJobsSSTLocHostileOccupied" exact="true"/>
											<!-- Sector has hostile stations in system, only need to check once -->
											<debug_text text="'MOD: DAJobsSST -- %s -- %s has hostile stations in system. Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocHostileOccupied]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_elseif>
									</do_if>
								</do_for_each>
								<!-- Check adjacent sectors for hostiles to sector owner -->
								<do_for_each name="$DAJobsSSTLocAdjacentSector" in="$DAJobsSSTLocSectorsInRange">
									<do_if value="($DAJobsSSTLocAdjacentSector != $DAJobsSSTLocSector) and (not $DAJobsSSTLocHostileBordering)">
										<do_if value="$DAJobsSSTLocAdjacentSector.owner.hasrelation.killmilitary.{$DAJobsSSTLocSector.owner}">
											<set_value name="$DAJobsSSTLocHostileBordering" exact="true"/>
											<break/>
										</do_if>
									</do_if>
								</do_for_each>
								<do_if value="$DAJobsSSTLocOwnerOccupied and (not ($DAJobsSSTLocHostileOccupied or $DAJobsSSTLocHostileBordering))">
									<!-- Core definition: Contains owner stations, contains no enemy stations, not bordering any hostile sectors -->
									<!-- Sector is not ownerless, has no hostile stations, and is not bordering hostile owned sectors -->
									<do_if value="not $DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}?">
										<set_value name="$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}" exact="[$DAJobsSSTLocSector]"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTCoreSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname,$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
									<do_elseif value="not $DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
										<append_to_list name="$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTCoreSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner,$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_elseif>
									<do_elseif value="$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
										<!-- Already in list -->
										<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTCoreSectors. %s . %s.'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_elseif>
									<!-- Sector can be critical and core but sector can not be core and border -->
									<do_if value="($DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}?) and ($DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector})">
										<remove_from_list name="$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector" multiple="true"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJobsSSTBorderSectors. %s.'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
									<!-- Sector can not be core and contested -->
									<do_if value="($DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}?) and ($DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector})">
										<remove_from_list name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector" multiple="true"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJobsSSTContestedSectors. %s.'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_if>
								<do_elseif value="$DAJobsSSTLocOwnerOccupied and ($DAJobsSSTLocHostileOccupied or $DAJobsSSTLocHostileBordering)">
									<!-- Border definition: Contains owner stations, may contain enemy stations, bordering hostile sector -->
									<!-- Sector is not ownerless, has hostile stations or bordering hostile owned sectors -->
									<do_if value="$DAJobsSSTLocHostileBordering">
										<do_if value="not $DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}?">
											<set_value name="$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}" exact="[$DAJobsSSTLocSector]"/>
											<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTBorderSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname,$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_if>
										<do_elseif value="not $DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
											<append_to_list name="$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector"/>
											<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTBorderSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner,$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_elseif>
										<do_elseif value="$DAJobsSSTBorderSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
											<!-- Already in list -->
											<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTBorderSectors. %s . %s.'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_elseif>
									</do_if>
									<do_if value="$DAJobsSSTLocHostileOccupied">
										<do_if value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}?">
											<set_value name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}" exact="[$DAJobsSSTLocSector]"/>
											<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTContestedSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname,$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_if>
										<do_elseif value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
											<append_to_list name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector"/>
											<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTContestedSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner,$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_elseif>
										<do_elseif value="$DAJobsSSTContestedSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector}">
											<!-- Already in list -->
											<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTContestedSectors. %s . %s.'.[player.age,$DAJobsSSTLocSector.owner,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
										</do_elseif>
										<!-- Add sector to $DAJobsSSTContestedSectors for factions that do not own sector -->
										<do_for_each name="$DAJobsSSTLocFaction" in="$DAJobsSSTLocFactionsinSector">
											<do_if value="($DAJobsSSTLocSector.owner != $DAJobsSSTLocFaction) and ($DAJobsSSTLocFaction.hasrelation.killmilitary.{$DAJobsSSTLocSector.owner}) and (not (@$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}))">
												<do_if value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}?">
													<set_value name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}" exact="[$DAJobsSSTLocSector]"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTContestedSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocFaction,$DAJobsSSTLocSector.knownname,$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_if>
												<do_elseif value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}">
													<append_to_list name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}" exact="$DAJobsSSTLocSector"/>
													<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTContestedSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocFaction,$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
												<do_elseif value="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}">
													<!-- Already in list -->
													<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTContestedSectors. %s . %s.'.[player.age,$DAJobsSSTLocFaction,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
												</do_elseif>
											</do_if>
										</do_for_each>
										<remove_value name="$DAJobsSSTLocFactionsinSector2"/>
									</do_if>
									<!-- Sector can be critical and border but sector can not be border and core -->
									<!-- Sector can be border and contested but sector can not be core and contested -->
									<do_if value="($DAJobsSSTLocHostileBordering or $DAJobsSSTLocHostileOccupied) and ($DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}?) and ($DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}.indexof.{$DAJobsSSTLocSector})">
										<remove_from_list name="$DAJobsSSTCoreSectors.{$DAJobsSSTLocSector.owner}" exact="$DAJobsSSTLocSector" multiple="true"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJobsSSTCoreSectors. %s.'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocSector.owner]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_elseif>
								<do_elseif value="$DAJobsSSTLocFactionsinSector.count gt 1">
									<!-- Contested sector definition: contains stations from multiple hostile factions -->
									<!-- Sector is ownerless but more than 1 faction has stations in sector -->
									<set_value name="$DAJobsSSTLocFactionsinSector2" exact="$DAJobsSSTLocFactionsinSector"/>
									<do_for_each name="$DAJobsSSTLocFaction" in="$DAJobsSSTLocFactionsinSector">
										<set_value name="$DAJobsSSTLocHostileOccupied2" exact="false"/>
										<do_for_each name="$DAJobsSSTLocFaction2" in="$DAJobsSSTLocFactionsinSector2">
											<do_if value="($DAJobsSSTLocFaction != $DAJobsSSTLocFaction2) and ($DAJobsSSTLocFaction.hasrelation.killmilitary.{$DAJobsSSTLocFaction2})">
												<set_value name="$DAJobsSSTLocHostileOccupied2" exact="true"/>
												<break/>
											</do_if>
										</do_for_each>
										<do_if value="$DAJobsSSTLocHostileOccupied2">
											<do_if value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}?">
												<set_value name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}" exact="[$DAJobsSSTLocSector]"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Created $DAJobsSSTContestedSectors. %s -- Sector added: %s. Verified: %s'.[player.age,$DAJobsSSTLocFaction,$DAJobsSSTLocSector.knownname,$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
											<do_elseif value="not $DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}">
												<append_to_list name="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}" exact="$DAJobsSSTLocSector"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Added %s to $DAJobsSSTContestedSectors. %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocFaction,$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_elseif>
											<do_elseif value="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector}">
												<!-- Already in list -->
												<debug_text text="'MOD: DAJobsSST -- %s -- Verified $DAJobsSSTContestedSectors. %s . %s.'.[player.age,$DAJobsSSTLocFaction,$DAJobsSSTLocSector.knownname]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_elseif>
											<do_if value="($DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction}?) and ($DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction}.indexof.{$DAJobsSSTLocSector})">
												<remove_from_list name="$DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction}" exact="$DAJobsSSTLocSector" multiple="true"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Removed %s from $DAJobsSSTCoreSectors. %s.'.[player.age,$DAJobsSSTLocSector.knownname,$DAJobsSSTLocFaction]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
										</do_if>
										<remove_value name="$DAJobsSSTLocHostileOccupied2"/>
									</do_for_each>
									<remove_value name="$DAJobsSSTLocFactionsinSector2"/>
								</do_elseif>
							</do_if>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTFactionSituationDebug">
					<actions>
						<do_for_each name="$DAJobsSSTLocFaction3" in="$DAJobsSSTClaimspaceFactions">
							<debug_text text="'MOD: DAJobsSST -- %s -- Faction: %s -- $DAJobsSSTCriticalSectors.count: %s -- $DAJobsSSTCoreSectors.count: %s -- $DAJobsSSTBorderSectors.count: %s -- $DAJobsSSTContestedSectors.count: %s'.[player.age,$DAJobsSSTLocFaction3,@$DAJobsSSTCriticalSectors.{$DAJobsSSTLocFaction3}.count,@$DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction3}.count,@$DAJobsSSTBorderSectors.{$DAJobsSSTLocFaction3}.count,@$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction3}.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
						</do_for_each>
						<do_if value="$DAJobsSSTFindSectorsTime and $DADVT.$DAJobsSSTDetailedDebug">
							<debug_text text="'MOD: DAJobsSST -- %s -- Time to process all sectors: %s'.[player.age,(player.age - $DAJobsSSTFindSectorsTime).formatted.default]" context="false" filter="scripts"/>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTProcessSectorTags">
					<actions>
						<!-- $DAJobsSSTLocSector2 check if it is in a factions table list // update sector tag for each faction individually -->
						<do_for_each name="$DAJobsSSTLocFaction4" in="$DAJobsSSTClaimspaceFactions">
							<do_if value="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocFaction4}?">
								<set_value name="$DAJobsSSTLocDACriticalTagText" exact="'DACriticalTag' + $DAJobsSSTLocFaction4.id"/>
								<set_value name="$DAJobsSSTLocDACriticalTag" exact="tag.{$DAJobsSSTLocDACriticalTagText}"/>
								<do_if value="$DAJobsSSTCriticalSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2}">
									<do_if value="not ($DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACriticalTag})">
										<add_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDACriticalTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDACriticalTag,$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACriticalTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJobsSSTCriticalSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2})">
									<do_if value="$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACriticalTag}">
										<remove_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDACriticalTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDACriticalTag,@$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACriticalTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_elseif>
								<remove_value name="$DAJobsSSTLocDACriticalTagText"/>
								<remove_value name="$DAJobsSSTLocDACriticalTag"/>
							</do_if>
							<do_if value="$DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction4}?">
								<set_value name="$DAJobsSSTLocDACoreTagText" exact="'DACoreTag' + $DAJobsSSTLocFaction4.id"/>
								<set_value name="$DAJobsSSTLocDACoreTag" exact="tag.{$DAJobsSSTLocDACoreTagText}"/>
								<do_if value="$DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2}">
									<do_if value="not ($DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACoreTag})">
										<add_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDACoreTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDACoreTag,$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACoreTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJobsSSTCoreSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2})">
									<do_if value="$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACoreTag}">
										<remove_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDACoreTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDACoreTag,@$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDACoreTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_elseif>
								<remove_value name="$DAJobsSSTLocDACoreTagText"/>
								<remove_value name="$DAJobsSSTLocDACoreTag"/>
							</do_if>
							<do_if value="$DAJobsSSTBorderSectors.{$DAJobsSSTLocFaction4}?">
								<set_value name="$DAJobsSSTLocDABorderTagText" exact="'DABorderTag' + $DAJobsSSTLocFaction4.id"/>
								<set_value name="$DAJobsSSTLocDABorderTag" exact="tag.{$DAJobsSSTLocDABorderTagText}"/>
								<do_if value="$DAJobsSSTBorderSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2}">
									<do_if value="not ($DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDABorderTag})">
										<add_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDABorderTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDABorderTag,$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDABorderTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJobsSSTBorderSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2})">
									<do_if value="$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDABorderTag}">
										<remove_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDABorderTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDABorderTag,@$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDABorderTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_elseif>
								<remove_value name="$DAJobsSSTLocDABorderTagText"/>
								<remove_value name="$DAJobsSSTLocDABorderTag"/>
							</do_if>
							<do_if value="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction4}?">
								<set_value name="$DAJobsSSTLocDAContestedTagText" exact="'DAContestedTag' + $DAJobsSSTLocFaction4.id"/>
								<set_value name="$DAJobsSSTLocDAContestedTag" exact="tag.{$DAJobsSSTLocDAContestedTagText}"/>
								<do_if value="$DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2}">
									<do_if value="not ($DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDAContestedTag})">
										<add_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDAContestedTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Added Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDAContestedTag,$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDAContestedTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_if>
								<do_elseif value="not ($DAJobsSSTContestedSectors.{$DAJobsSSTLocFaction4}.indexof.{$DAJobsSSTLocSector2})">
									<do_if value="$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDAContestedTag}">
										<remove_space_location_tag space="$DAJobsSSTLocSector2" tag="$DAJobsSSTLocDAContestedTag"/>
										<debug_text text="'MOD: DAJobsSST -- %s -- Sector: %s -- Faction: %s -- Removed Tag: %s -- Verified: %s'.[player.age,$DAJobsSSTLocSector2.knownname,$DAJobsSSTLocFaction4,$DAJobsSSTLocDAContestedTag,@$DAJobsSSTLocSector2.locationtags.indexof.{$DAJobsSSTLocDAContestedTag}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
									</do_if>
								</do_elseif>
								<remove_value name="$DAJobsSSTLocDAContestedTagText"/>
								<remove_value name="$DAJobsSSTLocDAContestedTag"/>
							</do_if>
							<!-- Core, border, contested -->
						</do_for_each>
					</actions>
				</library>
				<library name="LibraryJobsSSTActivateJob">
					<actions>
						<!-- Check if we need to activate LocJob2 -->
						<!-- This library sets the appropriate job to active and should only receive jobs that have correct tags / fleet size -->
						<do_if value="$DAJobsSSTLocJob2? and $DAJobsSSTLocJob2 != null">
							<do_if value="not $DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}?">
								<set_value name="$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}" exact="[$DAJobsSSTLocJob2,1]"/>
								<set_job_active job="$DAJobsSSTLocJob2" activate="true"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Activated Job: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{2}: %s'.[player.age,$DAJobsSSTLocJob2,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_if>
							<do_elseif value="($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}?) and (($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}) == 0)">
								<!-- previously activated but currently inactive -->
								<set_value name="$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}" exact="1" operation="add"/>
								<set_job_active job="$DAJobsSSTLocJob2" activate="true"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Activated Job: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{2}: %s'.[player.age,$DAJobsSSTLocJob2,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_elseif>
							<do_elseif value="($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}?) and ($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2} gt 0)">
								<!-- already active -->
								<debug_text text="'MOD: DAJobsSST -- %s -- Job already active: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{2}: %s'.[player.age,$DAJobsSSTLocJob2,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_elseif>
							<do_else>
								<!-- No clue what would cause reaching here -->
								<debug_text text="'MOD: DAJobsSST -- %s -- Unhandled instance in Job activation: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob2}.{2}: %s'.[player.age,@$DAJobsSSTLocJob2,@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.count,@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{1},@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob2}.{2}]" context="false" filter="error"/>
							</do_else>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTDeactivateJob">
					<actions>
						<!-- Check if we need to deactivate LocJob3 -->
						<do_if value="$DAJobsSSTLocJob3? and $DAJobsSSTLocJob3 != null">
							<do_if value="not $DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}?">
								<!-- untracked -->
								<set_value name="$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}" exact="[$DAJobsSSTLocJob3,0]"/>
								<set_job_active job="$DAJobsSSTLocJob3" activate="false"/>
								<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$DAJobsSSTLocJob3" checkoperational="true" multiple="true"/>
								<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- %s -- Set ships to timeout:'.[player.age]"/>
									<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
										<edit_order_param order="$LocShipToDeactivate.defaultorder" param="'timeout'" value="player.age + 1s"/>
										<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
									</do_for_each>
									<debug_text text="$LocDeactivateString" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
									<remove_value name="$LocDeactivateString"/>
								</do_if>
								<remove_value name="$LocShipsToDeactivate"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Deactivated untracked Job: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{2}: %s'.[player.age,$DAJobsSSTLocJob3,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_if>
							<do_elseif value="($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}?) and (($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}) != 0)">
								<!-- currently active and tracked -->
								<set_value name="$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}" exact="0"/>
								<set_job_active job="$DAJobsSSTLocJob3" activate="false"/>
								<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$DAJobsSSTLocJob3" checkoperational="true" multiple="true"/>
								<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- %s -- Set ships to timeout:'.[player.age]"/>
									<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
										<edit_order_param order="$LocShipToDeactivate.defaultorder" param="'timeout'" value="player.age + 1s"/>
										<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
									</do_for_each>
									<debug_text text="$LocDeactivateString" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
									<remove_value name="$LocDeactivateString"/>
								</do_if>
								<remove_value name="$LocShipsToDeactivate"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Deactivated Job: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{2}: %s'.[player.age,$DAJobsSSTLocJob3,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_elseif>
							<do_elseif value="($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}?) and ($DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2} == 0)">
								<!-- already deactived -->
								<find_ship name="$LocShipsToDeactivate" space="player.galaxy" job="$DAJobsSSTLocJob3" checkoperational="true" multiple="true"/>
								<do_if value="$LocShipsToDeactivate? and $LocShipsToDeactivate.count">
									<set_value name="$LocDeactivateString" exact="'MOD: DAJobsSST -- %s -- Set ships to timeout:'.[player.age]"/>
									<do_for_each name="$LocShipToDeactivate" in="$LocShipsToDeactivate">
										<edit_order_param order="$LocShipToDeactivate.defaultorder" param="'timeout'" value="player.age + 1s"/>
										<set_value name="$LocDeactivateString" exact="' %s(%s) %s,'.[$LocShipToDeactivate.knownname,$LocShipToDeactivate.idcode,$LocShipToDeactivate.trueowner.knownname]" operation="add"/>
									</do_for_each>
									<debug_text text="$LocDeactivateString" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTDetailedDebug * 100"/>
									<remove_value name="$LocDeactivateString"/>
								</do_if>
								<remove_value name="$LocShipsToDeactivate"/>
								<debug_text text="'MOD: DAJobsSST -- %s -- Job already deactivated: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{2}: %s'.[player.age,$DAJobsSSTLocJob3,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.count,$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{1},$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
							</do_elseif>
							<do_else>
								<!-- No clue what would cause reaching here -->
								<debug_text text="'MOD: DAJobsSST -- %s -- Unhandled instance in Job deactivation: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.count: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{1}: %s -- $DAJobsSSTJobsActivated.{$+$DAJobsSSTLocJob3}.{2}: %s'.[player.age,@$DAJobsSSTLocJob3,@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.count,@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{1},@$DAJobsSSTJobsActivated.{'$'+$DAJobsSSTLocJob3}.{2}]" context="false" filter="error"/>
							</do_else>
						</do_if>
					</actions>
				</library>
				<library name="LibraryJobsSSTOrderShips">
					<actions>
						<!-- $DAJobsSSTOrderFaction is the faction to check -->
						<!--	md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction} // 
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CriticalTag' == [$LocCriticalTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'CoreTag' == [$LocCoreTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'BorderTag' == [$LocBorderTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
								md.$DADynamicVarTable.$DAJobsSSTJobSizeQuotas.{$LocFaction}.$+'ContestedTag' == [$LocContestedTag,$FleetSize,$GalaxyQuota,$SectorQuota,$JobName,$PendingJobShips,$JobShipsGroup,$SectorsWithRequested]
						-->
						<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}?">
							<!-- $CriticalTag -->
							<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{5} != null) and $DAJobsSSTCriticalSectors.{$DAJobsSSTOrderFaction}.count">
								<find_ship_by_true_owner groupname="$LocShips" faction="$DAJobsSSTOrderFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{5}" checkoperational="true" multiple="true"/>
								<do_if value="$LocShips? and $LocShips.count">
									<do_for_each name="$LocShip" in="$LocShips">
										<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}.indexof.{$LocShip}">
											<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}" object="$LocShip"/>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{6}.indexof.{$LocShip}">
											<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{6}" exact="$LocShip" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}.indexof.{$LocShip.jobmainsector})">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
											</do_if>
										</do_if>
									</do_for_each>
									<debug_text text="'MOD: DAJobsSST -- %s -- Updated $CriticalTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[player.age,$DAJobsSSTOrderFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								</do_if>
								<remove_value name="$LocShips"/>
								<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{4} gt 0)">
									<!-- This means we are below the galaxy cap and sector quota gt 0 -->
									<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
									<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}.count"/>
									<do_for_each name="$LocSector" in="$DAJobsSSTCriticalSectors.{$DAJobsSSTOrderFaction}">
										<do_if value="$LocGalaxyQuotaWanted le 0">
											<break/>
										</do_if>
										<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{4}"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}.count">
											<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{7}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
											<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{8}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
											<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
												<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
											</find_zone>
											<do_if value="$LocZones.count">
												<!-- TEST: Signal cue to request ship -->
												<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
												<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CriticalTag.{5},$LocSector,$LocZones.random,$DAJobsSSTOrderFaction,'$CriticalTag']"/>
												<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Requested $CriticalTag job ship for faction: %s'.[player.age,$DAJobsSSTOrderFaction.id]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
										</do_if>
										<remove_value name="$LocSectorQuotaWanted"/>
									</do_for_each>
									<remove_value name="$LocGalaxyQuotaWanted"/>
								</do_if>
							</do_if>
							<!-- $CoreTag -->
							<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{5} != null) and $DAJobsSSTCoreSectors.{$DAJobsSSTOrderFaction}.count">
								<find_ship_by_true_owner groupname="$LocShips" faction="$DAJobsSSTOrderFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{5}" checkoperational="true" multiple="true"/>
								<do_if value="$LocShips? and $LocShips.count">
									<do_for_each name="$LocShip" in="$LocShips">
										<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}.indexof.{$LocShip}">
											<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}" object="$LocShip"/>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{6}.indexof.{$LocShip}">
											<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{6}" exact="$LocShip" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}.indexof.{$LocShip.jobmainsector})">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
											</do_if>
										</do_if>
									</do_for_each>
									<debug_text text="'MOD: DAJobsSST -- %s -- Updated $CoreTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[player.age,$DAJobsSSTOrderFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								</do_if>
								<remove_value name="$LocShips"/>
								<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{4} gt 0)">
									<!-- This means we are below the galaxy cap and sector quota gt 0 -->
									<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
									<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}.count"/>
									<do_for_each name="$LocSector" in="$DAJobsSSTCoreSectors.{$DAJobsSSTOrderFaction}">
										<do_if value="$LocGalaxyQuotaWanted le 0">
											<break/>
										</do_if>
										<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{4}"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}.count">
											<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{7}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
											<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{8}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
											<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
												<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
											</find_zone>
											<do_if value="$LocZones.count">
												<!-- TEST: Signal cue to request ship -->
												<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
												<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$CoreTag.{5},$LocSector,$LocZones.random,$DAJobsSSTOrderFaction,'$CoreTag']"/>
												<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Requested $CoreTag job ship for faction: %s'.[player.age,$DAJobsSSTOrderFaction.id]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
										</do_if>
										<remove_value name="$LocSectorQuotaWanted"/>
									</do_for_each>
									<remove_value name="$LocGalaxyQuotaWanted"/>
								</do_if>
							</do_if>
							<!-- $BorderTag -->
							<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{5} != null) and $DAJobsSSTBorderSectors.{$DAJobsSSTOrderFaction}.count">
								<find_ship_by_true_owner groupname="$LocShips" faction="$DAJobsSSTOrderFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{5}" checkoperational="true" multiple="true"/>
								<do_if value="$LocShips? and $LocShips.count">
									<do_for_each name="$LocShip" in="$LocShips">
										<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}.indexof.{$LocShip}">
											<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}" object="$LocShip"/>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{6}.indexof.{$LocShip}">
											<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{6}" exact="$LocShip" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}.indexof.{$LocShip.jobmainsector})">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
											</do_if>
										</do_if>
									</do_for_each>
									<debug_text text="'MOD: DAJobsSST -- %s -- Updated $BorderTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[player.age,$DAJobsSSTOrderFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								</do_if>
								<remove_value name="$LocShips"/>
								<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{4} gt 0)">
									<!-- This means we are below the galaxy cap and sector quota gt 0 -->
									<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
									<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}.count"/>
									<do_for_each name="$LocSector" in="$DAJobsSSTBorderSectors.{$DAJobsSSTOrderFaction}">
										<do_if value="$LocGalaxyQuotaWanted le 0">
											<break/>
										</do_if>
										<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{4}"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}.count">
											<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{7}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
											<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{8}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
											<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
												<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
											</find_zone>
											<do_if value="$LocZones.count">
												<!-- TEST: Signal cue to request ship -->
												<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
												<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$BorderTag.{5},$LocSector,$LocZones.random,$DAJobsSSTOrderFaction,'$BorderTag']"/>
												<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Requested $BorderTag job ship for faction: %s'.[player.age,$DAJobsSSTOrderFaction.id]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
										</do_if>
										<remove_value name="$LocSectorQuotaWanted"/>
									</do_for_each>
									<remove_value name="$LocGalaxyQuotaWanted"/>
								</do_if>
							</do_if>
							<!-- $ContestedTag -->
							<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag? and $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{5} != null) and $DAJobsSSTContestedSectors.{$DAJobsSSTOrderFaction}.count">
								<find_ship_by_true_owner groupname="$LocShips" faction="$DAJobsSSTOrderFaction" space="player.galaxy" job="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{5}" checkoperational="true" multiple="true"/>
								<do_if value="$LocShips? and $LocShips.count">
									<do_for_each name="$LocShip" in="$LocShips">
										<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}.indexof.{$LocShip}">
											<add_to_group groupname="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}" object="$LocShip"/>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{6}.indexof.{$LocShip}">
											<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{6}" exact="$LocShip" multiple="true"/>
											<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}.count and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}.indexof.{$LocShip.jobmainsector})">
												<remove_from_list name="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}" exact="$LocShip.jobmainsector" multiple="false"/>
											</do_if>
										</do_if>
									</do_for_each>
									<debug_text text="'MOD: DAJobsSST -- %s -- Updated $ContestedTag JobShipGroup for faction: %s -- $GalaxyQuota: %s -- $SectorQuota: %s -- $JobName: %s -- $PendingJobShips.count: %s -- $JobShipsGroup.count: %s -- $SectorsWithRequested.count: %s'.[player.age,$DAJobsSSTOrderFaction.id,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{3},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{4},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{5},@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{6}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}.count,@$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}.count]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
								</do_if>
								<remove_value name="$LocShips"/>
								<do_if value="(($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{6}.count + $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}.count) lt $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{3}) and ($DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{4} gt 0)">
									<!-- This means we are below the galaxy cap and sector quota gt 0 -->
									<!-- DONE: How to check if a sector needs ships or not // only check active? check jobmainzone? IDK at this point, break time -->
									<set_value name="$LocGalaxyQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{3} - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{6}.count - $DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}.count"/>
									<do_for_each name="$LocSector" in="$DAJobsSSTContestedSectors.{$DAJobsSSTOrderFaction}">
										<do_if value="$LocGalaxyQuotaWanted le 0">
											<break/>
										</do_if>
										<set_value name="$LocSectorQuotaWanted" exact="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{4}"/>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}.count">
											<do_for_each name="$LocShip" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{7}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocShip.jobmainsector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}.count and ($LocSectorQuotaWanted gt 0)">
											<do_for_each name="$LocTempSector" in="$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{8}">
												<do_if value="($LocSectorQuotaWanted gt 0) and ($LocTempSector == $LocSector)">
													<set_value name="$LocSectorQuotaWanted" exact="1" operation="subtract"/>
												</do_if>
												<do_elseif value="$LocSectorQuotaWanted le 0">
													<break/>
												</do_elseif>
											</do_for_each>
										</do_if>
										<do_if value="($LocSectorQuotaWanted gt 0) and ($LocGalaxyQuotaWanted gt 0)">
											<find_zone name="$LocZones" space="$LocSector" normalzone="true" multiple="true">
												<match_child class="[class.station, class.gate, class.highwayentrygate, class.highwayexitgate]" checkoperational="true"/>
											</find_zone>
											<do_if value="$LocZones.count">
												<!-- TEST: Signal cue to request ship -->
												<!-- event.param = [$JobID,$Sector,$JobMainZone,$Faction,$WhichTag] -->
												<signal_cue_instantly cue="EventJobsSSTRequestJobShip" param="[$DADVT.$DAJobsSSTJobSizeQuotas.{$DAJobsSSTOrderFaction}.$ContestedTag.{5},$LocSector,$LocZones.random,$DAJobsSSTOrderFaction,'$ContestedTag']"/>
												<set_value name="$LocGalaxyQuotaWanted" exact="1" operation="subtract"/>
												<debug_text text="'MOD: DAJobsSST -- %s -- Requested $ContestedTag job ship for faction: %s'.[player.age,$DAJobsSSTOrderFaction.id]" context="false" filter="scripts" chance="$DADVT.$DAJobsSSTXtremelyDetailedDebug * 100"/>
											</do_if>
										</do_if>
										<remove_value name="$LocSectorQuotaWanted"/>
									</do_for_each>
									<remove_value name="$LocGalaxyQuotaWanted"/>
								</do_if>
							</do_if>
						</do_if>
					</actions>
				</library>
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Jobs - SmartSectorTags -->
				<library name="LibraryCheckJobsSSTVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAJobsSSTEnable?">
							<set_value name="$DADVT.$DAJobsSSTEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTCriticalSectors?">
							<set_value name="$DAJobsSSTCriticalSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTCoreSectors?">
							<set_value name="$DAJobsSSTCoreSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTBorderSectors?">
							<set_value name="$DAJobsSSTBorderSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTContestedSectors?">
							<set_value name="$DAJobsSSTContestedSectors" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTClaimspaceFactions?">
							<create_list name="$DAJobsSSTClaimspaceFactions"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTAllSectorList?">
							<create_list name="$DAJobsSSTAllSectorList"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTJobsActivated?">
							<set_value name="$DAJobsSSTJobsActivated" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTDetailedDebug?">
							<set_value name="$DADVT.$DAJobsSSTDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTXtremelyDetailedDebug?">
							<set_value name="$DADVT.$DAJobsSSTXtremelyDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DAJobsSSTPrerequisitesComplete?">
							<set_value name="$DAJobsSSTPrerequisitesComplete" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAJobsSSTJobSizeQuotas?">
							<set_value name="$DADVT.$DAJobsSSTJobSizeQuotas" exact="table[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAJobsSST -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Jobs - SmartSectorTags -->
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags // Jobs - SmartSectorTags -->
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
				<!-- MAYBE: Add more gates, set to off by default -->
				<!-- DONE: add eve faction optional gates via md in their mods -->
				<!-- DONE: create menu for activating / deactivating -->
				<!-- DONE: check if faction mods are successfully checked -->
				<!-- Update on load cues // Update on load cues // Update on load cues // Update on load cues // Update on load cues -->
				<!-- Gate -->
				<cue name="UpdateOnLoadGate" instantiate="true">
					<conditions>
						<check_any>
							<event_universe_generated/>
							<event_game_loaded/>
						</check_any>
						<check_value value="$DADVT.$DAGateEnable"/>
					</conditions>
					<actions>
						<signal_cue_instantly cue="EventGateFindGates"/>
					</actions>
				</cue>
				<!-- Gate -->
				<!-- Event cues // Event cues // Event cues // Event cues // Event cues -->
				<!-- Gate -->
				<cue name="EventGateFindGates" instantiate="true">
					<conditions>
						<event_cue_signalled/>
					</conditions>
					<actions>
						<!-- if someone removes gates mid playthrough this may have issues -->
						<set_value name="$DAGateLocZones" exact="[]"/>
						<set_value name="$DAGateLocGates" exact="[]"/>
						<set_value name="$DAGateLocAllGates" exact="[]"/>
						<set_value name="$DAGateLocTempGateList" exact="[]"/>
						<!-- Find Zones from macros -->
						<find_zone name="$DAGateLocZones" multiple="true" space="player.galaxy" macro="$DADVT.$DAGateZoneMacros"/>
						<!-- Find Gates -->
						<find_gate name="$DAGateLocGates" multiple="true" space="$DAGateLocZones">
							<match_any>
								<match active="true"/>
								<match active="false"/>
							</match_any>
						</find_gate>
						<find_gate name="$DAGateLocAllGates" multiple="true" space="player.galaxy">
							<match_any>
								<match active="true"/>
								<match active="false"/>
							</match_any>
						</find_gate>
						<!-- TODO: $DADVT.$DAGateTrackedGates was originally a table so this code is excessive, will clean up later -->
						<!-- TODO: Some people are dumb enough to remove gates mid game so check for invalid macros/gates -->
						<!-- Check if gates are tracked -->
						<do_if value="$DAGateLocGates.count">
							<do_if value="$DADVT.$DAGateDetailedDebug">
								<debug_text text="'MOD: DAGate -- %s -- Number of gates found: %s of %s.'.[player.age,$DAGateLocGates.count,$DAGateLocAllGates.count]" context="false" filter="scripts"/>
								<set_value name="$DAGateLocGateDebugString" exact="'MOD: DAGate -- %s -- Gate Report:'.[player.age]"/>
							</do_if>
							<do_for_each name="$DAGateLocGate" in="$DAGateLocGates" counter="$A">
								<do_if value="not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}">
									<append_to_list name="$DAGateLocTempGateList" exact="$DAGateLocGate"/>
								</do_if>
								<do_if value="$DADVT.$DAGateDetailedDebug">
									<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: %s.%s.Gate -- IsActive: %s -- Destination: %s -- Exit: %s -- Extension: %s -- Tracked: %s'.[$A,$DAGateLocGate.sector.macro,$DAGateLocGate.zone.macro,$DAGateLocGate.isactive,$DAGateLocGate.destination.macro,$DAGateLocGate.exit.macro,$DAGateLocGate.extension,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}]" operation="add"/>
								</do_if>
							</do_for_each>
							<!-- Update gates that were not tracked -->
							<do_if value="$DAGateLocTempGateList.count">
								<do_if value="$DADVT.$DAGateDetailedDebug">
									<set_value name="$DAGateLocGateDebugString" exact="'\n  Updating untracked gates:'" operation="add"/>
								</do_if>
								<do_for_each name="$DAGateLocGate" in="$DAGateLocTempGateList" counter="$B">
									<!-- $DADVT.$DAGateTrackedGates is a list -->
									<!-- Check the gate -->
									<do_if value="$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}">
										<do_if value="not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}">
											<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
											<do_if value="$DADVT.$DAGateDetailedDebug">
												<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: FIXED MISSING EXITGATE %s.%s.Gate -- Tracked: %s -- IsExitTracked: %s'.[$B,$DAGateLocGate.sector.macro,$DAGateLocGate.zone.macro,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate},$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}]" operation="add"/>
											</do_if>
										</do_if>
									</do_if>
									<do_else>
										<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate"/>
										<do_if value="not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}">
											<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
										</do_if>
										<do_if value="$DADVT.$DAGateDetailedDebug">
											<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: ADDED %s.%s.Gate -- Tracked: %s -- IsExitTracked: %s'.[$B,$DAGateLocGate.sector.macro,$DAGateLocGate.zone.macro,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate},$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}]" operation="add"/>
										</do_if>
									</do_else>
									<!-- Check the exit -->
									<do_if value="$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}">
										<do_if value="not $DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}">
											<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate"/>
											<do_if value="$DADVT.$DAGateDetailedDebug">
												<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: FIXED MISSING GATE %s.%s.Gate -- Tracked: %s -- IsExitTracked: %s'.[$B,$DAGateLocGate.exit.sector.macro,$DAGateLocGate.exit.zone.macro,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit},$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}]" operation="add"/>
											</do_if>
										</do_if>
									</do_if>
									<do_else>
										<append_to_list name="$DADVT.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
										<do_if value="$DADVT.$DAGateDetailedDebug">
											<set_value name="$DAGateLocGateDebugString" exact="'\n  %s: ADDED %s.%s.Gate -- Tracked: %s -- IsExitTracked: %s'.[$B,$DAGateLocGate.exit.sector.macro,$DAGateLocGate.exit.zone.macro,$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit},$DADVT.$DAGateTrackedGates.indexof.{$DAGateLocGate}]" operation="add"/>
										</do_if>
									</do_else>
								</do_for_each>
							</do_if>
							<do_if value="$DADVT.$DAGateDetailedDebug">
								<debug_text text="$DAGateLocGateDebugString" context="false" filter="scripts" chance="$DADVT.$DAGateDetailedDebug * 100"/>
								<remove_value name="$DAGateLocGateDebugString"/>
							</do_if>
						</do_if>
						<remove_value name="$DAGateLocZones"/>
						<remove_value name="$DAGateLocGates"/>
						<remove_value name="$DAGateLocAllGates"/>
						<remove_value name="$DAGateLocTempGateList"/>
					</actions>
				</cue>
				<cue name="EventGateFindOtherModGates" instantiate="true" namespace="this">
					<conditions>
						<event_cue_signalled/>
						<!-- event.param = [[$ZoneMacros]] -->
					</conditions>
					<actions>
						<do_if value="event.param? and (typeof event.param == datatype.list)">
							<set_value name="$LocMacroList" exact="[]"/>
							<append_list_elements name="$LocMacroList" other="event.param"/>
							<!-- Find Zones from macros -->
							<find_zone name="$DAGateLocZones" multiple="true" space="player.galaxy" macro="$LocMacroList"/>
							<!-- Find Gates -->
							<find_gate name="$DAGateLocGates" multiple="true" space="$DAGateLocZones">
								<match_any>
									<match active="true"/>
									<match active="false"/>
								</match_any>
							</find_gate>
							<do_if value="$DAGateLocGates.count">
								<do_for_each name="$DAGateLocGate" in="$DAGateLocGates">
									<do_if value="not md.$DADynamicVarTable.$DAGateTrackedGates.indexof.{$DAGateLocGate}">
										<append_to_list name="md.$DADynamicVarTable.$DAGateTrackedGates" exact="$DAGateLocGate"/>
									</do_if>
									<do_if value="not md.$DADynamicVarTable.$DAGateTrackedGates.indexof.{$DAGateLocGate.exit}">
										<append_to_list name="md.$DADynamicVarTable.$DAGateTrackedGates" exact="$DAGateLocGate.exit"/>
									</do_if>
								</do_for_each>
							</do_if>
							<remove_value name="$LocMacroList"/>
							<remove_value name="$DAGateLocZones"/>
							<remove_value name="$DAGateLocGates"/>
						</do_if>
					</actions>
				</cue>
				<!-- Gate -->
				<!-- Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries // Variable Check Libraries -->
				<!-- Gate -->
				<library name="LibraryCheckGateVariables">
					<actions>
						<set_value name="$MissingVarCount" exact="0"/>
						<do_if value="not $DADVT.$DAGateEnable?">
							<set_value name="$DADVT.$DAGateEnable" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateTrackedGates?">
							<set_value name="$DADVT.$DAGateTrackedGates" exact="[]"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateZoneMacros?">
							<set_value name="$DADVT.$DAGateZoneMacros" exact="[macro.ZoneDAG3_Cluster_28_Sector001_macro,macro.ZoneDAG6_Cluster_41_Sector001_macro,macro.ZoneDAG3_Cluster_46_Sector001_macro,macro.ZoneDAG6_Cluster_08_Sector001_macro,macro.ZoneDAG5_Cluster_15_Sector001_macro,macro.ZoneDAG2_Cluster_43_Sector001_macro,macro.ZoneDAG6_Cluster_19_Sector001_macro,macro.ZoneDAG3_Cluster_09_Sector001_macro]"/>
							<do_if value="faction.split?">
								<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG5_Cluster_405_Sector001_macro,macro.ZoneDAG2_Cluster_418_Sector001_macro]"/>
							</do_if>
							<do_if value="faction.terran?">
								<append_list_elements name="$DADVT.$DAGateZoneMacros" other="[macro.ZoneDAG1_Cluster_112_Sector001_macro,macro.ZoneDAG1_Cluster_112_Sector002_macro]"/>
							</do_if>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<do_if value="not $DADVT.$DAGateDetailedDebug?">
							<set_value name="$DADVT.$DAGateDetailedDebug" exact="true"/>
							<set_value name="$MissingVarCount" exact="1" operation="add"/>
						</do_if>
						<!-- Print only if missing -->
						<do_if value="$MissingVarCount">
							<debug_text text="'MOD: DAGate -- %s -- Number of missing variables set: %s.'.[player.age,$MissingVarCount]" context="false" filter="error"/>
						</do_if>
					</actions>
				</library>
				<!-- Gate -->
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
				<!-- Gate // Gate // Gate // Gate // Gate // Gate // Gate // Gate -->
			</cues>
			<!-- TODO: Maybe play the game eventually, idk -->
		</cue>
	</cues>
</mdscript>
